/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.auth', ['ipCookie', 'ds.ygooglesignin']);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
'use strict';

angular.module('ds.auth')
/**
 * Controller for handling authentication related modal dialogs (signUp/signIn).
 */
    .controller('AuthModalDialogCtrl', ['$rootScope', '$scope', 'AuthSvc',
        'settings', 'AuthDialogManager', 'loginOpts', 'showAsGuest', '$state', 'YGoogleSignin', '$window',
        function ($rootScope, $scope, AuthSvc, settings, AuthDialogManager, loginOpts, showAsGuest, $state, YGoogleSignin, $window) {

            $scope.user = {
                signup: {},
                signin: {
                    email: '',
                    password: ''
                }
            };

            $scope.errors = {
                signup: [],
                signin: []
            };

            $scope.fbAppId = settings.facebookAppId;
            $scope.googleClientId = settings.googleClientId;
            // determines "continue as guest" button:
            $scope.showAsGuest = showAsGuest;
            $scope.cookiesEnabled = $window.navigator.cookieEnabled;

            AuthSvc.initFBAPI();
            AuthSvc.initGoogleAPI();

            $scope.$on('authlogin:error', function(){
                var response = { status: 0 };
                $scope.errors.signin = AuthSvc.extractServerSideErrors(response);
            });

            /** Closes the dialog.*/
            $scope.closeDialog = function(){
                AuthDialogManager.close();
            };

            //loyalty
            $scope.submitDisabled = false;

            /** Shows dialog that allows the user to create a new account.*/
            $scope.signup = function (authModel, signUpForm) {
                if (signUpForm.$valid) {
                    $scope.submitDisabled = true;
                    AuthSvc.signup(authModel, loginOpts).then(
                        function (response) {
                            if (response.cookiesDisabled) {
                                $scope.showCreateAccountErrMsg = true;
                                $scope.user.signup.email = '';
                                $scope.user.signup.password = '';
                            } else {
                                $scope.closeDialog();
                            }
                        }, function (response) {
                            $scope.submitDisabled = false;
                            $scope.errors.signup = AuthSvc.extractServerSideErrors(response);
                        }
                    );
                }
            };

            /** Shows dialog that allows the user to sign in so account specific information can be accessed. */
            $scope.signin = function (authModel, signinForm) {
                if (signinForm.$valid) {
                    AuthSvc.signin(authModel).then(function () {
                        $scope.closeDialog();
                    }, function (response) {
                        $scope.errors.signin = AuthSvc.extractServerSideErrors(response);
                    });
                }
            };

            /** Closes the dialog. */
            $scope.continueAsGuest = function () {
                $scope.closeDialog();
                $state.go('base.checkout.details');
            };

            /** Shows the "request password reset" dialog.*/
            $scope.showResetPassword = function () {
                AuthDialogManager.showResetPassword();
            };

            $scope.clearErrors = function() {
                $scope.errors.signin = [];
                $scope.errors.signup = [];
            };

            $scope.fbLogin = function () {
                AuthSvc.faceBookLogin();
            };

            $scope.googleLogin = function () {
                YGoogleSignin.login().then(function (user) {
                    AuthSvc.onGoogleLogIn(user);
                });
            };

            var unbind = $rootScope.$on('user:socialLogIn', function(eve, obj){
                if(obj.loggedIn){
                    $scope.closeDialog();
                } else {
                    $scope.errors.signin = [({message: 'LOGIN_FAILED'})];
                }
            });

            $scope.$on('$destroy', unbind);

        }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
'use strict';

angular.module('ds.auth')
    /**
     *  Handles interaction for "request password reset" dialog with follow-up "check your email" dialog.
     */
    .controller('PasswordResetCtrl', ['$scope', 'AuthSvc', 'AuthDialogManager', '$state', 'title', 'instructions',
        function($scope, AuthSvc, AuthDialogManager, $state, title, instructions ) {

        $scope.title = title || 'FORGOT_PW' ;
        $scope.instructions = instructions || 'FORGOT_PW_INSTRUCT';

        $scope.closeDialog = function(){
            AuthDialogManager.close();
        };

        $scope.requestPasswordReset = function(email){
           AuthSvc.requestPasswordReset(email).then(function() {
                AuthDialogManager.close();
                AuthDialogManager.showCheckEmail();

            }, function(failure){
               if(failure.status === 404){
                   $scope.message = 'EMAIL_NOT_FOUND';
               } else {
                   $scope.message = failure.message;
               }
            });
        };

        $scope.clearErrors = function(){
            $scope.message = '';
        };


    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
'use strict';

angular.module('ds.auth')
    /**
     *  Displays the "change password" modal dialog.  This is initiated directly by the user
     *  (not via the 'reset password' function) and does not require a token.
     */
    .controller('PasswordUpdateCtrl', ['$scope', 'AuthDialogManager', 'AuthSvc', '$state', '$stateParams', 'TokenSvc', '$modalInstance',
        function($scope, AuthDialogManager, AuthSvc, $state, $stateParams, TokenSvc, $modalInstance) {

            $scope.showPristineErrors = false;
            $scope.submitDisabled = false;
            $scope.errors = [];

            $scope.showAllErrors = function(){
                $scope.showPristineErrors = true;
                return true;
            };

            $scope.updatePassword = function (oldPassword, newPassword) {
                $scope.submitDisabled = true;
                $scope.errors = [];

                AuthSvc.updatePassword(oldPassword, newPassword, TokenSvc.getToken().getUsername() || '').then(
                    function() {
                        $modalInstance.close();
                    },
                    function(error){
                        $scope.submitDisabled = false;

                        if (error.status === 401) {
                            $scope.errors.push({ message: 'WRONG_CURRENT_PASSWORD' });
                        } else if(error.data && error.data.message) {
                            $scope.errors.push({ message: error.data.message });
                        }
                    }
                );
            };

            $scope.close = function() {
                $modalInstance.dismiss('cancel');
            };

            $scope.clearErrors = function(){
                $scope.errors = [];
            };

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
'use strict';

angular.module('ds.auth')
/**
 *  Displays the "indicate new password" page, to which the user will be linked after issuing a request to reset the password.
 *  Assumes that the stateParams provide the token that is required to make the service call.
 */
    .controller('ResetPasswordUpdateCtrl', ['$scope', 'AuthDialogManager', 'AuthSvc', '$state', '$stateParams',
        function ($scope, AuthDialogManager, AuthSvc, $state, $stateParams) {
            $scope.token = $stateParams.token || '';
            $scope.showPristineErrors = false;
            $scope.submitDisabled = false;
            $scope.error = {};
            $scope.showRetryLink =  false;

            $scope.showAllErrors = function () {
                $scope.showPristineErrors = true;
                return true;
            };

            $scope.changePassword = function (token, password) {
                $scope.submitDisabled = true;

                AuthSvc.changePassword(token, password).then(function () {
                    var dlgPromise = AuthDialogManager.showPasswordChanged();
                    dlgPromise.then(function () {
                            // won't be called
                        },
                        function () { // on dismiss - only option
                            var loginPromise = AuthDialogManager.open();
                            loginPromise.then(function () {
                                $state.transitionTo('base.category', $stateParams, {
                                    reload: true,
                                    inherit: true,
                                    notify: true
                                });
                            }, function () {
                                $state.transitionTo('base.category', $stateParams, {
                                    reload: true,
                                    inherit: true,
                                    notify: true
                                });
                            });

                        }
                    );
                }, function (error) {
                    $scope.submitDisabled = false;
                    if(error.status === 400 && error.data && error.data.message && error.data.message.toLowerCase().indexOf('invalid token')> -1) {

                        AuthDialogManager.showResetPassword({title: 'REQUEST_PW_EXPIRED', instructions:'REQUEST_PW_EXPIRED_MSG'});

                    } else {
                        $scope.showRetryLink = true;
                        $scope.error.message= 'PW_CHANGE_FAILED';
                        if (error.data && error.data.message) {
                            $scope.error.details = error.data.message;
                        }
                    }
                });
            };

            $scope.showRequestPasswordReset = function() {
                AuthDialogManager.showResetPassword();
            };

            $scope.clearErrors = function () {
                $scope.showPristineErrors = false;
                $scope.error.message = '';
                $scope.error.details = '';
            };

        }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
'use strict';

angular.module('ds.auth')
.directive('confirmInput', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attrs, ctrl) {
            var firstPassword = '#' + attrs.confirmInput;
            // we're adding a 'on key up' listener to both the original and repeat password
            element.add(firstPassword).on('keyup', function () {
                scope.$apply(function () {
                    var v = element.val()===$(firstPassword).val();
                    ctrl.$setValidity('match', v);
                });
            });
        }
    };
});

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.auth')
.directive('createAccount', ['AuthSvc', 'settings', '$rootScope', function (AuthSvc, settings, $rootScope) {
    return {
        link: function ($scope) {

            $scope.fbAppId = settings.facebookAppId;
            $scope.googleClientId = settings.googleClientId;
            AuthSvc.initFBAPI();

            $scope.errors = {
                signup: []
            };

            /** in page panel to create a new account.*/
            $scope.signup = function (signUpPw, signUpEmail, signUpForm) {
                var authModel = {
                    email: signUpEmail,
                    password: signUpPw
                };
                if (signUpForm.$valid) {
                    AuthSvc.signup(authModel).then( function () {
                            $scope.isAuthenticated = true;
                            $rootScope.$broadcast('confirmation:account');
                        }, function (response) {
                            $scope.errors.signup = AuthSvc.extractServerSideErrors(response);
                        }
                    );
                }
            };

            $scope.fbLogin = function () {
                AuthSvc.faceBookLogin();
            };

        }
    };
}]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/** REST configuration for services related to authorization. */
angular.module('ds.auth')
    .factory('AuthREST', ['Restangular', 'SiteConfigSvc', function(Restangular, siteConfig){

        return {
            /** Configures main authorization API endpoint.*/
            Customers: Restangular.withConfig(function(RestangularConfigurer) {
                RestangularConfigurer.setResponseInterceptor(function (data, operation, what, url, response) {
                    var headers, result = response.data;
                    if (result && operation === 'getList' && what ==='addresses') {
                      headers = response.headers();
                      result.headers = headers;
                    }
                    return result;
                });
                RestangularConfigurer.setBaseUrl(siteConfig.apis.customers.baseUrl);
            })

        };


    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates management of the OAuth token and user name, using cookies.
 */
angular.module('ds.auth')
    .factory('TokenSvc', ['settings', 'ipCookie', 'appConfig',
        function(settings, ipCookie, appConfig){

        var defaultExpirySeconds = 3599;

        var Token = function(userName, accessToken, tenant) {
            this.userName = userName;
            this.accessToken = accessToken;
            this.tenant = tenant;
            this.getUsername = function(){
                return this.userName;
            };
            this.getAccessToken = function(){
                return this.accessToken;
            };
            this.getTenant = function(){
                return this.tenant;
            };
        };


        var TokenSvc = {

            unsetToken: function() {
                ipCookie.remove(settings.accessCookie);
            },

            /** Sets an anonymous access token, only if there currently is no token. */
            setAnonymousToken: function(accessToken, expiresIn) {
                if(!this.getToken().getAccessToken() || this.getToken().getTenant() !== appConfig.storeTenant()) {
                   this.setToken(accessToken, null, expiresIn);
                }
            },

            /*
             * Store token as cookie.
             * @param {String} accessToken [OAuth token]
             * @param {String} userName [user name/email; may be null]
             * @param {String} expiresIn [# of seconds the token will expire in; may be null]
             */
            setToken: function(accessToken, userName, expiresIn) {
                var token = new Token(userName, accessToken, appConfig.storeTenant());
                ipCookie(settings.accessCookie, JSON.stringify(token), {expirationUnit: 'seconds', expires: expiresIn ? expiresIn : defaultExpirySeconds, secure: false});
            },

            /** Returns a Token object with the functions getUsername() and getAccessToken(). */
            getToken: function() {
                var tokenCookie = ipCookie(settings.accessCookie);
                if(tokenCookie ){
                    if(tokenCookie.tenant === appConfig.storeTenant()){
                        return new Token(tokenCookie.userName, tokenCookie.accessToken, tokenCookie.tenant);
                    } else { // existing cookie associated with different tenant - invalidate
                        this.unsetToken();
                    }
                }
                return new Token(null, null, null);
            }

        };

        return TokenSvc;

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.ygooglesignin', [])
    .provider('YGoogleSignin', [ function() {

        this.$get = ['$q', function($q) {
            
            var GoogleObject = function() {};
            var user;
            var url = 'https://apis.google.com/js/client:platform.js?onload=onLoad';

            function isScriptExist () {
                var scripts = document.getElementsByTagName('script');
                for (var i = 0; i < scripts.length; i++) {
                    if (scripts[i].src === url) {
                        return true;
                    }
                }
                return false;
            }

            GoogleObject.prototype.loadData = function (googleClientId) {
                var deferred = $q.defer();
                if (!isScriptExist()) {
                    var meta = document.createElement('meta');
                    meta.name = 'google-signin-scope';
                    meta.content = 'profile email';
                    document.getElementsByTagName('head')[0].appendChild(meta);

                    meta.name = 'google-signin-client_id';
                    meta.content = googleClientId;
                    document.getElementsByTagName('head')[0].appendChild(meta);

                    var params = {
                        /* jshint ignore:start */
                        client_id: googleClientId,
                        cookie_policy: 'single_host_origin'
                        /* jshint ignore:end */
                    };

                    var s, r, t;
                    r = false;
                    s = document.createElement('script');
                    s.type = 'text/javascript';
                    s.src = url;
                    t = document.getElementsByTagName('script')[0];
                    t.parentNode.insertBefore(s, t);
                    s.onload = s.onreadystatechange = function() {
                        if (!r && (!this.readyState || this.readyState === 'complete')) {
                            r = true;
                            window.gapi.load('auth2', function() {
                                window.gapi.auth2.init(params).then(function () {
                                    deferred.resolve();
                                });
                            });
                        }
                    };
                }

                return deferred.promise;
            };

            GoogleObject.prototype.getUser = function (googleClientId) {
                var deferred = $q.defer();
                this.loadData(googleClientId).then(function () {
                    var auth2 = window.gapi.auth2.getAuthInstance();
                    if (auth2.isSignedIn.get()) {
                        var profile = auth2.currentUser.get().getBasicProfile();
                        user = {
                            firstName: profile.Za,
                            lastName: profile.Na,
                            email: profile.hg,
                            image: profile.Ph,
                        };
                    } else {
                        user = {};
                    }
                    deferred.resolve(user);
                });
                return deferred.promise;
            };

            GoogleObject.prototype.login = function () {
                var params = {
                    scope: 'profile email'
                };
                var deferred = $q.defer();
                window.gapi.load('auth2', function() {
                    var auth2 = window.gapi.auth2.getAuthInstance();
                    auth2.signIn(params).then(function (response) {
                        user = {
                            firstname: response.wc.Za,
                            lastname: response.wc.Na,
                            email: response.wc.hg,
                            image: response.wc.Ph,
                            /* jshint ignore:start */
                            token: response.hg.access_token
                            /* jshint ignore:end */
                        };
                        deferred.resolve(user);
                    });
                });
                return deferred.promise;
            };

            GoogleObject.prototype.logout = function () {
                var deferred = $q.defer();
                var auth2 = window.gapi.auth2.getAuthInstance();
                auth2.signOut().then(function () {
                    deferred.resolve();
                });
                return deferred.promise;
            };

            return new GoogleObject();

        } ];

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';
angular.module('ds.auth')
    /** Encapsulates the logic for what needs to happen once a user is logged in or logged out.*/
    .factory('SessionSvc', ['AccountSvc', 'CartSvc', 'GlobalData', '$state', '$stateParams', 'settings', '$rootScope',
        function (AccountSvc, CartSvc, GlobalData, $state, $stateParams, settings, $rootScope) {

            function navigateAfterLogin(context){
                if(context && context.targetState){
                    $state.go(context.targetState, context.targetStateParams || {});
                }
            }

            function commonPostLogin(context){
                CartSvc.refreshCartAfterLogin(GlobalData.customerAccount.id);
                navigateAfterLogin(context);
            }


        return {

            afterLoginFromSignUp: function (context) {
                AccountSvc.account().then(function () {
                    //Customer login event
                    $rootScope.$emit('customer:login', {});
                }).then(function(){
                   commonPostLogin(context);
                });
            },

            /** Performs application logic for the scenario of a successful login.
             * @param context - optional configuration instance with the following optional properties:
             * - fromSignUp - set to true if this login followed the creation of a new account
             * - targetState - state to navigate to once additional configuration has taken place
             * - targetStateParams - state params to go with the targetState
             * */
            afterLogIn: function (context) {

                // there must be an account
                AccountSvc.account().then(function (account) {
                    //Customer login event
                    $rootScope.$emit('customer:login', {});
                    return account;
                }).finally(function () {
                   commonPostLogin(context);
                });
            },

            afterLogOut: function(){
                GlobalData.customerAccount = null;
                CartSvc.resetCart();

                $rootScope.$broadcast('coupon:logout');

                if ( $state.is('base.checkout.details') || ( $state.current.data && $state.current.data.auth && $state.current.data.auth === 'authenticated')) {
                    $state.go(settings.homeState);
                }
            },

            /**
             * Updates the current account profile with data from the social login profile, if properties
             * have not yet been set in the profile.
             * @param profile object with properties "firstName", "lastName", "email"
             */
            afterSocialLogin: function(profile){
                if(profile.email || profile.firstName || profile.lastName){
                    AccountSvc.getCurrentAccount().then(function (accResult) {
                        var updated = false;
                        if(!accResult.firstName && !accResult.lastName){
                            accResult.firstName = profile.firstName;
                            accResult.lastName = profile.lastName;
                            updated = true;
                        }
                        if(!accResult.contactEmail && profile.email){
                            accResult.contactEmail = profile.email;
                            updated = true;
                        }
                        if(updated) {
                            AccountSvc.updateAccount(accResult);
                        }
                    });
                }

            }


        };
    }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates access to the "authentication" service.
 */
angular.module('ds.auth')
    .factory('AuthSvc', ['AuthREST', '$rootScope', 'settings', 'TokenSvc', 'GlobalData', 'appConfig', '$state', '$q', 'SessionSvc', '$window', 'YGoogleSignin',
        function (AuthREST, $rootScope, settings, TokenSvc, GlobalData, appConfig, $state, $q, SessionSvc, $window, YGoogleSignin) {

            function loginAndSetToken(user) {
                return AuthREST.Customers.all('login').customPOST(user).then(function (response) {
                    return TokenSvc.setToken(response.accessToken, user ? user.email : null);
                });
            }

            /** Call this function once a Facebook OAuth token has been obtained.
             * This call with authenticate the user with yaas and will retrieve basic profile information from Facebook.
             * */
            function onFbLogIn(fbToken) {
                AuthenticationService.socialLogin('facebook', fbToken).then(function () {
                    $rootScope.$emit('user:socialLogIn', {loggedIn: true});
                    /* jshint ignore:start */
                    try {
                        FB.api('/me', function (response) {
                            SessionSvc.afterSocialLogin({
                                email: response.email,
                                firstName: response.first_name,
                                lastName: response.last_name
                            });
                        });
                    } catch (error) {
                        console.error('Unable to load FB user profile');
                    }
                    /* jshint ignore:end */
                }, function () {
                    $rootScope.$emit('user:socialLogIn', {loggedIn: false});
                });

            }


            var AuthenticationService = {

                getFBAndGoogleLoginKeys: function () {
                    return AuthREST.Customers.all('loginconfig').get('');
                },

                /** Calls the Facebook API to validate that the user is logged into FB - if yes,
                 * the existing FB token will be used to log the user into the store.  Note that this
                 * function should only be called if the user is already logged into Facebook - if we
                 * invoke the FB.login API through code rather than the integrated FB button,
                 * the login dialog will be a pop-up rather than an iframe.
                 */
                faceBookLogin: function () {
                    FB.getLoginStatus(function (response) {
                        if (response.status === 'connected') {
                            onFbLogIn(response.authResponse.accessToken);
                        } else {
                            FB.login();
                        }
                    }, true);

                },

                /** Loads the Facebook SDK. */
                initFBAPI: function () {
                    try {
                        if (settings.facebookAppId) {

                            // load Facebook SDK
                            $window.fbAsyncInit = function () {
                                FB.init({
                                    appId: settings.facebookAppId,
                                    xfbml: false,
                                    version: 'v2.2'
                                });

                                // Catch "login" events as the user logs in through the FB login dialog which is shown by the FB SDK
                                FB.Event.subscribe('auth.statusChange', function (response) {
                                    if (response.status === 'connected') {
                                        onFbLogIn(response.authResponse.accessToken);
                                    }
                                });
                                FB.XFBML.parse();
                            };
                            (function (d, s, id) {
                                var js, fjs = d.getElementsByTagName(s)[0];
                                var fbElement = d.getElementById(id);
                                if (fbElement) {

                                    return;
                                }
                                js = d.createElement(s);
                                js.id = id;
                                js.src = '//connect.facebook.net/en_US/sdk.js';
                                fjs.parentNode.insertBefore(js, fjs);

                            }(document, 'script', 'facebook-jssdk'));

                        }
                    } catch (e) {
                        console.error('Unable to initialize Facebook API');
                        console.error(e);
                    }
                },


                onGoogleLogIn: function (user) {
                    AuthenticationService.socialLogin('google', user.token).then(function () {
                        $rootScope.$emit('user:socialLogIn', {loggedIn: true});
                        try {
                            if (user.image) {
                                GlobalData.user.image = user.image;
                            }
                            SessionSvc.afterSocialLogin({
                                email: user.email,
                                firstName: user.firstname,
                                lastName: user.lastname
                            });
                        } catch (error) {
                            console.error('Unable to load Google user profile');
                        }
                    }, function () {
                        $rootScope.$emit('user:socialLogIn', {loggedIn: false});
                    });

                },

                initGoogleAPI: function () {
                    YGoogleSignin.loadData(settings.googleClientId);
                },

                isGoogleLoggedIn: function (customer) {
                    if (customer && customer.accounts) {
                        for (var i = 0; i < customer.accounts.length; i++) {
                            if (customer.accounts[i].providerId === 'google') {
                                return true;
                            }
                            return false;
                        }
                    }
                    return false;
                },

                fbParse: function () {
                    if (typeof FB !== 'undefined') {
                        FB.XFBML.parse();
                    }
                },

                extractServerSideErrors: function (response) {
                    var errors = [];
                    if (response.status === 400 && response.data.details && response.data.details[0].field && response.data.details[0].field === 'password') {
                        errors.push({message: 'PASSWORD_INVALID'});
                    } else if (response.status === 401 || response.status === 404) {
                        errors.push({message: 'INVALID_CREDENTIALS'});
                    } else if (response.status === 409) {
                        errors.push({message: 'ACCOUNT_ALREADY_EXISTS'});
                    } else if (response.status === 403) {
                        errors.push({message: 'ACCOUNT_LOCKED'});
                    } else {
                        errors.push({ message: 'SERVER_UNAVAILABLE'});
                    }
                    return errors;
                },

                /**
                 * Performs login (customer specific or anonymous) and updates the current OAuth token in the local storage.
                 * Returns a promise with "success" = access token for when that action has been performed.
                 *
                 * @param user JSON object (with email, password properties), or null for anonymous user.
                 */
                signin: function (user) {
                    return loginAndSetToken(user).then(function () {
                        settings.hybrisUser = user.email;
                        SessionSvc.afterLogIn();
                        
                        //loyalty emit
                        $rootScope.$broadcast('user:signedin');

                    });
                },

                signup: function (user, context) {
                    var def = $q.defer();
                    AuthREST.Customers.all('signup').customPOST(user).then(function (response) {
                        if ($window.navigator.cookieEnabled) {
                           
                          var userData = {
                              customerId: response.id,
                              email: user.email
                          }
                          $rootScope.$broadcast('user:signedup', userData);

                           loginAndSetToken(user).then(function () {
                                settings.hybrisUser = user.email;
                                def.resolve({});
                                SessionSvc.afterLoginFromSignUp(context);
                            }, function (error) {
                                def.reject(error);
                            });
                        } else {
                            def.resolve({cookiesDisabled: true});
                        }
                        
                    }, function (error) {
                        def.reject(error);
                    });
                    return def.promise;
                },

                /** Logs the customer out and removes the token cookie. */
                signOut: function () {
                    if (GlobalData.customerAccount.accounts[0].providerId === 'google') {
                        YGoogleSignin.logout().then(function () {
                            GlobalData.user.image = settings.avatarImagePlaceholder;
                        });
                    }
                    AuthREST.Customers.all('logout').customGET('', {accessToken: TokenSvc.getToken().getAccessToken()});
                    // unset token after logout - new anonymous token will be generated for next request automatically
                    TokenSvc.unsetToken(settings.accessCookie);
                    SessionSvc.afterLogOut();
                },

                /** Returns true if there is a user specific OAuth token cookie for the current tenant.*/
                isAuthenticated: function () {
                    var token = TokenSvc.getToken();
                    return !!token.getAccessToken() && !!token.getUsername() && token.getTenant() === appConfig.storeTenant();
                },

                /** Issues a 'reset password' request. Returns the promise of the completed action.*/
                requestPasswordReset: function (email) {
                    var user = {
                        email: email
                    };
                    return AuthREST.Customers.all('password').all('reset').customPOST(user);
                },

                /** Issues a 'change reset' request via email/link with token.  Returns the promise of the completed action.
                 * @param token that was obtained for password reset
                 * @param new password
                 */
                changePassword: function (token, newPassword) {
                    var user = {
                        token: token,
                        password: newPassword
                    };
                    return AuthREST.Customers.all('password').all('reset').all('update').customPOST(user);
                },

                /** Modifies the password for an authenticated user.*/
                updatePassword: function (oldPassword, newPassword, email) {
                    var payload = {
                        currentPassword: oldPassword,
                        newPassword: newPassword,
                        email: email
                    };
                    return AuthREST.Customers.all('password').all('change').customPOST(payload);
                },

                /** Performs login logic following login through social media login.*/
                socialLogin: function (providerId, token) {
                    return AuthREST.Customers.one('login', providerId).customPOST({accessToken: token}).then(function (response) {
                        // passing static username to trigger 'is authenticated' validation of token
                        TokenSvc.setToken(response.accessToken, 'social');
                        SessionSvc.afterLogIn();
                    });
                }

            };
            return AuthenticationService;

        }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates access to the account service for anonymous login/OAuth token retrieval.
 */
/* jshint ignore:start */
angular.module('ds.auth')
    .factory('AnonAuthSvc', ['TokenSvc', '$http', '$state', '$rootScope', '$translate', 'GlobalData', 'SiteConfigSvc',
        function (TokenSvc, $http, $state, $rootScope, $translate, GlobalData, siteConfig) {

        var inProgress = false;
        return {

            /** Handles request to obtain anonymous token and store it in the cookie.
             * If request already in progress, does nothing.
             */
            getToken: function(){

                if(!inProgress) {
                    inProgress = true;

                    $http.get(siteConfig.apis.account.baseUrl + '/auth/anonymous/login?client_id=' + GlobalData.store.clientId + '&redirect_uri=' + encodeURIComponent(GlobalData.store.redirectURI) + '&hybris-tenant=' + GlobalData.store.tenant, '').then( function(response){
                        var token = response.data.access_token;
                        var expiresIn = response.data.expires_in;
                        TokenSvc.setAnonymousToken(token, expiresIn);
                        inProgress = false;
                        $rootScope.$emit('authtoken:obtained', token);
                    }, function(){
                        inProgress = false;
                        console.error('Unable to perform anonymous login - ensure project id is configured correctly.');
                        $state.go('errors', {errorId: 404});
                    });
                }
            }
        };


    }]);
/* jshint ignore:end */
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/** Authorization manager.  */
angular.module('ds.auth')
    .factory('AuthDialogManager', ['$modal',
        function($modal){

            var authDialog;

            function closeDialog(){
                if (authDialog) {
                    try {
                        authDialog.close();
                    } catch (err){

                    }
                }
            }

            function openDialog(options) {
                // make sure only 1 instance exists in opened state
                closeDialog();
                authDialog = $modal.open(options);
                return authDialog.result;
            }

            return {


                /**
                 * Creates and opens the authorization dialog for sign in/create account.
                 * Returns the promise returned by $modal.result (see angular bootstrap) - the success handler will
                 * be invoked if the the dialog was closed and the "reject" handler will be invoked if the dialog was
                 * dismissed.
                 * @param dialogConfig
                 * @param dialogOptions
                 * @param loginOptions - options for "post login" processing, such as the target URL
                 */
                open: function(dialogConfig, dialogOptions, loginOptions, showContinueAsGuest) {

                    var modalOpts = angular.extend({
                            templateUrl: 'js/app/auth/templates/auth.html',
                            controller: 'AuthModalDialogCtrl',
                            resolve: {
                                loginOpts: function() {
                                    return loginOptions || {};
                                },
                                showAsGuest: function(){
                                    return showContinueAsGuest;
                                }
                            }
                        }, dialogConfig || {});

                    if (dialogOptions && dialogOptions.required) {
                        modalOpts.keyboard = false;
                        modalOpts.backdrop = 'static';
                    }
                    return openDialog(modalOpts);
                },

                close: function() {
                    closeDialog();
                },


                /** Shows the "reset password dialog.
                 * @param opts optional override for 'title' and 'msg'.
                 * */
                showResetPassword: function(opts){
                   var modalOpts = {
                       templateUrl: 'js/app/auth/templates/password-request-reset.html',
                       controller: 'PasswordResetCtrl',
                       resolve:{
                           title: function(){return opts? opts.title : null;},
                           instructions: function(){return opts? opts.instructions : null;}
                       }
                   };
                   return openDialog(modalOpts);
                },

                /** Shows the "check your email" dialog. */
                showCheckEmail: function(){
                    var modalOpts = {
                        templateUrl: 'js/app/auth/templates/check-email.html'
                    };
                    return openDialog(modalOpts);
                },

                /** Shows the 'password changed successfully' dialog. */
                showPasswordChanged: function(){
                    var modalOpts = {
                        templateUrl: 'js/app/auth/templates/pw-change-success.html'
                    };
                    return openDialog(modalOpts);
                },

                /** Shows "update password" dialog for an authenticated user.*/
                showUpdatePassword: function(){
                    var modalOpts = {
                        templateUrl: 'js/app/auth/templates/password-update.html',
                        controller: 'PasswordUpdateCtrl',
                        backdrop: 'static'
                    };
                    return openDialog(modalOpts);
                }


            };

        }
    ]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.addresses', []);


/*
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2014 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 * Localized Addresses: dynamic address forms based on user selection of localization.
 **/

angular.module('ds.addresses')
    .directive('localizedAddresses', ['$compile', '$http', '$templateCache', '$rootScope', 'ShippingSvc', 'Countries',
        function($compile, $http, $templateCache, $rootScope, ShippingSvc, Countries) {

            var selectionArray = [
                {id: 'US', name:'USA'},
                {id: 'CA', name:'CANADA'},
                {id: 'GB', name:'GREAT BRITAIN'}, // feature toggle extra countries.
                {id: 'DE', name:'GERMANY'}];
                // {id: 'CN', name:'CHINA'},
                // {id: 'JP', name:'JAPAN'}];

            var allCountries = Countries.world.countries;

            var initialize = function(scope, elem, viewType){
                // init with default template type
                loadTemplate(scope, elem, '', viewType);
                selectDefaultLocale(scope, viewType);
            };

            var selectDefaultLocale = function (scope, viewType) {

                if (!scope.localeSelection) {
                    scope.localeSelection = {selected: {id: '', name: ''}};
                }
                switch(viewType){
                    case 'addAddress':
                        if (scope.address) {
                            scope.address.country = scope.localeSelection ? scope.localeSelection.id : '';
                        }
                        break;
                    case 'billing':
                        if (scope.order.billTo) {
                            scope.order.billTo.country = scope.localeSelection ? scope.localeSelection.id : '';
                        }
                        break;
                    case 'shipping':
                        if (scope.order.shipTo) {
                            scope.order.shipTo.country = scope.localeSelection ? scope.localeSelection.id : '';
                        }
                        break;
                    default:
                        break;
                }
            };

            // load dynamic address template into scope
            var loadTemplate = function(scope, elem, locale, viewType){
                var tempLoader = getTemplate(scope, locale, viewType);
                // handle http request response, show, compile, init validation.
                tempLoader.success(function(template) {
                    elem.html(template).show();
                }).then( function () {
                    $compile(elem.contents())(scope);
                });
            };

            var getTemplate = function(scope, locale, viewType) {
                var templateLoader, templateUrl,
                baseUrl = 'js/app/addresses/templates/';

                // when locale is not recognized set default template
                if( !_.contains(_.pluck(selectionArray, 'id'), locale)){
                    locale = 'Default';
                    scope.isDefaultForm = true;
                } else {
                    scope.isDefaultForm = false;
                }

                // set dynamic template url and return promise
                templateUrl = baseUrl + viewType + locale + '.html';
                templateLoader = $http.get(templateUrl, {cache: $templateCache});

                return templateLoader;
            };

            var getLocaleSelection = function(id) {
                var locale = {};
                angular.forEach(allCountries, function(item){
                    if (item.id === id){
                        locale = item;
                    }
                });
                return locale;
            };

            var getShipToCountries = function (array) {
                var shipToCountries = [];
                for (var i = 0; i < allCountries.length; i++) {
                    for (var j = 0; j < array.length; j++) {
                        if (allCountries[i].id === array[j]) {
                            shipToCountries.push(allCountries[i]);
                        }
                    }
                }
                return shipToCountries;
            };

            var templateLinker = function(scope, element, attrs) {

                scope.viewTarget = attrs.type;
                scope.usStates = Countries.us.states;
                scope.caProvinces = Countries.canada.provinces;

                if (scope.viewTarget === 'shipping') {
                    ShippingSvc.getShipToCountries().then(
                        function (response) {
                            if (response.length) {
                                scope.localeSelections = getShipToCountries(response);
                            } else {
                                scope.localeSelections = allCountries;
                            }
                        }
                    );
                } else {
                    scope.localeSelections = allCountries;
                }

                // localization selection handler
                scope.initializeLocale = function(locale){
                    loadTemplate(scope, element, locale.id, attrs.type);
                };

                scope.setLocale = function (item) {
                    scope.localeSelection.selected = item;
                    scope.changeLocale(item);
                };

                // localization selection handler
                scope.changeLocale = function(locale){
                    loadTemplate(scope, element, locale.id, attrs.type);
                    //set dynamic datamodel
                    switch(scope.viewTarget){
                        case 'addAddress':
                            scope.address.country = locale.id;
                            scope.address.companyName = '';
                            scope.address.street = '';
                            scope.address.streetAppendix = '';
                            scope.address.city = '';
                            scope.address.state = '';
                            scope.address.zipCode = '';
                            scope.address.contactPhone = '';
                            break;
                        case 'billing':
                            scope.order.billTo.country = locale.id;
                            scope.order.billTo.companyName = '';
                            scope.order.billTo.address1 = '';
                            scope.order.billTo.address2 = '';
                            scope.order.billTo.city = '';
                            scope.order.billTo.state = '';
                            scope.order.billTo.zipCode = '';
                            scope.order.billTo.contactPhone = '';
                            break;
                        case 'shipping':
                            scope.order.shipTo.country = locale.id;
                            scope.order.shipTo.companyName = '';
                            scope.order.shipTo.address1 = '';
                            scope.order.shipTo.address2 = '';
                            scope.order.shipTo.city = '';
                            scope.order.shipTo.state = '';
                            scope.order.shipTo.zipCode = '';
                            scope.order.shipTo.contactPhone = '';
                            break;
                        default:
                            break;
                    }
                    //Here should be implmented logic for shipping address when is active
                    if (scope.viewTarget === 'shipping') {
                        $rootScope.$broadcast('event:shipping-cost-updated', {shipToAddress: scope.order.shipTo});
                    }
                    if (scope.viewTarget !== 'addAddress') {
                        $rootScope.closeCartOnCheckout();
                    }
                };

                $rootScope.$on('noShippingCosts', function (){
                    scope.localeSelection = {selected: {id: '', name: ''}};
                });

                // event for loading addressbook change request
                var unbind = $rootScope.$on('localizedAddress:updated', function (e, name, target) {
                    var locale = getLocaleSelection(name);
                    if( scope.viewTarget === target){
                        scope.localeSelection = {
                            selected: locale
                        };
                        scope.initializeLocale(locale);
                    }
                    if (target === 'addAddress') {
                        scope.address.country = locale.id;
                    }
                });
                scope.$on('$destroy', unbind);


                initialize(scope, element, scope.viewTarget);
            };

            return {
                scope: true,
                restrict: 'E',
                link: templateLinker
            };
    }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.account', [
    'ds.auth'
]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
'use strict';

angular.module('ds.account')

    .controller('AccountCtrl', ['$scope', 'addresses', 'account', 'orders', 'OrderListSvc', 'AccountSvc', '$modal', 'GlobalData', '$translate',

        function ($scope, addresses, account, orders, OrderListSvc, AccountSvc, $modal, GlobalData, $translate) {

            var modalInstance;
            var customerNumber = !!account ? account.customerNumber : null;

            var getDefaultAddress = function () {
                return _.find($scope.addresses, function (addr) {
                    return addr.isDefault;
                });
            };

            $scope.errors = [];
            $scope.account = account;
            $scope.addresses = addresses;
            $scope.orders = orders;
            $scope.defaultAddress = getDefaultAddress();

            // show more or less addresses.
            $scope.showAddressDefault = 6;
            $scope.showAddressButtons = ($scope.addresses.length >= $scope.showAddressDefault);
            $scope.showAllAddressButton = true;
            $scope.showAddressFilter = $scope.showAddressDefault;

            // show more or less orders.
            $scope.showOrdersDefault = 10;
            $scope.showAllOrdersButton = true;
            $scope.showOrderButtons = ($scope.orders.length >= $scope.showOrdersDefault);
            $scope.showOrdersFilter = $scope.showOrdersDefault;

            var extractServerSideErrors = function (response) {
                var errors = [];
                if (response.status === 400) {
                    if (response.data && response.data.details && response.data.details.length) {
                        errors = response.data.details;
                    }
                } else if (response.status === 403 || response.status === 409 || response.status === 401 || response.status === 404) {
                    if (response.data && response.data.message) {
                        errors.push({ message: response.data.message });
                    }
                }
                return errors;
            };

            var extractAddressErrors = function (response, errorMsg) {
                var errors = extractServerSideErrors(response);
                if (response.status === 500) {
                    errors.push({ message: errorMsg });
                }
                return errors;
            };

            // handle dialog dismissal if user select back button, etc
            $scope.$on('$destroy', function () {
                if (modalInstance) {
                    modalInstance.dismiss('cancel');
                }
            });

            $scope.save = function (address, formValid, form /*,formObj*/) {
                // console.log('AddrForm', formObj.$error.required); // Important debug for dynamic form validation.
                $scope.$broadcast('submitting:form', form);
                if (formValid) {
                    AccountSvc.saveAddress(address).then(
                        function () {
                            modalInstance.close();
                        },
                        function (response) {
                            $scope.errorAddressId = null;
                            $scope.errors = extractAddressErrors(response, $translate.instant('SAVE_ADDRESS_ERROR'));
                        });
                } else {
                    $scope.showPristineErrors = true;
                }
            };

            $scope.saveOnEnter = function ($event, address, formValid, form) {
                if ($event.keyCode === 13) {
                    $event.preventDefault();
                    $scope.save(address, formValid, form);
                }
            };

            $scope.openAddressModal = function (address) {
                var fullName = '';
                if ($scope.account.firstName) {
                    fullName = fullName + $scope.account.firstName + ' ';
                }
                if ($scope.account.middleName) {
                    fullName = fullName + $scope.account.middleName + ' ';
                }
                if ($scope.account.lastName) {
                    fullName = fullName + $scope.account.lastName;
                }
                $scope.address = angular.copy(address || {
                    account: customerNumber,
                    contactName: fullName
                });
                $scope.showPristineErrors = false;
                $scope.errors = [];
                modalInstance = $modal.open({
                    templateUrl: 'js/app/account/templates/address-form.html',
                    scope: $scope,
                    backdrop: 'static'
                });

                modalInstance.opened.then(function () {
                    setTimeout(function () {
                        // once dialog is open initialize dynamic localized address.
                        $scope.$emit('localizedAddress:updated', address.country, 'addAddress');
                    }, 10);
                });

                modalInstance.result.then(function () {
                    $scope.refreshAddresses();
                });
            };

            $scope.closeAddressModal = function () {
                modalInstance.close();
            };

            $scope.removeAddress = function (address) {
                address.account = customerNumber;

                $modal.open({
                    templateUrl: 'js/app/account/templates/dialogs/address-remove-dialog.html',
                    controller: 'AddressRemoveDialogCtrl'
                }).result.then(function (deleteAddress) {

                    if (deleteAddress) {
                        AccountSvc.removeAddress(address)
                            .then(function () {
                                $scope.refreshAddresses();
                            }, function (response) {
                                $scope.errorAddressId = address.id;
                                $scope.errors = extractAddressErrors(response, $translate.instant('REMOVE_ADDRESS_ERROR'));
                            });
                    }
                });
            };

            $scope.refreshAddresses = function () {
                AccountSvc.getAddresses().then(function (addresses) {
                    $scope.addresses = addresses;
                    $scope.defaultAddress = getDefaultAddress();
                    $scope.showAddressButtons = ($scope.addresses.length > $scope.showAddressDefault);
                    $scope.showAllAddressButton = ($scope.addresses.length > $scope.showAddressFilter - 1);
                });
            };

            $scope.setAddressAsDefault = function (address) {
                address.isDefault = true;
                address.account = customerNumber;
                AccountSvc.saveAddress(address).then(
                    function () {
                        $scope.refreshAddresses();
                    },
                    function (response) {
                        $scope.refreshAddresses();
                        $scope.errorAddressId = address.id;
                        $scope.errors = extractAddressErrors(response, $translate.instant('UPDATE_DEFAULT_ADDRESS_ERROR'));
                    }
                );
            };


            $scope.showAllOrders = function () {
                $scope.showAllOrdersButton = !$scope.showAllOrdersButton;

                var parms = {
                    pageSize: 100
                };
                OrderListSvc.query(parms).then(function (orders) {
                    $scope.orders = orders;

                    // show filtered list or show all orders. Hide if all data is shown within filter.
                    $scope.showOrdersFilter = $scope.showAllOrdersButton ? $scope.showOrdersDefault : $scope.orders.length;
                    $scope.showOrderButtons = ($scope.orders.length > $scope.showOrdersDefault);
                });
            };

            $scope.showAllAddresses = function () {
                $scope.showAllAddressButton = !$scope.showAllAddressButton;

                var parms = {
                    pageSize: GlobalData.addresses.meta.total
                };
                AccountSvc.getAddresses(parms).then(function (addresses) {
                    $scope.addresses = addresses;

                    // show filtered list or show all addresses. Hide if all data is shown within filter.
                    $scope.showAddressFilter = $scope.showAllAddressButton ? $scope.showAddressDefault : $scope.addresses.length;
                    $scope.showAddressButtons = ($scope.addresses.length > $scope.showAddressDefault);
                });
            };

            /*
             need to set the currency symbol for each order
             */
            angular.forEach($scope.orders, function (order) {
                order.currencySymbol = GlobalData.getCurrencySymbol(order.currency);
            });

        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.account')
    .controller('AccountOrderDetailCtrl', ['$scope', 'order', '$stateParams', 'GlobalData', '$rootScope', '$timeout', function($scope, order, $stateParams, GlobalData, $rootScope, $timeout) {

        $scope.order = order;
        $scope.order.id = $stateParams.orderId;
        $scope.currencySymbol = GlobalData.getCurrencySymbol($scope.order.currency);
        $scope.dateFormat = 'dd/MM/yy';
        var date = new Date(order.created);
        $scope.orderDate = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
        
        //loyalty code
        
        $timeout( function(){ 
            $rootScope.$emit('loyalty:orderId', $scope.order.id);
        });

        //end loyalty code

        var getPaymentInfo = function () {
            return $scope.order.payments[0];
        };

        var getItemsOrderedCount = function () {
            var count = 0;
            angular.forEach(order.entries, function (entry) {
                count += entry.amount;
            });
            return count;
        };

        $scope.itemCount = getItemsOrderedCount();

        $scope.payment = getPaymentInfo();

    }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.account')
    .controller('ChangeEmailConfirmationCtrl', ['$scope', '$stateParams', 'AccountSvc', 'AuthSvc', '$translate',
        function ($scope, $stateParams, AccountSvc, AuthSvc, $translate) {

            $scope.token = $stateParams.token;
            $scope.confirmed = false;

            AccountSvc.confirmEmailUpdate($scope.token)
                .then(function () {
                    
                    //Sign out user
                    AuthSvc.signOut();

                    //Message that email is changed successfully
                    $scope.confirmed = true;
                }, function (error) {
                    console.log(error);
                    //Message that there is error, and to try again or etc?
                    $scope.error = $translate.instant('EDIT_EMAIL_SOMETHING_WENT_WRONG');
                });
        }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
(function () {
    'use strict';

    angular.module('ds.account')
        .controller('AddressRemoveDialogCtrl', ['$scope', '$modalInstance',
            function ($scope, $modalInstance) {

                $scope.delete = function () {
                    $modalInstance.close(true);
                };

                $scope.close = function () {
                    $modalInstance.dismiss('cancel');
                };

            }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.account')
        .controller('EditUserEmailDialogCtrl', ['$scope', 'account', 'AccountSvc', '$modalInstance', '$translate','$injector','$rootScope',
            function ($scope, account, AccountSvc, $modalInstance, $translate,$injector,$rootScope) {

                var LoyaltySvc = $injector.get('LoyaltySvc');
                $scope.account = account;
                $scope.error = '';
                $scope.step = 1;

                $scope.closeEditUserDialog = function () {
                    $modalInstance.dismiss('cancel');
                };

                $scope.updateUserInfo = function () {
                    
                    //Force sync of email address
                    $scope.account.syncContactEmail = true;

                    AccountSvc.updateEmail($scope.account).then(function () {

                        //loyalty call
                        LoyaltySvc.getUser().then(function(user){
                           $rootScope.$broadcast('loyaltyInformation:updated', user);
                            LoyaltySvc.updateAccountDetails($scope.account);

                        });
                        $scope.step = 2;
                    }, function (error) {
                        if (error.status === 401) {
                            $scope.error = $translate.instant('EDIT_EMAIL_PASSWORD_NOT_CORRECT');
                        }
                        else if(error.status === 409) {
                            $scope.error = $translate.instant('EDIT_EMAIL_ALREADY_IN_USE');
                        }
                        else {
                            $scope.error = $translate.instant('EDIT_EMAIL_SOMETHING_WENT_WRONG');
                        }
                    });
                };

                $scope.confirm = function () {
                    $modalInstance.close($scope.account);
                };

            }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.account')
        .controller('EditUserNameDialogCtrl', ['$scope', 'account', 'AccountSvc', 'GlobalData', '$modalInstance','$injector','$rootScope',
            function ($scope, account, AccountSvc, GlobalData, $modalInstance, $injector, $rootScope) {

                var LoyaltySvc = $injector.get('LoyaltySvc');
                $scope.account = angular.copy(account);
      
                $scope.titles = GlobalData.getUserTitles();

                $scope.closeEditUserDialog = function () {
                    $modalInstance.dismiss('cancel');
                };

                $scope.updateUserInfo = function () {
                    var account = angular.copy($scope.account);

                    AccountSvc.updateAccount(account).then(function () {
                        //loyalty call
                        LoyaltySvc.getUser().then(function(user){
                           $rootScope.$broadcast('loyaltyInformation:updated', user);
                           
                               LoyaltySvc.updateAccountDetails(account);

                        });
                        $modalInstance.close(account);
                    });
                };

            }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates access to the "authorization" service.
 */
angular.module('ds.account')
    .factory('AccountSvc', ['AuthREST', 'settings', 'GlobalData', '$q', function(AuthREST, settings, GlobalData, $q){



        var AccountSvc = {

            /**
             * Retrieves the account details of logged-in customer and stores the result in the GlobalData service.
             * Returns a promise of the result.
             */
            account: function() {
                var promise = AuthREST.Customers.all('me').customGET();
                promise.then(function(success){
                    if (success) {
                        GlobalData.customerAccount = success.plain();
                    }
                });
                return promise;
            },

            updateAccount: function(account) {
                return AuthREST.Customers.all('me').customPUT(account, '');
            },

            /**
             * Retrieve addresses of logged in customer.
             */
            getAddresses: function(query) {
                var addressesPromise = AuthREST.Customers.all('me').all('addresses').getList(query);
                addressesPromise.then(function(response) {
                    if (response.headers) {
                        GlobalData.addresses.meta.total = parseInt(response.headers[settings.headers.paging.total.toLowerCase()], 10) || 0;
                    }
                });
                return addressesPromise;
            },

            /**
             * Retrieve specified address of logged in customer.
             */
            getAddress: function(id) {
                return AuthREST.Customers.all('me').one('addresses', id).get();
            },

            /**
             * Retrieve default address of logged in customer.
             */
            getDefaultAddress: function() {
                var addresses = this.getAddresses(),
                    deferred = $q.defer();

                addresses.then(
                    function(addresses) {
                        deferred.resolve(_.find(addresses, function(adr) { return adr.isDefault; }));
                    }, function() {
                        deferred.reject();
                    });

                return deferred.promise;
            },

            /**
             * Save addresses within logged in customer's address book.
             */
            saveAddress: function(address) {
                var promise = address.id ? AuthREST.Customers.all('me').all('addresses').customPUT(address, address.id) : AuthREST.Customers.all('me').all('addresses').customPOST(address);
                return promise;
            },

            /**
             * Remove specified address from logged in customer's address book.
             */
            removeAddress: function(address) {
                return AuthREST.Customers.all('me').one('addresses', address.id).customDELETE();
            },

            /**
             * Returns a promise to the customer account in the local scope, or retrieves and sets the data if needed.
             * If the current customer is anonymous and no local scope account has been created yet, it will create
             * said account with a fake ID.
             */
            getCurrentAccount: function() {
                var defAccount = $q.defer();

                if(GlobalData.customerAccount){
                    defAccount.resolve(GlobalData.customerAccount);
                } else if(GlobalData.user.isAuthenticated) {
                    this.account().then(function(success){
                        defAccount.resolve(success);
                    }, function(failure){
                        defAccount.reject(failure);
                    });
                } else {
                   defAccount.reject();
                }
                return defAccount.promise;

            },

            /**
             * Expected attribute is account containing email, password and newEmail fields.
             * Creates POST request to customer service that will initiate change of email.
             * Returns a promise of the result.
             */
            updateEmail: function (account) {
                return AuthREST.Customers.all('me').all('accounts').all('internal').all('email').customPOST(account, 'change');
            },

            /**
             * Expected attribute is token.
             * Creates POST request to customer service that will confirm change of email.
             * Returns a promise of the result.
             */
            confirmEmailUpdate: function (token) {
                var data = {
                    token: token
                };
                return AuthREST.Customers.all('me').all('accounts').all('internal').all('email').all('change').customPOST(data, 'confirm');
            }

        };

        return AccountSvc;

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.account')
        .controller('CustomerDetailsCtrl', ['$scope', 'AuthDialogManager', '$modal',
            function ($scope, AuthDialogManager, $modal) {

                $scope.modalInstance = {};

                $scope.editUserName = function (account) {
                    $scope.modalInstance = $modal.open({
                        templateUrl: 'js/app/account/templates/modals/edit-user-name-dialog.html',
                        controller: 'EditUserNameDialogCtrl',
                        resolve: {
                            account: function () {
                                return account;
                            }
                        },
                        backdrop: 'static'
                    });

                    $scope.modalInstance.result.then(function (result) {
                        $scope.account = result;
                    });
                };

                $scope.editUserEmail = function (account) {

                    $modal.open({
                        templateUrl: 'js/app/account/templates/modals/edit-user-email-dialog.html',
                        controller: 'EditUserEmailDialogCtrl',
                        resolve: {
                            account: function () {
                                return {
                                    email: account.contactEmail
                                };
                            }
                        }
                    });
                };

                $scope.updatePassword = function () {
                    AuthDialogManager.showUpdatePassword();
                };

                // handle dialog dismissal if user select back button, etc
                $scope.$on('$destroy', function () {
                    if ($scope.modalInstance && $scope.modalInstance.dismiss) {
                        $scope.modalInstance.dismiss('cancel');
                    }
                });

            }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.account')
    .directive('customerDetails', function () {
        return {
            restrict: 'E',
            controller: 'CustomerDetailsCtrl',
            templateUrl: 'js/app/account/directives/customer-details/customer-details.html',
            scope: {
                account: '='
            }
        };
    });

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';
/** Defines the dependencies for the 'products' module, which comprises the 'browse products' view as well
 * as the product detail view. */
angular.module('ds.home', [
    'restangular',
    'ds.shared',
    'ds.cart',
    'ui.bootstrap',
    'ngTouch'
]);


/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.home')
        .controller('HomeCtrl', ['$scope', 'HomeSvc',
            function ($scope, HomeSvc) {

                $scope.carouselInterval = 5000;
                $scope.slidesLarge = [];
                $scope.slidesSmall = [];
                $scope.banner1 = {};
                $scope.banner2 = {};

                //Get site content data from service
                $scope.getSiteContent = function getSiteContent() {
                    var siteContent = HomeSvc.init();

                    $scope.slidesLarge = siteContent.slidesLarge;
                    $scope.slidesSmall = siteContent.slidesSmall;
                    $scope.banner1 = siteContent.banner1;
                    $scope.banner2 = siteContent.banner2;
                };

                //Init site content data
                $scope.getSiteContent();

                //Listen for site change event
                $scope.$on('site:updated', function siteUpdated() {
                    $scope.getSiteContent();
                });

            }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.home')
        .service('HomeSvc', ['GlobalData', 'settings', '$state',
            function (GlobalData, settings, $state) {

                var homeBannerId = 'homeBanner';

                /**
                 * Initializes all site content in objects that can be used in UI
                 * @return object that contains carousel images and banners
                 */
                var init = function init() {
                    var self = this;
                    var slidesLarge = [];
                    var slidesSmall = [];
                    var banner1 = {};
                    var banner2 = {};
                    var siteContent = GlobalData.getSiteBanners();

                    if (self.siteContentExists(siteContent)) {
                        if (!!siteContent.topImages && siteContent.topImages.length > 0) {

                            for (var i = 0; i < siteContent.topImages.length; i++) {
                                if (!!siteContent.topImages[i].large && siteContent.topImages[i].large.imageUrl !== '') {
                                    slidesLarge.push({ id: homeBannerId, image: siteContent.topImages[i].large });
                                }

                                if (!!siteContent.topImages[i].small && siteContent.topImages[i].small.imageUrl !== '') {
                                    slidesSmall.push({ id: homeBannerId, image: siteContent.topImages[i].small });
                                }
                            }
                        }
                        banner1 = siteContent.banner1;
                        banner2 = siteContent.banner2;
                    }
                    else {
                        //Redirect to all products page
                        $state.go(settings.allProductsState);
                    }

                    return {
                        slidesLarge: slidesLarge,
                        slidesSmall: slidesSmall,
                        banner1: banner1,
                        banner2: banner2
                    };
                };

                /**
                 * Checks if there is any site content defined for selected site
                 * @param siteContent - current site content
                 * @return true/false value that shows if there is site content for provided site
                 */
                var siteContentExists = function siteContentExists(siteContent) {
                    if (!siteContent) {
                        return false;
                    }

                    if (!!siteContent.topImages) {
                        for (var i = 0; i < siteContent.topImages.length; i++) {
                            if (!!siteContent.topImages[i] &&
                                !!siteContent.topImages[i].large &&
                                (siteContent.topImages[i].large.imageUrl !== '' ||
                                 siteContent.topImages[i].small.imageUrl !== '')) {
                                return true;
                            }
                        }
                    }

                    if (!!siteContent.banner1 &&
                        !!siteContent.banner1.large &&
                        (siteContent.banner1.large.imageUrl !== '' ||
                         siteContent.banner1.small.imageUrl !== '')) {
                        return true;
                    }

                    if (!!siteContent.banner2 && !!
                        !!siteContent.banner2.large &&
                        (siteContent.banner2.large.imageUrl !== '' ||
                         siteContent.banner2.small.imageUrl !== '')) {
                        return true;
                    }

                    return false;
                };

                return {
                    init: init,
                    siteContentExists: siteContentExists
                };

            }]);

})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.home')
        .directive('siteContentImage', function () {
            return {
                restrict: 'E',
                scope: {
                    image: '=',
                    id: '@imageId'
                },
                templateUrl: 'js/app/home/templates/site-content-image.html'
            };
        });
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';
/** Defines the dependencies for the 'products' module, which comprises the 'browse products' view as well
 * as the product detail view. */
angular.module('ds.products', [
		'restangular',
    'ds.shared',
    'ds.cart',
    'ui.bootstrap'
]);


/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.products')
    /** Controller for the 'browse products' view.  */
    .controller('BrowseProductsCtrl', ['$scope', '$rootScope', 'ProductSvc', 'GlobalData', 'CategorySvc', 'settings', 'category', '$state', '$location', '$timeout', '$anchorScroll', 'MainMediaExtractor',
        function ($scope, $rootScope, ProductSvc, GlobalData, CategorySvc, settings, category, $state, $location, $timeout, $anchorScroll, MainMediaExtractor) {

            $scope.pageSize = GlobalData.products.pageSize;
            $scope.pageNumber = 0;
            $scope.setSortedPageSize = void 0;
            $scope.setSortedPageNumber = 1;
            $scope.sort = {selected: GlobalData.getProductRefinements()[0].id};
            $scope.products = [];
            $scope.total = GlobalData.products.meta.total;
            $scope.store = GlobalData.store;
            $scope.prices = {};
            $scope.requestInProgress = false;
            $scope.PLACEHOLDER_IMAGE = settings.placeholderImage;
            $scope.sortParams = GlobalData.getProductRefinements();

            $scope.pagination = {
                productsFrom: 1,
                productsTo: 1
            };

            $scope.category = category || {};

            if (!!category) {
                $scope.$emit('category:opened', category);
            }

            $scope.lastCatId = $scope.category.id || 'allProducts';



            $scope.loadedPages = 1;
            $scope.loadMorePages = false;

            if(category !== null) {
                $scope.mainCategoryImage = MainMediaExtractor.extract(category.media);
            }
          
            // ensure category path is localized
            var pathSegments = $location.path().split('/');
            if ($scope.category.slug && pathSegments[pathSegments.length - 1] !== $scope.category.slug) {
                pathSegments[pathSegments.length - 1] = $scope.category.slug;
                $location.path(pathSegments.join('/'));
            }

            $rootScope.$emit('category:selected', { category: category });

            function getProductIdsFromAssignments(assignments) {

                return assignments.map(function (assignment) {
                    if (assignment.ref.type === 'product') {
                        return assignment.ref.id;
                    } else {
                        return '';
                    }
                });
            }

            $scope.currencySymbol = GlobalData.getCurrencySymbol();

            function setMainImage(product) {
                var mainMedia = MainMediaExtractor.extract(product.media);
                if (mainMedia) {
                    product.mainImageURL = mainMedia.url;
                }
            }

            function assignMainImage(products) {
                angular.forEach(products, function (product) {
                    setMainImage(product.product);
                });
            }

            function assignPrices(products) {
                var pricesMap = {};
                var currentCurrency = GlobalData.getCurrencyId();
                angular.forEach(products, function (product) {
                    if (product.prices && product.prices.length > 0) {
                        product.prices.forEach(function (price) {
                            if (price.currency === currentCurrency) {
                                pricesMap[product.product.id] = price;
                            }
                        });
                    }
                });

                $scope.prices = angular.extend($scope.prices, pricesMap);

                //initialize the viewing bar promixity script
                /* jshint ignore:start */
                initRefineAffix();
                /* jshint ignore:end */

                if ($scope.loadMorePages) {
                    $timeout(function () {
                        $scope.pageSize = $scope.pageSize / $scope.loadedPages;
                        $scope.pageNumber = $scope.loadedPages;

                        //Scroll to the page
                        if (!!$scope.products[$scope.pageSize * ($scope.loadedPages - 1)]) {
                            $scope.scrollTo('p_' + $scope.products[$scope.pageSize * ($scope.loadedPages - 1)].id);
                        }

                        //Try scrolling to the last element
                        $scope.scrollTo('p_' + GlobalData.products.lastViewedProductId);

                        //Set page parameter
                        $location.search('page', $scope.pageNumber).replace();

                        $scope.loadMorePages = false;
                    }, 1);
                }



            }

            // Primary Reason for categories to be updated is that the language change.
            //  We'll have to retrieve the current slug for the category (and thus this page)
            //  and reload to ensure the breadcrumbs and slug reflect the latest setting.
            var unbindCat = $rootScope.$on('categories:updated', function (eve, obj) {
                if (obj.source === settings.eventSource.languageUpdate) {
                    CategorySvc.getCategoryById($scope.category.id).then(function (cat) {
                        var parms = {};
                        if (cat && cat.slug) {
                            parms.catName = cat.slug;
                        }
                        $state.transitionTo('base.category', parms, {
                            reload: true,
                            inherit: true,
                            notify: true
                        });

                    });
                }

            });

            $scope.$on('$destroy', unbindCat);

            /*
             Retrieves more products from the product service and adds them to the product list.
             This function is only for infinite scrolling, which is the default state.  It is disabled once a sort is applied.
             */
            $scope.addMore = function () {
                // category selected, but no products associated with category - leave blank for time being
                if ($scope.category.assignments && $scope.category.assignments.length === 0) {
                    $scope.products = [];
                    $scope.pagination = {
                        productsFrom: 0,
                        productsTo: 0
                    };
                    $scope.total = 0;
                    return;
                }
                /*
                 this function is only for infinite scrolling, which is disabled when a sort is applied.
                 */

                // prevent additional API calls if all products are retrieved
                // infinite scroller initiates lots of API calls when scrolling to the bottom of the page
                if (!GlobalData.products.meta.total || $scope.products.length < GlobalData.products.meta.total) {
                    if (!$scope.requestInProgress) {
                        $scope.pageNumber = $scope.pageNumber + 1;


                        var qSpec = 'published:true';
                        if ($scope.category.assignments && $scope.category.assignments.length > 0) {
                            qSpec = qSpec + ' ' + 'id:(' + getProductIdsFromAssignments($scope.category.assignments) + ')';
                        } // If no category assignment (rather than length = 0), we're showing "all" products
                        var query = {
                            pageNumber: $scope.pageNumber,
                            pageSize: $scope.pageSize,
                            expand: 'media',
                            // we only want to show published products on this list
                            q: qSpec
                        };
                        if ($scope.sort) {
                            query.sort = $scope.sort.selected;
                        }

                        $scope.requestInProgress = true;

                        ProductSvc.queryProductDetailsList(query).then(function (products) {
                            $scope.requestInProgress = false;
                            if (products) {
                                GlobalData.products.meta.total = parseInt(products.headers[settings.headers.paging.total.toLowerCase()], 10) || 0;
                                $scope.products = $scope.products.concat(products);
                                if ($scope.products.length === 0) {
                                    $scope.pagination.productsFrom = 0;
                                }
                                else if ($scope.products.length > 0 && query.pageNumber === 1) {
                                    //Check for visible items in viewport
                                }
                                $scope.total = GlobalData.products.meta.total;
                                if (products.length) {
                                    assignMainImage(products);
                                    assignPrices(products);
                                }

                                //Set page parameter
                                $location.search('page', $scope.pageNumber).replace();
                            }
                        }, function () {
                            $scope.requestInProgress = false;
                        });
                    }
                }
            };

            $scope.backToTop = function () {
                window.scrollTo(0, 0);
            };

            $scope.scrollTo = function (id) {

                // always scroll by 150 extra pixels (because of the navigation pane)
                $anchorScroll.yOffset = 150;

                //Then try scrolling to the element
                var old = $location.hash();
                $location.hash(id);
                $anchorScroll();
                $location.hash(old);
            };

            //Check for query parameter that has the number of pages
            if (!!$location.search().page) {
                $scope.loadedPages = parseInt($location.search().page);
                $scope.pageSize = $scope.pageSize * $scope.loadedPages;
                $scope.sort = GlobalData.products.lastSort || {selected: ''};
                $scope.loadMorePages = true;
            }

            // trigger initial load of items
            $scope.addMore();

            //Save id of the last viewed element, last viewed page and current sort
            $scope.openProductDetails = function (productId) {
                GlobalData.products.lastViewedProductId = productId;
                GlobalData.products.lastSort = $scope.sort;
            };

            $scope.setSortedPage = function () {

                $scope.setSortedPageSize = void 0;
                $scope.setSortedPageNumber = 1;
                if (($scope.pageSize > $scope.total) && ($scope.total !== 0)) {
                    $scope.setSortedPageSize = $scope.total;
                }

                //check to see if the current page number times the page size is going to be greater than the total product count
                //if it is then we need to set caps on the pageSize and page number
                $scope.setSortedPageSize = ($scope.pageNumber * $scope.pageSize > $scope.total) ? $scope.total : $scope.pageNumber * $scope.pageSize;

                /*
                 it is important to note that the $scope.pageNumber and $scope.pageSize are not being modified as they  need
                 to be unmidified for the addMore() method to work for the inifinte scroll functionality
                 */
                var query = {
                    pageNumber: $scope.setSortedPageNumber,
                    pageSize: $scope.setSortedPageSize,
                    expand: 'media',
                    sort: $scope.sort.selected
                };

                //we only want to show published products on this list
                var qSpec = 'published:true';
                if ($scope.category.assignments && $scope.category.assignments.length > 0) {
                    qSpec = qSpec + ' ' + 'id:(' + getProductIdsFromAssignments($scope.category.assignments) + ')';
                }
                query.q = qSpec;



                ProductSvc.queryProductDetailsList(query).then(function (products) {
                    $scope.requestInProgress = false;
                    if (products) {
                        GlobalData.products.meta.total = parseInt(products.headers[settings.headers.paging.total.toLowerCase()], 10) || 0;
                        $scope.products = products;
                        if ($scope.products.length === 0) {
                            $scope.pagination.productsFrom = 0;
                        }
                        else if ($scope.products.length > 0 && query.pageNumber === 1) {
                            //Check for visible items in viewport
                        }
                        $scope.total = GlobalData.products.meta.total;
                        if (products.length) {
                            assignMainImage(products);
                            assignPrices(products);
                        }
                    }
                }, function () {
                    $scope.requestInProgress = false;
                });

            };

            $scope.showRefineContainer = function () {
                $scope.refineContainerShowing = !$scope.refineContainerShowing;
            };

        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.products')
    /** Controls the product detail view, which allows the shopper to add an item to the cart.
     * Listens to the 'cart:updated' event.  Once the item has been added to the cart, and the updated
     * cart information has been retrieved from the service, the 'cart' view will be shown.
     */
    .controller('ProductDetailCtrl', ['$scope', '$rootScope', 'CartSvc', 'product', 'lastCatId', 'settings', 'GlobalData', 'CategorySvc','$filter', 'ProductAttributeSvc','$timeout', '$modal', 'shippingZones', 'Notification', 'CommittedMediaFilter',
        function($scope, $rootScope, CartSvc, product, lastCatId, settings, GlobalData, CategorySvc, $filter, ProductAttributeSvc, $timeout,$modal, shippingZones, Notification, CommittedMediaFilter) {
            var modalInstance;
            
            $scope.product = product;
            $scope.shippingZones = shippingZones;
            $scope.noShippingRates = true;
            $scope.currencySymbol = GlobalData.getCurrencySymbol();
            // used by breadcrumb directive
            $scope.category = product.categories;
            $scope.breadcrumbData = angular.copy($scope.category);

            $scope.taxConfiguration = GlobalData.getCurrentTaxConfiguration();

            if(!!lastCatId) {
                if(lastCatId === 'allProducts'){
                    var allProductsName = $filter('translate')('ALL_PRODUCTS');
                    $scope.breadcrumbData = {
                        path: [{
                            id: '',
                            name: allProductsName,
                            slug: ''
                        }]
                    };
                }
                else
                {
                    CategorySvc.getCategoryById(lastCatId)
                        .then(function (cat) {
                            $scope.breadcrumbData = {};
                            $scope.breadcrumbData = cat;
                        });
                }
            }

            if ($scope.shippingZones.length) {
                for (var j = 0; j < $scope.shippingZones.length; j++) {
                    if ($scope.shippingZones[j].methods.length) {
                        $scope.noShippingRates = false;
                        break;
                    }
                }
            } else {
                $scope.noShippingRates = true;
            }

            //Event that product is loaded
            $scope.$emit('product:opened', product);

            $scope.currencySymbol = GlobalData.getCurrencySymbol();
            $scope.error=null;

            if (angular.isArray($scope.product.product.media)) {
                $scope.product.product.media = CommittedMediaFilter.filter($scope.product.product.media);
            } else {
                $scope.product.product.media = [];
            }
            
            if ($scope.product.product.media.length === 0) {
                $scope.product.product.media.push({ id: settings.placeholderImageId, url: settings.placeholderImage });
            }

            //input default values must be defined in controller, not html, if tied to ng-model
            $scope.productDetailQty = 1;
            $scope.buyButtonEnabled = true;
            
            $scope.showShippingRates = function(){
                
                modalInstance = $modal.open({
                    templateUrl: 'js/app/shared/templates/shipping-dialog.html',
                    scope: $scope
                });
            };

            $scope.closeShippingZonesDialog = function () {
                modalInstance.close();
            };

            // scroll to top on load
            window.scrollTo(0, 0);

            var unbind = $rootScope.$on('cart:updated', function (eve, eveObj) {

                $scope.taxConfiguration = GlobalData.getCurrentTaxConfiguration();

                if(eveObj.source === 'manual'){
                    $rootScope.showCart = true;
                    //check to see if the cart should close after timeout
                    if(eveObj.closeAfterTimeout)
                    {
                        $rootScope.$emit('cart:closeAfterTimeout');

                    }
                    $scope.buyButtonEnabled = true;
                }
            });

            $scope.$on('$destroy', unbind);

            /** Add the product to the cart.  'Buy' button is disabled while cart update is in progress. */
            $scope.addToCartFromDetailPage = function () {
                $scope.error = false;
                $scope.buyButtonEnabled = false;
                CartSvc.addProductToCart(product.product, product.prices, $scope.productDetailQty, { closeCartAfterTimeout: true, opencartAfterEdit: false })
                .then(function(){
                    var productsAddedToCart = $filter('translate')('PRODUCTS_ADDED_TO_CART');
                    Notification.success({message: $scope.productDetailQty + ' ' + productsAddedToCart, delay: 3000});
                }, function(){
                    $scope.error = 'ERROR_ADDING_TO_CART';
                }).finally(function() {
                    $scope.buyButtonEnabled = true;
                });
            };

            $scope.changeQty = function () {
                if (!$scope.productDetailQty){
                    $scope.buyButtonEnabled = false;
                } else {
                    $scope.buyButtonEnabled = true;

                    $timeout(function () {
                        $scope.$broadcast('product:qty:updated', $scope.productDetailQty);
                    });
                }
            };

            $scope.hasAnyOfAttributesSet = function(product){
                return ProductAttributeSvc.hasAnyOfAttributesSet(product);
            };
            $scope.initForLoyalty = function () {

                $timeout(function () {
                    $scope.$broadcast('product:details:updated', $scope.product);
                    $scope.$broadcast('product:qty:updated', $scope.productDetailQty);
                });
            };


            $scope.initForLoyalty();

}]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates access to the CAAS product API.
 */
angular.module('ds.products')
    .factory('ProductSvc', ['PriceProductREST', function(PriceProductREST){

        /** Executes a product query and extracts the "total" product count meta data and stores it in the
         * GlobalData service.
         * */
        var getProducts = function (parms) {
            return PriceProductREST.Products.all('products').getList(parms);
        };

        var getProductDetailsList = function (parms) {
            return PriceProductREST.ProductDetails.all('productdetails').getList(parms);
        };

        return {
            /**
             * Issues a query request on the product resource.
             * @param {parms} query parameters - optional
             * @return The result array as returned by Angular $resource.query().
             */
            query: function(parms) {
               return getProducts(parms);
            },

            queryProductDetailsList: function(parms) {
               return getProductDetailsList(parms);
            }

        };
}]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates access to the price API.
 */
angular.module('ds.products')
    .factory('PriceSvc', ['PriceProductREST', function(PriceProductREST){

        var getPrices = function (parms) {
            return PriceProductREST.Prices.one('prices').get(parms);
        };

        return {
            /**
             * Retrieves prices list based on provided parameters (filter)
             * @param {parms} query parameters
             */
            query: function(parms) {
                return getPrices(parms);
            }
        };

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates configuration of the price, products, and productDetails APIs.
 */
angular.module('ds.products')
    .factory('PriceProductREST', ['SiteConfigSvc', 'Restangular', 'GlobalData', function(siteConfig, Restangular, GlobalData){
        function applyLanguageHeader(RestangularConfigurer){
            RestangularConfigurer.addFullRequestInterceptor(function(element, operation, route, url, headers, params, httpConfig) {

                return {
                    element: element,
                    params: params,
                    headers: _.extend(headers, {'accept-language': GlobalData.getAcceptLanguages()}, {'hybris-currency': GlobalData.getCurrencyId()}),
                    httpConfig: httpConfig
                };
            });
        }

            return {
                /** Endpoint for Prices API.*/
                Prices: Restangular.withConfig(function (RestangularConfigurer) {
                    RestangularConfigurer.setBaseUrl(siteConfig.apis.prices.baseUrl);
                }),
                /** Endpoint for Products API. */
                Products: Restangular.withConfig(function(RestangularConfigurer) {
                        RestangularConfigurer.setBaseUrl(siteConfig.apis.products.baseUrl);
                        RestangularConfigurer.setResponseInterceptor(function (data, operation, what, url, response) {
                            var headers = response.headers();
                            var result = response.data;
                            result.headers = headers;
                            return result;
                        });
                        applyLanguageHeader(RestangularConfigurer);

                    }),
                /** Endpoint for ProductDetails API. */
                ProductDetails: Restangular.withConfig(function(RestangularConfigurer) {
                    RestangularConfigurer.setBaseUrl(siteConfig.apis.productDetails.baseUrl);
                    RestangularConfigurer.setResponseInterceptor(function (data, operation, what, url, response) {
                        var headers = response.headers();
                        var result = response.data;
                        result.headers = headers;
                        return result;
                    });
                    applyLanguageHeader(RestangularConfigurer);
                }),
                /** Endpoint for Category API.*/
                Categories: Restangular.withConfig(function(RestangularConfigurer) {
                    RestangularConfigurer.setBaseUrl(siteConfig.apis.categories.baseUrl);
                    applyLanguageHeader(RestangularConfigurer);
                })
            };


    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates access to the CAAS product API.
 */
angular.module('ds.products')

    .factory('CategorySvc', ['$rootScope', '$state', 'PriceProductREST', 'GlobalData', '$q',
        function($rootScope, $state, PriceProductREST, GlobalData, $q){

        var categoryMap;
        var catList;

        function sluggify(name){
            // very simplistic algorithm to handle German Umlaute - should ultimately be provided by server
            if(name){ //ensure categories without name are not created
              return window.encodeURIComponent(name.toLowerCase().replace(' ', '-').replace('ä', 'ae').replace('ö', 'oe').replace('ü', 'ue').replace('ß', 'ss'));
            }
        }

        function loadCategory(cat, parent){
            cat.path = [];
            if(parent){
                angular.copy(parent.path, cat.path);
            }
            cat.path.push(cat);
            cat.slug = sluggify(cat.name)+'~'+cat.id;
            categoryMap[cat.id] = cat;

            if(cat.subcategories){
                angular.forEach(cat.subcategories, function(sub){
                    loadCategory(sub, cat);
                });
            }
        }

        function getCategory(slug){
            var tildeIndex = slug.indexOf('~');
            if(tildeIndex < 0) {
                return null;
            }
            var catId = slug.substring(tildeIndex+1, slug.length);
            return categoryMap[catId];
        }

        return {

            /** Returns a promise over the category list as loaded from the service. Fires event "categories:updated".
             * @param source - indicates source/reason for update, eg. 'languageUpdate' - see setting.eventSource.
             * */
            getCategories: function (source) {
                var catDef = $q.defer();

                PriceProductREST.Categories.all('categories').getList({ expand: 'subcategories', toplevel: true }).then(function (result) {
                    categoryMap = {};
                    catList = [];
                    angular.forEach(result.plain(), function (category) {
                        if(category.name){
                            catList.push(category);
                            loadCategory(category);
                        }
                    });
                    $rootScope.$emit('categories:updated', {categories: catList, source: source});
                    catDef.resolve(catList);
                }, function (error) {
                    catDef.reject(error);
                });
                return catDef.promise;
            },

            /** Returns categories from cache.*/
            getCategoriesFromCache: function(){
                return catList;
            },

            getCategoryById: function(categoryId){
                var catDef = $q.defer();

                if(categoryMap){
                    catDef.resolve(categoryMap[categoryId]);
                } else {
                    this.getCategories().then(function(){
                        catDef.resolve(categoryMap[categoryId]);
                    });
                }
                return catDef.promise;
            },

            /** Returns the category along with "element list".
             * If category will be retrieved from cache if existing.
             * @param categorySlug ("sluggified" name per logic in this service - name, ~,  categoryId, e.g. 'green-bottles~3456')
             * @returns {*}
             */
            getCategoryWithProducts: function (categorySlug) {
                var compositeDef = $q.defer();

                if (!categorySlug) {
                    compositeDef.resolve(null);
                } else {
                    var cdef = $q.defer();
                    if (categoryMap) {
                        var category = getCategory(categorySlug);
                        if(category){
                            cdef.resolve(category);
                        } else {
                            cdef.reject();
                            $state.go('errors', { errorId : '404' });
                        }
                    } else {
                        this.getCategories().then(function () {
                            var category = getCategory(categorySlug);
                            if(category){
                                cdef.resolve(category);
                            } else {
                                cdef.reject();
                            }
                        });
                    }
                    cdef.promise.then(function (category) {
                        PriceProductREST.Categories.all('categories').one(category.id).all('assignments').getList({recursive: true}).then(
                            function(assignments){
                                category.assignments = assignments.plain();
                                compositeDef.resolve(category);
                            }, function(){
                                compositeDef.resolve(category);
                            }
                        );
                    });
                }
                return compositeDef.promise;
            },

            /** Remove local category storage to force retrieval from server on next request.*/
            resetCategoryCache: function(){
              categoryMap = null;
            }
        };
}]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.products')
        .factory('ProductAttributeSvc', ['Restangular', function (Restangular) {
            return {
                getSchema: function (schemaPath) {
                    return Restangular.oneUrl('schema', schemaPath).get();
                },

                getAttributeGroups: function (product) {
                    var groups = [];

                    for (var prop in product.mixins) {
                        if (/^attributegroup_*/.test(prop)) {
                            groups.push({
                                schema: product.metadata.mixins[prop],
                                attributes: product.mixins[prop]
                            });
                        }
                    }

                    return groups;
                },

                hasAnyOfAttributesSet: function (product) {
                    var groupsWithAtLeastOneAttributeSet = this.getAttributeGroups(product)
                        .filter(function (group) {
                            var hasAttributeSet = false;

                            for (var prop in group.attributes) {
                                if (group.attributes[prop] !== null) {
                                    hasAttributeSet = true;
                                    break;
                                }
                            }

                            return hasAttributeSet;
                        });

                    return groupsWithAtLeastOneAttributeSet.length > 0;
                },

                dateFormatting: {
                    date: 'd/M/yyyy',
                    time: 'hh:mm a',
                    dateTime: 'MM/dd/yyyy hh:mm a'
                }
            };
        }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.products')
        .directive('productAttribute', ['ProductAttributeSvc', function (ProductAttributeSvc) {
            return {
                restrict: 'E',
                templateUrl: 'js/app/products/templates/product-attribute.html',
                scope: {
                    definition: '=',
                    value: '='
                },
                controller: ['$scope', function ($scope) {
                    $scope.dateFormatting = ProductAttributeSvc.dateFormatting;
                }]
            };
        }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.products')
        .directive('productAttributeGroup', function () {
            return {
                restrict: 'E',
                templateUrl: 'js/app/products/templates/product-attribute-group.html',
                scope: {
                    group: '='
                },
                controller: ['$scope', 'ProductAttributeSvc', function ($scope, ProductAttributeSvc) {
                    ProductAttributeSvc.getSchema($scope.group.schema).then(function (response) {
                        $scope.properties = response.properties;
                    });
                }]
            };
        });
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.products')
        .directive('productAttributeGroups', function () {
            return {
                restrict: 'E',
                templateUrl: 'js/app/products/templates/product-attribute-groups.html',
                scope: {
                    product: '='
                },
                controller: ['$scope', 'ProductAttributeSvc', function ($scope, ProductAttributeSvc) {
                    $scope.attributeGroups = ProductAttributeSvc.getAttributeGroups($scope.product);
                }]
            };
        });
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

 (function () {
    'use strict';

    angular.module('ds.products')
        .directive('productImgCarousel', ['$timeout', function ($timeout) {

            function templateLink (scope, elem) {

                scope.currentIndex = 0;

                var container = elem[0].querySelector('.main-image-container');
                container.style.height = container.offsetWidth + 'px';
                
                var positionImages = function () {
                    var images = elem[0].querySelector('.product-images').children;
                    for (var i = 0; i < images.length; i++) {
                        if (images[i].className.indexOf('product-image') > -1) {
                            images[i].style.transform = 'translateX(' + i * 100 + '%)';
                        }
                    }
                };

                var positionMobileThumbs = function () {
                    var mobileThumbs = elem[0].querySelector('.mobileThumbs');
                    var count = mobileThumbs.children.length;
                    var width = mobileThumbs.children[0].offsetWidth;
                    var translateValue = count * width / 2;
                    mobileThumbs.style.transform = 'translateX(-' + translateValue + 'px)';
                };

                function FShandler() {
                    if (!document.fullscreen && !document.mozFullScreen && !document.webkitIsFullScreen && !document.msFullscreenElement) {
                        positionImages();
                    }
                }

                window.addEventListener('resize', function() {
                    container.style.height = container.offsetWidth + 'px';
                    positionMobileThumbs();
                }, true);

                document.addEventListener('fullscreenchange', FShandler, false);
                document.addEventListener('webkitfullscreenchange', FShandler, false);
                document.addEventListener('mozfullscreenchange', FShandler, false);
                document.addEventListener('MSFullscreenChange', FShandler, false);

                scope.moveCarousel = function (index) {
                    elem[0].querySelector('.product-images').style.transform = 'translateX(-' + index * 100 + '%)';
                    scope.currentIndex = index;
                };

                scope.enlargeImage = function () {
                    var image = elem[0].querySelector('.product-images').children[scope.currentIndex];
                    image.style.transform = 'translateX(0)';
                    if (image.requestFullscreen) {
                        image.requestFullscreen();
                    } else if (image.msRequestFullscreen) {
                        image.msRequestFullscreen();
                    } else if (image.mozRequestFullScreen) {
                        image.mozRequestFullScreen();
                    } else if (image.webkitRequestFullscreen) {
                        image.webkitRequestFullscreen();
                    }
                };

                $timeout(positionImages, 0);
                $timeout(positionMobileThumbs, 0);
            }


            return {
                restrict: 'E',
                templateUrl: 'js/app/products/templates/product-img-carousel.html',
                link: templateLink,
                scope: {
                    images: '='
                }
            };

        }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';
/** Module related to shopping cart view and cart navigation. */
angular.module('ds.cart', [
    'ds.shared'
]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.cart')
    /** This controller manages the interactions of the cart view. The controller is listening to the 'cart:udpated' event
     * and will refresh the scope's cart instance when the event is received. */
    .controller('CartCtrl', ['$scope', '$state', '$rootScope', 'CartSvc', 'GlobalData', 'settings', 'AuthSvc', 'AuthDialogManager',
            function($scope, $state, $rootScope, CartSvc, GlobalData, settings, AuthSvc, AuthDialogManager) {

        $scope.cart = CartSvc.getLocalCart();
        $scope.currencySymbol = GlobalData.getCurrencySymbol($scope.cart.currency);

        $scope.showTaxEstimation = false;

        $scope.taxConfiguration = GlobalData.getCurrentTaxConfiguration();

        $scope.couponCollapsed = true;
        $scope.taxType = GlobalData.getTaxType();

        $scope.calculateTax = CartSvc.getCalculateTax();
        $scope.taxableCountries = GlobalData.getTaxableCountries();

        var unbind = $rootScope.$on('cart:updated', function(eve, eveObj){
            $scope.cart = eveObj.cart;
            $scope.currencySymbol = GlobalData.getCurrencySymbol($scope.cart.currency);
            $scope.taxType = GlobalData.getTaxType();
            $scope.taxConfiguration = GlobalData.getCurrentTaxConfiguration();
            $scope.calculateTax = CartSvc.getCalculateTax();
        });

        $scope.$on('$destroy', unbind);

        /** Remove a product from the cart.
         * @param cart item id
         * */
        $scope.removeProductFromCart = function (itemId) {
            CartSvc.removeProductFromCart(itemId);
        };

        /** Toggles the "show cart view" property.
         */
        $scope.toggleCart = function (){
            $rootScope.showCart = false;
        };

        /**
         *  Issues an "update cart" call to the service or removes the item if the quantity is undefined or zero.
         */
        $scope.updateCartItemQty = function (item, itemQty, config) {
            if (itemQty > 0) {
                CartSvc.updateCartItemQty(item, itemQty, config);
            }
            else if (!itemQty || itemQty === 0) {
                CartSvc.removeProductFromCart(item.id);
            }
        };

        $scope.toCheckoutDetails = function () {
            $scope.keepCartOpen();
            if (!AuthSvc.isAuthenticated()) {
                var dlg = AuthDialogManager.open({windowClass:'mobileLoginModal'}, {}, {}, true);

                dlg.then(function(){
                        if (AuthSvc.isAuthenticated()) {
                            $state.go('base.checkout.details');
                        }
                    },
                    function(){

                    }
                );
            }
            else {
                $state.go('base.checkout.details');
            }
        };

        $scope.applyTax = function () {
            $scope.taxEstimationError = false;
            if ($scope.calculateTax.countryCode !== '' && $scope.calculateTax.zipCode !== '') {
                //Save countryCode and zipCode in service
                CartSvc.setCalculateTax($scope.calculateTax.zipCode, $scope.calculateTax.countryCode, $scope.cart.id);

                $scope.calculateTax.taxCalculationApplied = true;

            }
            else {
                //Show error message
                $scope.calculateTax.taxCalculationApplied = false;
                $scope.showTaxEstimation = false;
                $scope.taxEstimationError = true;
            }

        };

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.cart')
    .controller('CartNoteMixinCtrl', ['$scope', '$state', 'CartSvc', 'CartNoteMixinSvc',
        function($scope, $state, CartSvc, CartNoteMixinSvc) {

            // NOTE mixin
            $scope.note = {
                noteCollapsed: true,
                saveFailed: false,
                removeNoteFailed: false,
                oldContent: '',
                content: '',

                collapseNote: function() {
                    // reset the variable, if user tries again
                    this.saveFailed = false;
                    this.noteCollapsed = true;
                },

                expandNote: function(comment) {
                    this.content = comment;
                    this.noteCollapsed = false;
                },

                removeNote: function(item) {
                    var self = this;
                    CartNoteMixinSvc.removeNote(item).then(function() {
                        self.content = '';
                    }, function() {
                        self.removeNoteFailed = true;
                    });
                },

                submit: function(item) {
                    var self = this;

                    // Saving a blank comment is equivalent to removing the comment
                    if (self.content === ''){
                        self.removeNote(item);
                    } else {
                        CartNoteMixinSvc.updateNote(item, self.content)
                        .then(function() {
                            self.collapseNote();
                        }, function() {
                            self.saveFailed = true;
                        });
                    }
                }
            };
        }
    ]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.cart')
/**
 * cart-auto-toggle
 * This directive manages the cart's display
 * @return {Object}
 */
    .directive('cartAutoToggle',['$rootScope', function($rootScope){
        return {
            restrict: 'A',
            link: function(scope) {
                scope.cartAutoTimeoutLength = 3000;
                scope.cartShouldCloseAfterTimeout = false;
                scope.cartTimeOut = void 0;

                var closeCart = function(fromTimeout)
                {
                    //update angulars data binding to showCart
                    $rootScope.showCart = false;
                    scope.cartShouldCloseAfterTimeout = false;
                    if (fromTimeout) {
                        scope.$apply();
                    }

                };

                scope.createCartTimeout = function()
                {
                    //create a timeout object in order to close the cart if it's not hovered
                    scope.cartTimeOut = _.delay(
                        function()
                        {
                            //close the cart
                            closeCart(true);
                        },
                        scope.cartAutoTimeoutLength);
                };

                var unbind2 = $rootScope.$on('cart:closeAfterTimeout', function(){
                    scope.cartShouldCloseAfterTimeout = true;
                    //create a timeout object in order to close the cart if it's not hovered
                    scope.createCartTimeout();
                });

                var unbind3 = $rootScope.$on('cart:closeNow', function(){
                    scope.cartShouldCloseAfterTimeout = true;
                    $rootScope.showCart = false;
                });

                scope.$on('$destroy', unbind2, unbind3);

                scope.cartHover = function()
                {
                    clearTimeout(scope.cartTimeOut);
                };

                scope.keepCartOpen = function(){
                    scope.cartShouldCloseAfterTimeout = false;
                };

                scope.cartUnHover = function()
                {
                    //if none of the inputs are focused then create the 3 second timer after mouseout
                    if( !$('#cart input').is(':focus') && scope.cartShouldCloseAfterTimeout )
                    {
                        closeCart();
                    }

                };
            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.cart')
    .factory('CartREST', ['Restangular', 'SiteConfigSvc', 'GlobalData', function(Restangular, siteConfig, GlobalData){

        return {
            /** Endpoint for Main Cart.*/
            Cart: Restangular.withConfig(function (RestangularConfigurer) {
                RestangularConfigurer.setBaseUrl(siteConfig.apis.cart.baseUrl);
                RestangularConfigurer.addFullRequestInterceptor(function (element, operation, route, url, headers, params, httpConfig) {
                    return {
                        element: element,
                        params: params,
                        headers: _.extend(headers, { 'hybris-site': GlobalData.getSiteCode() }),
                        httpConfig: httpConfig
                    };
                });
            }),

            CalculateCart: Restangular.withConfig(function (RestangularConfigurer) {
                RestangularConfigurer.setBaseUrl(siteConfig.apis.cartcalculation.baseUrl);
                RestangularConfigurer.addFullRequestInterceptor(function (element, operation, route, url, headers, params, httpConfig) {
                    return {
                        element: element,
                        params: params,
                        headers: _.extend(headers, { 'hybris-site': GlobalData.getSiteCode() }),
                        httpConfig: httpConfig
                    };
                });
            })
        };


    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.cart')

    .factory('CartSvc', ['$rootScope', 'CartREST', 'ProductSvc', 'AccountSvc', '$q', 'GlobalData',
        function ($rootScope, CartREST, ProductSvc, AccountSvc, $q, GlobalData) {

            // Prototype for outbound "update cart item" call
            var Item = function (product, price, qty) {
                this.product = {
                    id: product.id
                };
                if (product.images) {
                    this.product.images = product.images;
                }
                else if (product.media) {
                    this.product.images = product.media;
                }
                var currentSiteCode = GlobalData.getSiteCode();
                if (product.mixins && product.mixins.taxCodes && product.mixins.taxCodes[currentSiteCode]) {
                    this.taxCode = product.mixins.taxCodes[currentSiteCode];
                }
                this.price = price;
                this.quantity = qty;
            };

            // Prototype for cart as used in UI
            var Cart = function () {
                this.items = [];
                this.totalUnitsCount = 0;
                this.subTotalPrice = {};
                this.subTotalPrice.amount = 0;
                this.totalPrice = {};
                this.totalPrice.amount = 0;
                this.id = null;
            };

            // application scope cart instance
            var cart = {};

            /**  Ensure there is a cart associated with the current session.
             * Returns a promise for the existing or newly created cart.  Cart will only contain the id.
             * (Will create a new cart if the current cart hasn't been persisted yet).
             */
            function getOrCreateCart() {
                var deferredCart = $q.defer();
                // Use copy of cart from local scope if it exists - don't want to use same instance because we don't want
                //   data binding
                if (cart.id) {
                    deferredCart.resolve({ cartId: cart.id });
                } else {

                    var newCart = {};
                    var accPromise = AccountSvc.getCurrentAccount();
                    accPromise.then(function (successAccount) {
                        newCart.customerId = successAccount.id;
                    });
                    accPromise.finally(function () {
                        newCart.currency = GlobalData.getCurrencyId();
                        newCart.siteCode = GlobalData.getSiteCode();
                        CartREST.Cart.all('carts').post(newCart).then(function (response) {
                            cart.id = response.cartId;
                            deferredCart.resolve({ cartId: cart.id });
                        }, function () {
                            deferredCart.reject();
                        });
                    });
                }
                return deferredCart.promise;
            }


            /** Retrieves the current cart state from the service, updates the local instance
             * and fires the 'cart:updated' event.*/
            function refreshCart(cartId, updateSource, closeCartAfterTimeout) {
                var defCart = $q.defer();
                var defCartTemp = $q.defer();

                var params = { siteCode: GlobalData.getSiteCode() };

                CartREST.Cart.one('carts', cartId).get(params).then(function (response) {
                    cart = response.plain();
                    if (cart.siteCode !== GlobalData.getSiteCode()) {
                        CartREST.Cart.one('carts', cart.id).one('changeSite').customPOST({ siteCode: GlobalData.getSiteCode() }).finally(function () {
                            if (!!GlobalData.customerAccount) {

                                params = angular.extend(params, { customerId: GlobalData.customerAccount.customerNumber });

                                CartREST.Cart.one('carts', cartId).get(params).then(function (response) {
                                    cart = response.plain();
                                    defCartTemp.resolve(cart);
                                }, function () {
                                    defCartTemp.reject();
                                });
                            }
                            else {
                                CartREST.Cart.one('carts', cartId).get(params).then(function (response) {
                                    cart = response.plain();
                                    defCartTemp.resolve(cart);
                                }, function () {
                                    defCartTemp.reject();
                                });
                            }
                        });

                    } else {
                        defCartTemp.resolve(cart);
                    }
                    defCartTemp.promise.then(function (curCart) {
                        defCart.resolve(curCart);

                    }, function () {
                        cart.error = true;
                    });

                }, function (response) {
                    cart = {};
                    if (!response || response.status !== 404) {
                        cart.error = true;
                    }
                    else {
                        console.warn('Could not find cart. A new cart will be created when the user adds an item.');
                    }
                    defCart.resolve(cart);
                });
                defCart.promise.then(function () {
                    $rootScope.$emit('cart:updated', { cart: cart, source: updateSource, closeAfterTimeout: closeCartAfterTimeout });
                });
                return defCart.promise;
            }

            function mergeAnonymousCartIntoCurrent(anonCart) {
                if (anonCart && anonCart.id) {
                    // merge anon cart into user cart
                    CartREST.Cart.one('carts', cart.id).one('merge').customPOST({ carts: [anonCart.id] }).then(function () {
                        // merge anonymous cart - will change currency if needed
                        refreshCart(cart.id, 'merge');
                    }, function () {
                        cart.error = true;
                    });
                } else {
                    // scope is already equivalent to latest user cart
                    if (cart.siteCode !== GlobalData.getSiteCode()) {
                        if (cart.id) {
                            refreshCart(cart.id, 'site');
                        }
                    } else {
                        $rootScope.$emit('cart:updated', { cart: cart });
                    }
                }
            }

            /** Creates a new Cart Item.  If the cart hasn't been persisted yet, the
             * cart is created first.
             */
            function createCartItem(product, prices, qty, config) {

                var closeCartAfterTimeout = (!_.isUndefined(config.closeCartAfterTimeout)) ? config.closeCartAfterTimeout : undefined;
                var cartUpdateMode = (!config.opencartAfterEdit) ? 'auto' : 'manual';

                var createItemDef = $q.defer();
                getOrCreateCart().then(function (cartResult) {

                    var price = { 'priceId': prices[0].priceId, 'effectiveAmount': prices[0].effectiveAmount, 'originalAmount': prices[0].originalAmount, 'currency': prices[0].currency };

                    var item = new Item(product, price, qty);

                    CartREST.Cart.one('carts', cartResult.cartId).all('items').post(item).then(function () {
                        refreshCart(cartResult.cartId, cartUpdateMode, closeCartAfterTimeout);
                        createItemDef.resolve();
                    }, function () {
                        refreshCart(cart.id, cartUpdateMode, closeCartAfterTimeout);
                        createItemDef.reject();
                    });

                }, function () {
                    createItemDef.reject();
                });
                return createItemDef.promise;
            }

            function reformatCartItems(cart) {
                var items = [];
                for (var i = 0; i < cart.items.length; i++) {
                    var item = {
                        itemId: cart.items[i].id,
                        productId: cart.items[i].product.id,
                        quantity: cart.items[i].quantity,
                        unitPrice:{
                            amount: cart.items[i].price.effectiveAmount,
                            currency: cart.items[i].price.currency
                        },
                        taxCode:cart.items[i].taxCode
                    };
                    items.push(item);
                }
                return items;
            }

            /*
             TODO:
             this function is only necessary because the cart mashup does not directly consume the coupon as
             it is returned from the coupon service.  That may change in the future
             */
            function parseCoupon(coupon) {
                if (coupon.discountType === 'ABSOLUTE') {
                    coupon.amount = coupon.discountAbsolute.amount;
                    coupon.currency = coupon.discountAbsolute.currency;
                }
                else if (coupon.discountType === 'PERCENT') {
                    coupon.discountRate = coupon.discountPercentage;
                    coupon.currency = GlobalData.getCurrencyId();
                }

                return coupon;
            }

            return {

                /**
                 * Creates a new Cart instance that does not have an ID.
                 * This will prompt the creation of a new cart once items are added to the cart.
                 * Should be invoked once an existing cart has been successfully submitted to checkout.
                 */
                resetCart: function () {
                    cart = new Cart();
                    $rootScope.$emit('cart:updated', { cart: cart, source: 'reset' });
                },

                /** Returns the cart as stored in the local scope - no GET is issued.*/
                getLocalCart: function () {
                    return cart;
                },

                /**
                 * Retrieves the current cart's state from service and returns a promise over that cart.
                 */
                getCart: function () {
                    return refreshCart(cart.id ? cart.id : null);
                },

                /**
                 * Retrieve any existing cart that there might be for an authenticated user, and merges it with
                 * any content in the current cart.
                 */
                refreshCartAfterLogin: function (customerId) {
                    // store existing anonymous cart
                    var anonCart = cart;

                    // retrieve any cart associated with the authenticated user
                    CartREST.Cart.one('carts', null).get({ customerId: customerId, siteCode: GlobalData.getSiteCode() }).then(function (authUserCart) {
                        // there is an existing cart - update scope instance
                        cart = authUserCart.plain();
                        mergeAnonymousCartIntoCurrent(anonCart);
                    }, function () {
                        // no existing user cart
                        if (anonCart && anonCart.id) {
                            // create new cart for customer so anon cart can be merged into it
                            cart = { customerId: customerId, currency: GlobalData.getCurrencyId(), siteCode: GlobalData.getSiteCode() };

                            CartREST.Cart.all('carts').post(cart).then(function (newCartResponse) {
                                cart.id = newCartResponse.cartId;
                                mergeAnonymousCartIntoCurrent(anonCart);
                            }, function () {
                                cart.error = true;
                                console.error('new cart creation failed');
                            });
                        } else { // anonymous cart was never created
                            // just use empty cart - customer-specific cart will be created once first item is added
                            cart = {};
                            cart.currency = GlobalData.getCurrencyId();
                            cart.siteCode = GlobalData.getSiteCode();
                        }
                    });
                },
                
                // Exposed for use in mixin services, like cart-note-mixin-service.js
                refreshCart: refreshCart,

                /** Persists the cart instance via PUT request (if qty > 0). Then, reloads that cart
                 * from the API for consistency and in order to display the updated calculations (line item totals, etc).
                 * @return promise to signal success/failure*/
                updateCartItemQty: function (item, qty, config) {
                    var closeCartAfterTimeout = (!_.isUndefined(config.closeCartAfterTimeout)) ? config.closeCartAfterTimeout : undefined;
                    var cartUpdateMode = (!config.opencartAfterEdit) ? 'auto' : 'manual';
                    var updateDef = $q.defer();
                    if (qty > 0) {
                        //this is a partial update, so only quantity data is needed
                        var cartItem = {
                            quantity: qty
                        };
                        CartREST.Cart.one('carts', cart.id).all('items').customPUT(cartItem, item.id + '?partial=true').then(function () {
                            refreshCart(cart.id, cartUpdateMode, closeCartAfterTimeout);
                            updateDef.resolve();
                        }, function () {
                            angular.forEach(cart.items, function (it) {
                                if (item.id === it.id) {
                                    item.error = true;
                                }
                            });
                            updateDef.reject();
                        });
                    }
                    return updateDef.promise;
                },

                /**
                 * Removes a product from the cart, issues a PUT, and then a GET for the updated information.
                 * @param productId
                 */
                removeProductFromCart: function (itemId) {
                    CartREST.Cart.one('carts', cart.id).one('items', itemId).customDELETE().then(function () {
                        refreshCart(cart.id, 'manual');
                    }, function () {
                        angular.forEach(cart.items, function (item) {
                            if (item.id === itemId) {
                                item.error = true;
                            }
                        });
                    });
                },
                
                /*
                 *   Adds a product to the cart, updates the cart (PUT) and then retrieves the updated
                 *   cart information (GET).
                 *   @param product to add
                 *   @param productDetailQty quantity to add
                 *   @param closeCartAfterTimeout if the
                 *   @return promise over success/failure
                 */
                addProductToCart: function (product, prices, productDetailQty, config) {
                    if (productDetailQty > 0) {
                        var item = null;
                        for (var i = 0; cart.items && i < cart.items.length; i++) {
                            item = cart.items[i];
                            if (product.id === item.product.id) {
                                var qty = item.quantity + productDetailQty;
                                return this.updateCartItemQty(item, qty, config);
                            }
                        }
                        return createCartItem(product, prices, productDetailQty, config);
                    } else {
                        return $q.when({});
                    }
                },

                redeemCoupon: function (coupon, cartId) {
                    coupon = parseCoupon(coupon);
                    return CartREST.Cart.one('carts', cartId).customPOST(coupon, 'discounts').then(function() {
                        refreshCart(cartId, 'manual');
                    });
                },

                removeAllCoupons: function (cartId) {
                    return CartREST.Cart.one('carts', cartId).all('discounts').remove().then(function () {
                        refreshCart(cartId, 'manual');
                    });
                },

                removeCoupon: function (cartId, couponId) {
                    return CartREST.Cart.one('carts', cartId).one('discounts', couponId).remove().then(function () {
                        refreshCart(cartId, 'manual');
                    });
                },

                getCalculateTax: function () {
                    if (!!cart && !!cart.countryCode && !!cart.zipCode) {
                        return {
                            countryCode: cart.countryCode,
                            zipCode: cart.zipCode,
                            taxCalculationApplied: true
                        };
                    }
                    return { taxCalculationApplied: false };
                },

                setCalculateTax: function (zipCode, countryCode, cartId) {
                    return CartREST.Cart.one('carts', cartId).customPUT({ zipCode: zipCode, countryCode: countryCode }, '').then(function () {
                        refreshCart(cartId, 'manual');
                    });
                },

                recalculateCart: function (cart, addressToShip, shippingCostObject) {
                    var items = reformatCartItems(cart);
                    var discounts = [];
                    angular.forEach(cart.discounts, function(discount){
                        discounts.push({
                            discountRate: discount.discountRate,
                            amount: discount.amount,
                            currency: discount.currency,
                            calculationType: discount.calculationType
                        });
                    });
                    var data = {
                        cartId: cart.id,
                        siteCode: GlobalData.getSiteCode(),
                        currency: GlobalData.getCurrency(),
                        items: items,
                        discounts: discounts,
                        addresses: [
                            {
                              type: 'SHIP_TO',
                              addressLine1: addressToShip.address1,
                              city: addressToShip.city,
                              state: addressToShip.state,
                              zipCode: addressToShip.zipCode,
                              country: addressToShip.country
                            }
                        ]
                    };
                    if (shippingCostObject) {
                        data.shipping = {
                            calculationType: 'QUOTATION',
                            methodId: shippingCostObject.id,
                            zoneId: shippingCostObject.zoneId
                        };
                    }
                    return CartREST.CalculateCart.all('calculation').customPOST(data, '');
                }

            };

        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.cart')
.factory('CartNoteMixinSvc', ['CartSvc', 'CartREST', '$q', 'SiteConfigSvc',
    function (CartSvc, CartREST, $q, siteConfigSvc) {

        return {
            updateNote: function(cartItem, noteContent) {
                var updatePromise = $q.defer();
                var noteMixin = {
                    metadata: {
                        mixins: {
                            note: siteConfigSvc.schemas.noteMixinMetadata
                        }
                    },
                    mixins: {
                        note: {
                            comment: noteContent
                        }
                    }
                };

                // Get cart info from CartSvc
                var cart = CartSvc.getLocalCart();

                CartREST.Cart.one('carts', cart.id).all('items').customPUT(noteMixin, cartItem.id + '?partial=true').then(function () {
                    CartSvc.refreshCart(cart.id, 'auto');
                    updatePromise.resolve();
                }, function () {
                    updatePromise.reject();
                });

                return updatePromise.promise;
            },

            removeNote: function(cartItem) {
                var removeNotePromise = $q.defer();
                var nulledNoteMixin = {
                    metadata: {
                        mixins: null
                    },
                    mixins: {
                        note: null
                    }
                };
                // Get cart info from CartSvc
                var cart = CartSvc.getLocalCart();

                CartREST.Cart.one('carts', cart.id).all('items').customPUT(nulledNoteMixin, cartItem.id + '?partial=true').then(function () {
                    CartSvc.refreshCart(cart.id, 'auto');
                    removeNotePromise.resolve();
                }, function () {
                    removeNotePromise.reject();
                });

                return removeNotePromise.promise;
            }
        };
}]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';
/** Module related to orders */
angular.module('ds.orders', [
    'ds.shared'
]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.orders')
    .factory('OrderListSvc', ['settings', 'GlobalData', 'OrdersREST', function(settings, GlobalData, OrdersREST){

        var getOrders = function (parms) {
            var ordersPromise = OrdersREST.Orders.all('orders').getList(parms);
            ordersPromise.then(function(response) {
                if (response.headers) {
                    GlobalData.orders.meta.total = parseInt(response.headers[settings.headers.paging.total], 10) || 0;
                }
            });
            return ordersPromise;
        };

        return {
            /**
             * Issues a query request on the order resource.
             * @param {parms} query parameters - optional
             * @return The result array as returned by Angular $resource.query().
             */
            query: function(parms) {
                return getOrders(parms);
            }

        };

    }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/** REST configuration for services related to checkout. */
angular.module('ds.orders')
    .factory('OrdersREST', ['Restangular', 'SiteConfigSvc', function(Restangular, siteConfig){

        return {
            /** Configures main orders API endpoint.*/
            Orders: Restangular.withConfig(function(RestangularConfigurer) {
                RestangularConfigurer.setResponseInterceptor(function (data, operation, what, url, response) {
                    var headers = response.headers();
                    var result = response.data;
                    if(result){
                        result.headers = headers;
                    }
                    return result;
                });
                RestangularConfigurer.setBaseUrl(siteConfig.apis.orders.baseUrl);
            })
        };


    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';
/** Module related to checkout view.*/
angular.module('ds.checkout', [
    'ds.cart',
    'vr.StripeJS'
]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.checkout')
/** Purpose of this controller is to "glue" the data models of cart and shippingCost into the order details view.*/
    .controller('CheckoutBaseCtrl', ['$scope', '$rootScope', 'CartSvc', '$q',
        function ($scope, $rootScope, CartSvc, $q) {

            $scope.cart = CartSvc.getLocalCart();
            $scope.updatedCartItems = [];

            //Event Proceed to Checkout
            $scope.$emit('checkout:opened', $scope.cart);

            //Make background not scrollable when the user opens edit cart
            $rootScope.checkoutCartEditVisible = false;

            var totalPrice = 0;

            $scope.showEditCart = function () {
                $scope.cart = CartSvc.getLocalCart();
                totalPrice = $scope.cart.totalPrice.amount;
                $rootScope.checkoutCartEditVisible = true;
            };
            $scope.hideEditCart = function () {
                $rootScope.checkoutCartEditVisible = false;

                $q.all($scope.updatedCartItems).then(function () {
                    //If the mobile navigation is shown that means there are steps in checkout process
                    //Check if the subtotal value when opened edit cart is the different when closed
                    // (there are changes to cart)

                    CartSvc.getCart().then(function (cart){
                        if(!$rootScope.showMobileNav && totalPrice !== cart.totalPrice.amount){
                            //call method that will check if needed to redirect to step2 in mobile
                            $scope.$broadcast('goToStep2');
                        }
                    });

                }, function () {
                    //Something went wrong, show error to user
                });


            };

        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.checkout')
/**
 * This is the controller for the checkout view, which includes the order form as well as a view of the cart.
 *
 * The scope provides access to the data models "order" and "cart", as well as some properties to control display
 * of errors.
 *
 * In the checkout HTML, the "steps" are created by using nested forms which can be individually validated.
 *
 * The wizard directive defined in mobileCheckoutWizard does not come into play in full screen mode.  Required fields
 * are checked and enforced when the user indicates "submit".
 *
 * The controller also includes logic to copy the bill-to address to the ship-to address if that's what the user has indicated.
 *
 * This version assumes that payment processing and pre-validation is done through Stripe.
 *
 * While the order is processing (both Stripe validation and order API call), the submit button is disabled.
 * On success, the order confirmation page is shown.  On failure, an error message is displayed and the submit button
 * is re-enabled so that the user can make changes and resubmit if needed.
 *
 * */
    .controller('CheckoutCtrl', ['$rootScope', '$scope', '$location', '$anchorScroll', 'CheckoutSvc','cart', 'order', '$state', '$modal', 'AuthSvc', 'AccountSvc', 'AuthDialogManager', 'GlobalData', 'ShippingSvc', 'shippingZones', 'shippingCountries', '$q', 'CartSvc', '$timeout',
        function ($rootScope, $scope, $location, $anchorScroll, CheckoutSvc, cart, order, $state, $modal, AuthSvc, AccountSvc, AuthDialogManager, GlobalData, ShippingSvc, shippingZones, shippingCountries, $q, CartSvc, $timeout) {

            $scope.order = order;
            $scope.displayCart = false;
            $scope.titles = GlobalData.getUserTitles();

            //Resolve in the ui.router state returns cart object, problem is when the user is loged in
            //Then in the configuration service the   CartSvc.refreshCartAfterLogin(account.id); is called, and
            //this method changes cart. That is the reason cart was empty on refresh
            //With this implementation we are getting the cart object from service after it is loaded
            $scope.shippingZones = shippingZones || [];
            $scope.currencySymbol = GlobalData.getCurrencySymbol(cart.currency);
            $scope.user = GlobalData.user;
            $scope.addresses = [];
            var shouldAutoUpdateName = true;

            var Wiz = function () {
                this.step1Done = false;
                this.step2Done = false;
                this.step3Done = false;
                this.shipToSameAsBillTo = true;
                // credit card expiration year drop-down - go 10 years out
                this.years = [];
                for (var year = new Date().getFullYear(), i = year, stop = year + 10; i < stop; i++) {
                    this.years.push(i);
                }
                this.months = ['01','02','03','04','05','06','07','08','09','10','11','12'];

            };

            $scope.wiz = new Wiz();

            var selectedBillingAddress, selectedShippingAddress;
            var addressModalInstance;

            $scope.order.account = {};

            $scope.shipToSameAsBillTo = true;

            window.scrollTo(0, 0);

            var unbind = $rootScope.$on('cart:updated', function (eve, eveObj) {
                $scope.cart = eveObj.cart;
                $scope.currencySymbol = GlobalData.getCurrencySymbol($scope.cart.currency);
                updateShippingCost($scope.order.shipTo);
            });

            $scope.$on('$destroy', unbind);

            var getDefaultAddress = function (addresses) {
                return _.find(addresses, function (addr) {

                    return addr.isDefault;
                });
            };

            var populateBillTo = function(address){
                $scope.order.shipTo.id = address.id;
                $scope.order.shipTo.contactName = address.contactName;
                $scope.order.shipTo.companyName = address.companyName;
                $scope.order.shipTo.address1 = address.street;
                $scope.order.shipTo.address2 = address.streetAppendix;

                //checkout requires 2 character country codes
                if (address.country === 'USA') {
                    address.country = 'US';
                }
                $scope.order.shipTo.country = address.country;
                $scope.order.shipTo.city = address.city;
                $scope.order.shipTo.state = address.state;
                $scope.order.shipTo.zipCode = address.zipCode;
                $scope.order.shipTo.contactPhone = address.contactPhone;

                $scope.$emit('localizedAddress:updated', address.country, 'shipping');
            };

            var getAddresses = function() {
                if(AuthSvc.isAuthenticated()) {
                    AccountSvc.getAddresses().then(function (response) {
                        if (response.length) {
                            shouldAutoUpdateName = false;
                            var defaultAddress = getDefaultAddress(response);
                            $scope.addresses = response;
                            selectedBillingAddress = defaultAddress;
                            selectedShippingAddress = defaultAddress;
                            if ($scope.isShipToCountry(defaultAddress.country) || !$scope.shippingZones.length) {
                                populateBillTo(defaultAddress);
                            }
                            updateShippingCost(defaultAddress);
                        }
                        /*
                         populate name if the user has no default address but does have a name saved to the account
                         */
                        else if ($scope.order.account) {
                            var fullName = '';
                            if ($scope.order.account.firstName) {
                                shouldAutoUpdateName = false;
                                fullName = fullName + $scope.order.account.firstName + ' ';
                            }
                            if ($scope.order.account.middleName) {
                                fullName = fullName + $scope.order.account.middleName + ' ';
                            }
                            if ($scope.order.account.lastName) {
                                fullName = fullName + $scope.order.account.lastName;
                            }
                            $scope.order.billTo.contactName = fullName;
                        }
                    });
                }
            };

            var getAccount = function() {
                AccountSvc.account().then(function(account) {
                    $scope.order.account.email = account.contactEmail;
                    $scope.order.account.title = account.title;
                    $scope.order.account.firstName = account.firstName;
                    $scope.order.account.middleName = account.middleName;
                    $scope.order.account.lastName = account.lastName;
                });
            };

            $scope.$on('user:signedin', function() {
                getAccount();
                getAddresses();
            });

            if (GlobalData.user.isAuthenticated) {
                getAccount();
            }
            getAddresses();


            $scope.badEmailAddress = false;

            // if this flag is enabled, missing required fields will be shown in error
            $scope.showPristineErrors = false;

            // Message shown around submit button to inform the user of validation and processing status
            $scope.message = null;

            $scope.submitIsDisabled = false;

            $scope.shippingConfigured = ShippingSvc.isShippingConfigured($scope.shippingZones);

            // Configure modal "spinner" to block input during checkout processing
            var ssClass = 'order-processing-dialog',
                modal = {
                    instance: null,
                    spinner: null,
                    open: function(configuration) {
                        var self = this;
                        this.spinner = this.spinner || new Spinner(configuration).spin();
                        this.instance = $modal.open(configuration);
                        this.instance.opened.then(function() {
                            setTimeout(function() {
                                $('.' + ssClass + ' .spinner').append(self.spinner.el);
                            }, 10);
                        });
                    },
                    close: function() {
                        this.spinner.stop();
                        this.instance.dismiss('cancel');
                    }
                };

            /** Mark mobile wizard step 1 "done" - bill-to address information has been entered.*/
            $scope.billToDone = function (billToFormValid, form) {
                $scope.$broadcast('submitting:form', form);
                if (billToFormValid) {
                    $scope.wiz.step1Done = true;
                    $scope.showPristineErrors = false;
                    // guarantee correct scrolling for mobile
                    $location.hash('step2');
                    $anchorScroll();
                } else {
                    $scope.showPristineErrors = true;
                }
            };

            /** Mark mobile wizard step 2 "done" - the ship-to address has been entered.*/
            $scope.shipToDone = function (shipToFormValid, form) {
                $scope.$broadcast('submitting:form', form);
                // if the ship to form fields are hidden, angular considers them empty - work around that:
                if (shipToFormValid || $scope.wiz.shipToSameAsBillTo) {
                    $scope.wiz.step2Done = true;
                    $scope.showPristineErrors = false;
                    // guarantee correct scrolling for mobile
                    $location.hash('step3');
                    $anchorScroll();
                } else {
                    $scope.showPristineErrors = true;
                }
            };

            /** Mark mobile wizard step 3 "done" - the payment information has been entered.*/
            $scope.paymentDone = function (paymentFormValid, form) {
                $scope.$broadcast('submitting:form', form);
                if (paymentFormValid) {
                    $scope.wiz.step3Done = true;
                    // guarantee correct scrolling for mobile
                    $location.hash('step4');
                    $anchorScroll();
                } else {
                    $scope.showPristineErrors = true;
                }

            };

            /** Mobile wizard - edit bill-do and mark subsequent steps as undone.*/
            $scope.editBillTo = function () {
                $scope.wiz.step1Done = false;
                $scope.wiz.step2Done = false;
                $scope.wiz.step3Done = false;
            };

            /** Mobile wizard - edit ship-to and mark subsequent steps as undone.*/
            $scope.editShipTo = function () {
                $scope.wiz.step2Done = false;
                $scope.wiz.step3Done = false;
            };

            /** Mobile wizard - edit payment information.*/
            $scope.editPayment = function () {
                $scope.wiz.step3Done = false;
            };

            /** Copy bill-to information to the ship-to properties.*/
            var setBillToSameAsShipTo = function () {
                angular.copy($scope.order.shipTo, $scope.order.billTo);
                selectedBillingAddress = $scope.order.billTo;
                $scope.$emit('localizedAddress:updated', selectedBillingAddress.country, 'billing');
            };

            var clearBillTo = function(){
                selectedBillingAddress = {};
                $scope.order.billTo = {};
                if ($scope.order.shipTo.country) {
                    $scope.order.billTo.country = $scope.order.shipTo.country;
                }
                selectedBillingAddress = $scope.order.billTo;
                $scope.$emit('localizedAddress:updated', selectedBillingAddress.country, 'billing');
                $scope.shipToSameAsBillTo = false;
            };

            $scope.toggleBillToSameAsShipTo = function(){
                if($scope.shipToSameAsBillTo){
                    setBillToSameAsShipTo();
                } else {
                    clearBillTo();
                }
                $rootScope.closeCartOnCheckout();
            };

            /** Reset any error messaging related to the credit card expiration date.*/
            $scope.resetExpDateErrors = function () {
                $scope.checkoutForm.paymentForm.expDateMsg = '';
                $scope.checkoutForm.paymentForm.expMonth.$setValidity('validation', true);
                $scope.checkoutForm.paymentForm.expYear.$setValidity('validation', true);
                $scope.message = '';
            };

            /** Reset any error flagging as it pertains to a particular form field.
             * @param field form field name
             */
            $scope.resetErrorMsg = function (field) {
                field.$setValidity('validation', true);
                field.msg = '';
                $scope.message = '';
            };


            /** Returns true if the error indicates a Stripe validation error pertaining to a credit card information input field.
             * @param error */
            function isFieldAttributableStripeError(error) {
                return error.code.indexOf('number') !== -1 ||
                    error.code.indexOf('month') !== -1 ||
                    error.code.indexOf('year') !== -1 ||
                    error.code.indexOf('cvc') !== -1;
            }

            /** Assigns an error message to a particular credit card information input field.
             * @param error message
             */
            function attributeStripeFieldError(error) {
                if (error.code.indexOf('number') !== -1) {
                    $scope.checkoutForm.paymentForm.ccNumber.$setValidity('validation', false);
                    $scope.checkoutForm.paymentForm.ccNumber.msg = error.message;
                } else if (error.code.indexOf('month') !== -1 || error.code.indexOf('year') !== -1) {
                    $scope.checkoutForm.paymentForm.expMonth.$setValidity('validation', false);
                    $scope.checkoutForm.paymentForm.expYear.$setValidity('validation', false);
                    $scope.checkoutForm.paymentForm.expDateMsg = 'INVALID_EXPIRATION_DATE';

                } else if (error.code.indexOf('cvc') !== -1) {
                    $scope.checkoutForm.paymentForm.cvc.$setValidity('validation', false);
                    $scope.checkoutForm.paymentForm.cvc.msg = error.message;
                }
            }

            /** Handles display and state following a Stripe validation error.
             * @param error message
             */
            function onStripeValidationFailure(error) {

                var msg = error.message;
                if (error.type === 'card_error') {
                    if (error.code && isFieldAttributableStripeError(error)) {
                        msg = 'PLEASE_CORRECT_ERRORS';
                        attributeStripeFieldError(error);
                    }
                }
                else if (error.type === 'payment_token_error') {
                    msg = 'Server error - missing payment configuration key.  Please try again later.';
                } else {
                    console.error('Stripe validation failed: ' + JSON.stringify(error));
                    msg = 'Not able to pre-validate payment at this time.';
                }
                $scope.message = msg;
                $scope.submitIsDisabled = false;
                if ($scope.$root.$$phase !== '$apply' && $scope.$root.$$phase !== '$digest') {
                    $scope.$apply();
                }
                modal.close();
            }


            /** Show error message after failed checkout, re-enable the submit button and reset any wait cursor/splash screen.
             * @param error message*/
            function onCheckoutFailure (error) {

                $scope.message = error;
                $scope.submitIsDisabled = false;
                modal.close();
            }

            /** Advances the application state to the confirmation page. */
            var checkoutSuccessHandler = function goToConfirmationPage(order) {

                var piwikOrderDetails = {
                    orderId: order.orderId,
                    checkoutId: order.checkoutId,
                    cart: $scope.cart
                };
                /**
                 * It is possible for a checkout to go through, but the order placement itself will fail.  If this
                 * is the case we still want to show the user the confirmation page, but instead of displaying
                 * order details, it will let the user know that the checkout passed but the order was not placed.
                 */
                var entity = order.orderId ? 'order' : 'checkout';
                var id = order.orderId ? order.orderId : order.checkoutId;
                //Send data to piwik
                $rootScope.$emit('order:placed', piwikOrderDetails);

                //Reset cart
                CheckoutSvc.resetCart();

                modal.close();
                $state.go('base.confirmation', {id: id, entity: entity});
            };

            /** Handles a failed "checkout"/order submission event. */
            var checkoutErrorHandler = function (error) {
                if (error.type === CheckoutSvc.ERROR_TYPES.order) {
                    onCheckoutFailure(error.error);
                } else if (error.type === CheckoutSvc.ERROR_TYPES.stripe) {
                    onStripeValidationFailure(error.error);
                }
            };

            /** Validates that the form is in a valid state, and if it is,
             * delegates to the CheckoutSvc to process the order.  If the checkout is successful,
             * the user will be routed to the confirmation page.  If unsuccessful, errors will be displayed to the user.
             * @param formValid  flag indicating whether or not the form is in valid state.
             * @param form name - used to raise event for inline-error-input directive
             */
            $scope.placeOrder = function (formValid, form) {
                $scope.message = null;
                $scope.$broadcast('submitting:form', form);
                if (formValid) {
                    modal.open({
                        templateUrl: 'js/app/checkout/templates/order-processing-splash-screen.html',
                        windowClass: ssClass,
                        top: '60%'
                    });

                    $scope.submitIsDisabled = true;
                    if ($scope.shipToSameAsBillTo) {
                        setBillToSameAsShipTo();
                    }
                    $scope.order.cart = $scope.cart;
                    $scope.order.shipping = angular.fromJson($scope.shippingCost);

                    $rootScope.$broadcast('order:cart', $scope.order);

                    //loyalty checkout call when paid full by loyalty
                    if ( $scope.loyalty.isPaid.complete )
                        CheckoutSvc.loyaltyCheckout($scope.order).then(checkoutSuccessHandler, checkoutErrorHandler);
                    else
                    CheckoutSvc.checkout($scope.order).then(checkoutSuccessHandler, checkoutErrorHandler);

                } else {
                    $scope.showPristineErrors = true;
                    $scope.message = 'PLEASE_CORRECT_ERRORS';
                    // Important debug for dynamic form validation.
                    // console.log('BILLTO:',$scope.billToForm.$error.required);
                    // console.log('SHIPTO:',$scope.shipToForm.$error.required);
                }
            };

            $scope.selectAddress = function(address, target) {
                $scope.displayCart = false;
                if (target === $scope.order.billTo) {
                    selectedBillingAddress = address;
                    $scope.$emit('localizedAddress:updated', address.country, 'billing');
                }
                else if (target === $scope.order.shipTo) {
                    selectedShippingAddress = address;
                    $scope.$emit('localizedAddress:updated', address.country, 'shipping');
                    updateShippingCost(selectedShippingAddress);
                }
                addressModalInstance.close();

                target.id = address.id;
                target.contactName = address.contactName;
                target.companyName = address.companyName;
                target.address1 = address.street;
                target.address2 = address.streetAppendix;
                target.country = address.country;
                target.city = address.city;
                target.state = address.state;
                target.zipCode = address.zipCode;
                target.contactPhone = address.contactPhone;
                if(target === $scope.order.shipTo && ($scope.shipToSameAsBillTo === true || _.isEmpty($scope.order.billTo))){
                    setBillToSameAsShipTo();
                }
                $scope.shipToSameAsBillTo = _.isEqual($scope.order.shipTo, $scope.order.billTo);
            };

            $scope.openAddressDialog = function(target, addType) {
                addressModalInstance = $modal.open({
                    templateUrl: 'js/app/account/templates/addresses-dialog.html',
                    windowClass: 'addressBookModal',
                    scope: $scope,
                    resolve: {
                        addresses: ['AccountSvc', function(AccountSvc) {
                            return AccountSvc.getAddresses().then(function() {
                                $scope.isDialog = true;
                                $scope.showAddressDefault = 6;
                                $scope.showAddressFilter = $scope.showAddressDefault;
                                $scope.showAllAddressButton = $scope.showAddressDefault < $scope.addresses.length;
                                $scope.showAllAddresses = false;
                                $scope.target = target;
                                $scope.addType = addType;
                            });
                        }]
                    }
                  });
            };

            $scope.closeAddressDialog = function () {
                addressModalInstance.close();
            };

            $scope.toggleAddresses = function () {
                if ($scope.showAddressFilter === $scope.addresses.length) {
                    $scope.showAddressFilter = $scope.showAddressDefault;
                } else {
                    $scope.showAddressFilter = $scope.addresses.length;
                }
                $scope.showAllAddresses = $scope.showAddressFilter === $scope.addresses.length;
            };

            $scope.$on('goToStep2', function(){
                if( $scope.wiz.step1Done &&  $scope.wiz.step2Done){
                    $scope.wiz.step2Done = false;
                    $scope.wiz.step3Done = false;
                    $location.hash('step2');
                    $anchorScroll();
                }
            });

            $scope.updateAddressName = function () {
                $scope.$broadcast('myDetails:change', $scope.shipToForm);
                if (shouldAutoUpdateName) {
                    var fullName = '';
                    if ($scope.order.account.firstName) {
                        fullName = fullName + $scope.order.account.firstName + ' ';
                    }
                    if ($scope.order.account.middleName) {
                        fullName = fullName + $scope.order.account.middleName + ' ';
                    }
                    if ($scope.order.account.lastName) {
                        fullName = fullName + $scope.order.account.lastName;
                    }

                    $scope.order.shipTo.contactName = fullName;
                }
            };

            $scope.disableAddress = function (country) {
                if (!$scope.isShipToCountry(country) && $scope.shippingZones.length && $scope.isDialog && $scope.addType !== 'billing') {
                    return true;
                } else {
                    return false;
                }
            };

            $scope.isShipToCountry = function (countryID) {
                return shippingCountries.indexOf(countryID) > -1;
            };

            $scope.ifShipAddressApplicable = function (address, target) {
                if ($scope.shippingZones.length && $scope.addType !== 'billing') {
                    if ($scope.isShipToCountry(address.country)) {
                        $scope.selectAddress(address, target);
                    }
                } else {
                    $scope.selectAddress(address, target);
                }
            };

            $rootScope.closeCartOnCheckout = function () {
                $scope.displayCart = false;
            };

            var unbindPreviewOrder = $rootScope.$on('preview:order', function (eve, eveObj) {
                previewOrder(eveObj.shipToDone, eveObj.billToDone);
            });

            $scope.$on('site:updated', function () {
                $scope.cart = CartSvc.getCart();
            });

            $rootScope.$on('language:updated', function () {
                updateShippingCost($scope.order.shipTo);
            });

            $scope.$on('$destroy', unbindPreviewOrder);

            $scope.scrollTo = function (id, yOffset) {
                $anchorScroll.yOffset = yOffset;
                var old = $location.hash();
                $location.hash(id);
                $anchorScroll();
                $location.hash(old);
            };

            $scope.previewOrderDesktop = function (shipToValid, billToValid) {
                previewOrder(shipToValid, billToValid).then(function () {
                    $timeout(function () {
                        $scope.scrollTo('preview-order', 20);
                    }, 1);
                });
            };

            function previewOrder (shipToFormValid, billToFormValid) {
                var deferred = $q.defer();
                $scope.messagePreviewOrder = null;
                if (shipToFormValid && billToFormValid) {
                    var shippingCostObject = angular.fromJson($scope.shippingCost);
                    CartSvc.recalculateCart($scope.cart, $scope.order.shipTo, shippingCostObject).then(
                        function (calculatedCart) {
                            $scope.cart.currency = calculatedCart.currency;
                            $scope.cart.totalTax = calculatedCart.totalTax;
                            $scope.cart.taxAggregate = calculatedCart.taxAggregate;
                            $scope.cart.subTotalPrice = calculatedCart.subTotalPrice;
                            $scope.cart.totalPrice = calculatedCart.totalPrice;
                            $scope.cart.totalUnitsCount = calculatedCart.totalUnitsCount;
                            $scope.cart.shipping = calculatedCart.shipping;
                            $scope.cart.totalDiscount = calculatedCart.totalDiscount;
                            $rootScope.$emit('order:previewed');
                            $scope.displayCart = true;
                            $scope.showPristineErrors = false;
                            deferred.resolve();
                        },
                        function (error) {
                            if (error.status === 400 && error.data.details && error.data.details[0].field === 'addresses') {
                                $scope.messagePreviewOrder = 'PLEASE_CORRECT_ERRORS_ADDRESS';
                                $scope.showPristineErrors = true;
                            } else {
                                $scope.messagePreviewOrder = 'PLEASE_CORRECT_MESSAGE_ERRORS';
                                $scope.showPristineErrors = true;
                            }
                            deferred.reject();
                        }
                    );
                } else {
                    $scope.showPristineErrors = true;
                    $scope.messagePreviewOrder = 'PLEASE_CORRECT_ERRORS_PREVIEW';
                    deferred.reject();
                }
                return deferred.promise;
            }

            $scope.$on('event:shipping-cost-updated', function (eve, eveObj) {
                updateShippingCost(eveObj.shipToAddress);
            });

                      //loyalty code starts

            $scope.loyaltyAmounts = {};

            $scope.loyalty  = {
                isPaid : {
                    complete : false,
                }
            }

            var unbindRedeemFull = $rootScope.$on('redeem:full', function (eve, amounts) {
                $scope.loyalty.isPaid.complete = true;
            });

            var unbindRedeemPartial = $rootScope.$on('redeem:partial', function (eve, amounts) {
                $scope.loyalty.isPaid.complete = false;
            });


            var unBindTotalEvent = $rootScope.$on('amountChanged:total',function(eve,amount){             
                 $scope.loyaltyAmounts.newAmount = amount;
            });


            $scope.$on('$destroy', unbindRedeemFull);

            $scope.$on('$destroy', unbindRedeemPartial);
            $scope.$on('$destroy', unBindTotalEvent);

            //loyalty code ends

            var updateShippingCost = function (shipToAddress) {

                if ($scope.isShipToCountry(shipToAddress.country) && $scope.shippingConfigured) {

                    if (!shipToAddress.zipCode) {
                        shipToAddress.zipCode = '';
                    }

                    var address = shipToAddress;
                    var cart = $scope.cart;

                    var data = {
                        'cartTotal': {
                            'amount': cart.subTotalPrice.amount,
                            'currency': GlobalData.getCurrency()
                        },
                        'shipToAddress': address
                    };

                    var costsPromise = ShippingSvc.getShippingCosts(data).then(
                        function (result) {
                            return result;
                        }
                    );

                    var minCostPromise = ShippingSvc.getMinimumShippingCost(data).then(
                        function (result) {
                            return result;
                        }
                    );

                    $q.all([costsPromise, minCostPromise]).then(function(data){
                        var shippingCosts = data[0];
                        $scope.shippingCosts = [];
                        $scope.shippingCost = data[1];
                        $scope.currencySymbol = GlobalData.getCurrencySymbol();
                        for(var j = 0; j < shippingCosts.length; j++){
                            for (var i = 0; i < shippingCosts[j].methods.length; i++) {
                                var shippingCostObject = {};
                                angular.copy(shippingCosts[j].methods[i], shippingCostObject);
                                shippingCostObject.zoneId = shippingCosts[j].zone.id;
                                $scope.shippingCosts.push(shippingCostObject);
                                if (shippingCosts[j].methods[i].fee.amount === $scope.shippingCost.fee.amount) {
                                    $scope.shippingCost.zoneId = shippingCosts[j].zone.id;
                                    $scope.shippingCost.id = shippingCosts[j].methods[i].id;
                                    $scope.shippingCost.name = shippingCosts[j].methods[i].name;
                                }
                            }
                        }
                    });
                }
            };

        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.checkout')
/** Purpose of this controller is to "glue" the data models of cart and shippingCost into the order details view.*/
    .controller('CheckoutCartCtrl', ['$scope', '$rootScope', 'cart', 'GlobalData', 'CartSvc',
        function ($scope, $rootScope, cart, GlobalData, CartSvc) {

            $scope.currencySymbol = GlobalData.getCurrencySymbol(cart.currency);
            $scope.taxType = GlobalData.getTaxType();
            $scope.taxConfiguration = GlobalData.getCurrentTaxConfiguration();
            $scope.calculateTax = CartSvc.getCalculateTax();

            var unbind = $rootScope.$on('cart:updated', function (eve, eveObj) {
                $scope.cart = eveObj.cart;
                $scope.currencySymbol = GlobalData.getCurrencySymbol($scope.cart.currency);
                $scope.taxType = GlobalData.getTaxType();
                $scope.taxConfiguration = GlobalData.getCurrentTaxConfiguration();
                $scope.calculateTax = CartSvc.getCalculateTax();
            });

            $rootScope.$on('order:previewed', function (){
                $scope.calculateTax.taxCalculationApplied = true;
            });

            $scope.$on('$destroy', unbind);

        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.checkout')
/** Purpose of this controller is to "glue" the data models of cart and shippingCost into the order details view.*/
    .controller('CheckoutEditCartCtrl', ['$scope', '$rootScope', 'CartSvc', 'GlobalData',
        function ($scope, $rootScope, CartSvc, GlobalData) {

            $scope.taxType = GlobalData.getTaxType();
            $scope.taxConfiguration = GlobalData.getCurrentTaxConfiguration();
            $scope.calculateTax = CartSvc.getCalculateTax();

            var unbind = $rootScope.$on('cart:updated', function (eve, eveObj) {
                $scope.cart = eveObj.cart;
                $scope.currencySymbol = GlobalData.getCurrencySymbol($scope.cart.currency);
                $scope.taxType = GlobalData.getTaxType();
                $scope.taxConfiguration = GlobalData.getCurrentTaxConfiguration();
                $scope.calculateTax = CartSvc.getCalculateTax();
            });

            $scope.$on('$destroy', unbind);

            /** Remove a product from the cart.
             * @param cart item id
             * */
            $scope.removeProductFromCart = function (itemId) {
                CartSvc.removeProductFromCart(itemId);
            };


            /**
             *  Issues an "update cart" call to the service or removes the item if the quantity is undefined or zero.
             */
            $scope.updateCartItemQty = function (item, itemQty, config) {
                var promise;
                if (itemQty > 0) {
                    promise = CartSvc.updateCartItemQty(item, itemQty, config);
                }
                else if (!itemQty || itemQty === 0) {
                    promise = CartSvc.removeProductFromCart(item.id);
                }
                $scope.updatedCartItems.push(promise);
            };

        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.checkout')
     /** The checkout service provides functions to pre-validate the credit card through Stripe,
      * and to create an order.
      */
    .factory('CheckoutSvc', ['CheckoutREST', 'StripeJS', 'CartSvc', 'settings', '$q', 'GlobalData',
        function (CheckoutREST, StripeJS, CartSvc, settings, $q, GlobalData) {

        /** CreditCard object prototype */
        var CreditCard = function () {
            this.number = null;
            this.cvc = null;
            this.expMonth = null;
            this.expYear = null;
        };

        /** Order prototype for start of checkout.*/
        var DefaultOrder = function () {
            this.shipTo = {};
            this.billTo = {};
            this.billTo.country = 'US';

            this.payment = {
                paymentId: 'stripe',
                customAttributes: {
                    token: ''
                }
            };

            this.creditCard = new CreditCard();
        };

        /** Error types to distinguish between Stripe validation and order submission errors
         * during checkout. */
        var ERROR_TYPES = {
            stripe: 'STRIPE_ERROR',
            order: 'ORDER_ERROR'
        };

        return {

            ERROR_TYPES: ERROR_TYPES,

            /** Returns a blank order for a clean checkout page.*/
            getDefaultOrder: function () {
                return new DefaultOrder();
            },

            /** Performs Stripe validation of the credit card, and if successful,
             * creates a new order.
             */
            checkout: function (order) {

                // the promise handle to the result of the transaction
                var deferred = $q.defer();
                var stripeData = {};
                /* jshint ignore:start */
                var creditCard = order.creditCard;
                stripeData.number = creditCard.number;
                stripeData.exp_month = creditCard.expMonth;
                stripeData.exp_year = creditCard.expYear;
                stripeData.cvc = creditCard.cvc;
                /* jshint ignore:end */

                var self = this;
                try {

                    StripeJS.createToken(stripeData, function (status, response) {

                        if (response.error) {
                            deferred.reject({ type: ERROR_TYPES.stripe, error: response.error });
                        } else {
                            self.createOrder(order, response.id).then(
                                // success handler
                                function (order) {

                                    deferred.resolve(order);
                                },
                                // error handler
                                function(errorResponse){
                                    var errMsg = '';

                                    if(errorResponse.status === 500) {
                                        errMsg = 'Cannot process this order because the system is unavailable. Try again at a later time.';
                                    } else {
                                        errMsg = 'Order could not be processed.';
                                        if(errorResponse) {
                                            if(errorResponse.status) {
                                                errMsg += ' Status code: '+errorResponse.status+'.';
                                            }
                                            if(errorResponse.data && errorResponse.data.details && errorResponse.data.details.length) {
                                                angular.forEach(errorResponse.data.details, function (errorDetail) {
                                                    errMsg += ' ' + errorDetail.message;
                                                });
                                            }
                                        }
                                    }
                                    deferred.reject({ type: ERROR_TYPES.order, error: errMsg });
                                }
                            );
                        }
                    });
                }
                catch (error) {
                    console.error('Exception occurred during checkout: '+JSON.stringify(error));
                    error.type = 'payment_token_error';
                    deferred.reject({ type: ERROR_TYPES.stripe, error: error });
                }
                return deferred.promise;
            },


            // custom checkout when user paid by loyalty

            loyaltyCheckout: function (order) {

                // the promise handle to the result of the transaction
                var deferred = $q.defer();

                var self = this;
                var token = "Payment made by loyalty points";
                order.payment.paymentId = "Loyalty Points";
                try {
                    self.createOrder(order, token).then(
                        // success handler
                        function (order) {

                            deferred.resolve(order);
                        },
                        // error handler
                        function(errorResponse){
                            var errMsg = '';

                            if(errorResponse.status === 500) {
                                errMsg = 'Cannot process this order because the system is unavailable. Try again at a later time.';
                            } else {
                                errMsg = 'Order could not be processed.';
                                if(errorResponse) {
                                    if(errorResponse.status) {
                                        errMsg += ' Status code: '+errorResponse.status+'.';
                                    }
                                    if(errorResponse.data && errorResponse.data.details && errorResponse.data.details.length) {
                                                angular.forEach(errorResponse.data.details, function (errorDetail) {
                                                    errMsg += ' ' + errorDetail.message;
                                                });
                                            }
                                }
                            }
                            deferred.reject({ type: ERROR_TYPES.order, error: errMsg });
                        }
                    );
                }
                catch (error) {
                    console.error('Exception occurred during checkout: '+JSON.stringify(error));
                    error.type = 'payment_token_error';
                    deferred.reject({ type: ERROR_TYPES.stripe, error: error });
                }
                return deferred.promise;
            },

            /**
             * Issues a Orders 'save' (POST) on the order resource.
             * Uses the CartSvc to retrieve the current set of line items.
             * @param order
             * @param validated Stripe token
             * @return The result array as returned by Angular $resource.query().
             */
            createOrder: function(order, token) {
                var Order = function () {};
                var newOrder = new Order();
                newOrder.cartId = order && order.cart && order.cart.id ? order.cart.id : null;
                newOrder.payment = order.payment;
                newOrder.payment.customAttributes.token = token;
                newOrder.currency = order.cart.currency;
                if (order.shipping) {
                    newOrder.shipping = {
                        methodId: order.shipping.id,
                        amount: order.shipping.fee.amount,
                        zoneId: order.shipping.zoneId
                    };
                }

                newOrder.totalPrice =  order.cart.totalPrice.amount;
                newOrder.addresses = [];
                var billTo = {};
                billTo.contactName = order.billTo.contactName;
                billTo.companyName = order.billTo.companyName;
                billTo.street = order.billTo.address1;
                billTo.streetAppendix = order.billTo.address2;
                billTo.city = order.billTo.city;
                billTo.state = order.billTo.state;
                billTo.zipCode = order.billTo.zipCode;
                billTo.country = order.billTo.country;
                billTo.account = order.account.email;
                billTo.contactPhone = order.billTo.contactPhone;
                billTo.type = 'BILLING';
                newOrder.addresses.push(billTo);

                var shipTo = {};
                shipTo.contactName = order.shipTo.contactName;
                shipTo.companyName = order.shipTo.companyName;
                shipTo.street = order.shipTo.address1;
                shipTo.streetAppendix = order.shipTo.address2;
                shipTo.city = order.shipTo.city;
                shipTo.state = order.shipTo.state;
                shipTo.zipCode = order.shipTo.zipCode;
                shipTo.country = order.shipTo.country;
                shipTo.account = order.account.email;
                shipTo.contactPhone = order.shipTo.contactPhone;
                shipTo.type = 'SHIPPING';
                newOrder.addresses.push(shipTo);

                newOrder.customer = {};
                newOrder.customer.id = order.cart.customerId;
                if (order.account.title && order.account.title !== '') {
                    newOrder.customer.title = order.account.title;
                }
                if (order.account.firstName && order.account.firstName !== '') {
                    newOrder.customer.firstName = order.account.firstName;
                }
                if (order.account.middleName && order.account.middleName !== '') {
                    newOrder.customer.middleName = order.account.middleName;
                }
                if (order.account.lastName && order.account.lastName !== '') {
                    newOrder.customer.lastName = order.account.lastName;
                }
                newOrder.customer.email = order.account.email;

                // Will be submitted as "hybris-user" request header
                settings.hybrisUser = order.account.email;

                return CheckoutREST.Checkout.all('checkouts').all('order').post(newOrder);

            },

            /** Returns the shipping costs for this tenant.  If no cost found, it will be set to zero.
             */
            getShippingCost: function() {
                var deferred = $q.defer();

                var defaultCost = {};
                defaultCost.price = {};
                defaultCost.price[GlobalData.getCurrencyId()] = 0;
                
                CheckoutREST.ShippingCosts.all('shippingcosts').getList().then(function(shippingCosts){
                    var costs = shippingCosts.length && shippingCosts[0].price ? shippingCosts[0].plain() : defaultCost;
                    deferred.resolve(costs);
                }, function(failure){
                    if (failure.status === 404) {
                        deferred.resolve(defaultCost);
                    } else {
                        deferred.reject(failure);
                    }
                });

                return deferred.promise;
            },

            resetCart: function () {
                CartSvc.resetCart();
            }

        };

    }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.checkout')
/**
 * address-decorator
 *
 * adds the 'selected' attribute to the currently selected address and removes it from other addresses, thereby adding
 * a check mark next to the selected address
 */
    .directive('addressDecorator',[function(){
        return {
            restrict: 'A',
            link: function(scope) {
                angular.forEach(scope.addresses, function (addr) {
                    if (scope.target && scope.target.id) {
                        if (addr.id && addr.id === scope.target.id) {
                            addr.selected = true;
                        }
                        else {
                            addr.selected = false;
                        }
                    }
                });
            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.checkout')
/**
 * inline-error-input
 * "Required" errors are displayed within the input fields. Other errors are showed in the tooltip.
 * When user focuses input field
 * which contains the error the original input is shown.
 * @return {Object}
 */
    .directive('inlineErrorInput',['GlobalData', '$translate', function(GlobalData, $translate){
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function(scope, element, attrs, ngModel) {
                var fieldRequired = '';
                var fieldTooShort = '';
                var fieldsNotMatching = '';
                var detailChange = null;

                $translate('FIELD_REQUIRED').then(function (translatedValue) {
                    fieldRequired = translatedValue;
                });
                $translate('FIELD_TOO_SHORT').then(function (translatedValue) {
                    fieldTooShort = translatedValue;
                });
                $translate('FIELDS_NOT_MATCHING').then(function (translatedValue) {
                    fieldsNotMatching = translatedValue;
                });
                // element's (input's) clone -> error input
                // set type to text to allow displaying 'required' msg in numeric input fields
                var elementClone = element.clone().attr('type', 'text'),
                    submitted = false,
                    onInputFocus = function() {
                        elementClone.hide();
                        elementClone.attr('value', '');
                        element.show();
                        element.focus();
                    },
                    onInputBlur = function() {
                        if (!ngModel.$pristine || submitted) {
                            validate();
                        }
                    },
                    onInputChanged = function(){  // for select boxes
                        if (!ngModel.$pristine || submitted) {
                            validate();
                        }
                    },
                    getErrorMessages = function() {

                        var errorMsgs = {
                                'inlineErrorMsgs': []
                            },
                        errorsJSON = [];
                        // "required" errors don't show in conjunction with Stripe validation, so performing
                        //   separate check here:
                        if(attrs.required && !ngModel.value){
                            errorMsgs.inlineErrorMsgs.push(attrs.inlineErrorInputRequiredMessage || fieldRequired);
                        }
                        angular.forEach(ngModel.$error, function (value, key) {
                            errorsJSON.push(key);
                        });
                        for(var errorKey in errorsJSON) {
                            switch(errorsJSON[errorKey]) {

                                case 'minlength':
                                    if (ngModel.$error.minlength) {
                                        errorMsgs.inlineErrorMsgs.push(attrs.inlineErrorInputMinLengthMessage || fieldTooShort);
                                    }
                                    break;
                                case 'equal':
                                    if (ngModel.$error.equal) {
                                        errorMsgs.inlineErrorMsgs.push(attrs.inlineErrorInputEqualMessage || fieldsNotMatching);
                                    }
                                    break;
                            }
                        }
                        return errorMsgs;
                    },
                    validate = function() {
                        scope.message = '';

                        if (ngModel.$invalid) {
                            var errorMsgs = getErrorMessages();
                            if (elementClone.is('select')) {
                                element.find('option[value=""]').text(errorMsgs.inlineErrorMsgs.join(', '));
                            } else {
                                if(errorMsgs.inlineErrorMsgs.length > 0) {
                                    elementClone.attr('value', errorMsgs.inlineErrorMsgs.join(', '));
                                }

                                if (!elementClone[0].value) {
                                    elementClone.attr('value', element[0].value);
                                }

                                elementClone.attr('class', element.attr('class'));
                                element.hide();
                                elementClone.show();
                            }
                        }
                    };

                // equality check
                if (attrs.inlineErrorInputEqual) {
                    var otherInput = element.inheritedData('$formController')[attrs.inlineErrorInputEqual];

                    ngModel.$parsers.push(function(value) {
                        if(value === otherInput.$viewValue) {
                            ngModel.$setValidity('equal', true);
                            return value;
                        }
                        ngModel.$setValidity('equal', false);
                    });

                    otherInput.$parsers.push(function(value) {
                        ngModel.$setValidity('equal', value === ngModel.$viewValue);
                        return value;
                    });
                }

                elementClone.addClass('error-input');
                elementClone.removeAttr('id');

                if (element.is('select')) {
                    // Requires emptyOption(errors placeholder) in the markup
                    var emptyOption = element.find('option[value=""]');
                    // firstChildCheck is a quirky work around angular select element with n-options
                    // which DO NOT register as option children on the select node - if this is an ng-options select,
                    // then there will be an empty default option
                    if (!emptyOption.length && emptyOption.getFirstChild) {
                        element.prepend('<option value=""></option>');
                    } else {
                        emptyOption.data('original-label', emptyOption.html());
                    }
                    element.on('change', function() {
                        emptyOption.html( element.val() !== '' ? emptyOption.data('original-label') || '' : getErrorMessages().join(', ') );
                    });
                }


                element.after(elementClone);
                elementClone.hide();
                elementClone.on('focus', onInputFocus);
                element.on('blur', onInputBlur);
                element.on('change', onInputChanged);
                var sfh = scope.$on('submitting:form', function(e, formName) {
                    submitted = true;
                    if (element.parents('[name="'+formName+'"]').length) {
                        validate();
                    }
                });

                //when "my details" name changes, validate bill to contact name field
                if (ngModel.$name === 'contactName') {
                    detailChange = scope.$on('myDetails:change', function(){
                            elementClone.hide();
                            elementClone.attr('value', '');
                            element.show();
                    });
                }

                scope.$watch(function() { return GlobalData.getLanguageCode(); }, function (currentLang, previousLang) {
                    if (currentLang && previousLang && currentLang !== previousLang) {
                        onInputChanged();
                    }
                });

                scope.$on('$destroy', function() {
                    elementClone.off('focus', onInputFocus);
                    element.off('blur', onInputBlur);
                    sfh();
                    if(detailChange){
                        detailChange();
                    }
                });
            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.checkout')
/**
 * mobile-checkout-wizard
 *
 * This directive includes a checkout wizard for the mobile checkout process, which requires that information
 * is filled out in segments ("steps"), and all subsequent steps are blocked from input until the required
 * information has been provided for previous steps. If the user edits a previously completed step, all subsequent steps
 * are marked "undone" again, and the user has to tab through the remaining steps to advance.  Validation of
 * required fields comes into play as the user attempts to advance to the next.  If there are missing fields,
 * the missing fields will be highlighted as errors, and the user cannot advance until the necessary information
 * has been provided.
 */
    .directive('mobileCheckoutWizard',['$location', '$anchorScroll', '$rootScope', function($location, $anchorScroll, $rootScope){
        return {
            restrict: 'A',
            link: function(scope) {
                var Wiz = function () {
                    this.step1Done = false;
                    this.step2Done = false;
                    this.step3Done = false;
                    // credit card expiration year drop-down - go 10 years out
                    this.years = [];
                    for (var year = new Date().getFullYear(), i = year, stop = year + 10; i < stop; i++) {
                        this.years.push(i);
                    }
                    this.months = ['01','02','03','04','05','06','07','08','09','10','11','12'];

                };

                scope.wiz = new Wiz();

                /** Mark mobile wizard step 1 "done" - bill-to address information has been entered.*/
                scope.shipToDone = function (shipToFormValid, form, shipToCountry) {
                    scope.$broadcast('submitting:form', form);
                    if (shipToFormValid && shipToCountry) {
                        scope.wiz.step1Done = true;
                        scope.showPristineErrors = false;
                        // guarantee correct scrolling for mobile
                        $location.hash('step2');
                        $anchorScroll();
                    } else {
                        scope.showPristineErrors = true;
                    }
                };

                /** Mark mobile wizard step 2 "done" - the ship-to address has been entered.*/
                scope.billToDone = function (billToFormValid, form) {
                    scope.$broadcast('submitting:form', form);
                    // if the ship to form fields are hidden, angular considers them empty - work around that:
                    if (billToFormValid || scope.shipToSameAsBillTo) {
                        scope.wiz.step2Done = true;
                        scope.showPristineErrors = false;
                        // guarantee correct scrolling for mobile
                        $location.hash('step3');
                        $anchorScroll();
                    } else {
                        scope.showPristineErrors = true;
                    }
                };

                /** Mark mobile wizard step 3 "done" - the payment information has been entered.*/
                scope.paymentDone = function (paymentFormValid, form) {
                    scope.$broadcast('submitting:form', form);
                    if (paymentFormValid) {
                        scope.wiz.step3Done = true;
                        // guarantee correct scrolling for mobile
                        $rootScope.$emit('preview:order', {shipToDone: scope.wiz.step2Done, billToDone: scope.wiz.step1Done});
                        $location.hash('step4');
                        $anchorScroll();
                    } else {
                        scope.showPristineErrors = true;
                    }

                };

                /** Mobile wizard - edit bill-do and mark subsequent steps as undone.*/
                scope.editBillTo = function () {
                    scope.wiz.step1Done = false;
                    scope.wiz.step2Done = false;
                    scope.wiz.step3Done = false;
                };

                /** Mobile wizard - edit ship-to and mark subsequent steps as undone.*/
                scope.editShipTo = function () {
                    scope.wiz.step2Done = false;
                    scope.wiz.step3Done = false;
                };

                /** Mobile wizard - edit payment information.*/
                scope.editPayment = function () {
                    scope.wiz.step3Done = false;
                };
            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/** REST configuration for services related to checkout. */
angular.module('ds.checkout')
    .factory('CheckoutREST', ['Restangular', 'SiteConfigSvc', 'GlobalData', function(Restangular, siteConfig, GlobalData){
        return {
            /** Configures main checkout API endpoint.*/
            Checkout: Restangular.withConfig(function(RestangularConfigurer) {
							RestangularConfigurer.setBaseUrl(siteConfig.apis.checkout.baseUrl);

                RestangularConfigurer.addFullRequestInterceptor(function(element, operation, route, url, headers, params, httpConfig) {
                    return {
                        element: element,
                        params: params,
                        headers: _.extend(headers, {'accept-language': GlobalData.getAcceptLanguages()}),
                        httpConfig: httpConfig
                    };
                });
            }),

            /** Configures main shipping costs API endpoint.*/
            ShippingCosts: Restangular.withConfig(function(RestangularConfigurer) {
							RestangularConfigurer.setBaseUrl(siteConfig.apis.shippingCosts.baseUrl);
                            RestangularConfigurer.addFullRequestInterceptor(function(element, operation, route, url, headers, params, httpConfig) {

                                return {
                                    element: element,
                                    params: params,
                                    headers: _.extend(headers, {'hybris-currency': GlobalData.getCurrencyId()}),
                                    httpConfig: httpConfig
                                };
                            });
            }),

            ShippingZones: Restangular.withConfig(function(RestangularConfigurer) {
                            RestangularConfigurer.setBaseUrl(siteConfig.apis.shippingZones.baseUrl);
                            RestangularConfigurer.addFullRequestInterceptor(function(element, operation, route, url, headers, params, httpConfig) {

                                return {
                                    element: element,
                                    params: params,
                                    headers: _.extend(headers, {'hybris-currency': GlobalData.getCurrencyId()}),
                                    httpConfig: httpConfig
                                };
                            });
            })

        };


    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/** Module for the order confirmation view.*/
angular.module('ds.confirmation', [
    'ds.cart',
    'ds.checkout'
]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';


angular.module('ds.confirmation')
    /** Controls the order confirmation page. */
    .controller('ConfirmationCtrl', ['$scope',  '$stateParams', 'OrderDetailSvc', 'ProductSvc', 'GlobalData', 'isAuthenticated', '$rootScope', function
        ($scope, $stateParams, OrderDetailSvc, ProductSvc,  GlobalData, isAuthenticated, $rootScope) {

        $scope.entity = $stateParams.entity;
        $scope.accountSuccess = false;
        if ($scope.entity === 'order') {
            $scope.orderInfo = {};
            $scope.orderInfo.orderId = $stateParams.id;
        } else if ($scope.entity === 'checkout') {
            /*
             else is triggered when the checkout was successful but the order placement failed
             */
            $scope.checkoutInfo = {};
            $scope.checkoutInfo.checkoutId = $stateParams.id;
        }
        $scope.isAuthenticated = isAuthenticated;
        window.scrollTo(0, 0);

        /*
         TODO: need an actual implementation
         */
        $scope.questionsContactInfo = '(888) 555-1222';
       
        if ($scope.entity === 'order') {
            /* OrderDetails are retrieved on controller instantiation, rather than being injected
            * through UI router.  This allows us to display the page immediately while filling in the details as they become
            * available. It's a visual/psychological clue that the order processing success is being made.
            *
            * @param orderId used to retrieve order details for the confirmation
            */
            OrderDetailSvc.getFormattedConfirmationDetails($scope.orderInfo.orderId).then(function(details){
                $scope.confirmationDetails = details;

            //loyalty code 
            
            $rootScope.$emit('loyalty:orderId', $scope.orderInfo.orderId)
            
            //end loyalty code
                var amount = details.entries.map(function(entry){
                   return entry.amount;
                });
                $scope.confirmationDetails.itemCount = amount.reduce(function (total, count){
                    return total+count;
                });

                $scope.currencySymbol = GlobalData.getCurrencySymbol(details.currency);

            });
        }

            var unbindConfirmAccount = $rootScope.$on('confirmation:account', function(){
            // show success panel
            window.scrollTo(0, 0);
            $scope.accountSuccess = true;
            $scope.isAuthenticated = true;
        });

        $scope.$on('$destroy', unbindConfirmAccount);
        
        

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates access to the "order" service.
 */
angular.module('ds.confirmation')
    .factory('OrderDetailSvc', ['OrderREST',  function(OrderREST){

        /** Issues a GET request for the 'order' resource
         * @param orderId
         */
        var getOrderDetails = function (orderId) {
            return OrderREST.Orders.one('orders', orderId).get();
        };

        return {

            /** Retrieves order confirmation details and formats them the spec required by the UI.
             * @param orderId
             */
            getFormattedConfirmationDetails: function (orderId) {
                return getOrderDetails(orderId).then(function (orderDetails) {

                    var confirmationDetails = {};

                    if (orderDetails.shippingAddress.contactName) {
                        confirmationDetails.shippingAddressName = orderDetails.shippingAddress.contactName;
                    }

                    if (orderDetails.shippingAddress.companyName) {
                        confirmationDetails.shippingAddressCompanyName = orderDetails.shippingAddress.companyName;
                    }

                    if (orderDetails.shippingAddress.street) {
                        confirmationDetails.shippingAddressStreetLine1 = orderDetails.shippingAddress.street;
                    }

                    if (orderDetails.shippingAddress.streetAppendix) {
                        confirmationDetails.shippingAddressStreetLine2 = orderDetails.shippingAddress.streetAppendix;
                    }

                    if (orderDetails.shipping) {
                        confirmationDetails.shipping = orderDetails.shipping;
                    }

                    if (orderDetails.subTotalPrice) {
                        confirmationDetails.subTotalPrice = orderDetails.subTotalPrice;
                    }

                    if (orderDetails.tax) {
                        confirmationDetails.tax = orderDetails.tax;
                    }

                    if (orderDetails.totalPrice) {
                        confirmationDetails.totalPrice = orderDetails.totalPrice;
                    }
                    if (orderDetails.discounts && orderDetails.discounts.length) {
                        confirmationDetails.discountAmount = orderDetails.discounts[0].amount;
                    } else {
                        confirmationDetails.discountAmount = 0;
                    }

                    confirmationDetails.shippingAddressCityStateZip = orderDetails.shippingAddress.city + ', ' + orderDetails.shippingAddress.state +
                        ' ' + orderDetails.shippingAddress.zipCode;

                    confirmationDetails.shippingAddressCountry = orderDetails.shippingAddress.country;

                    confirmationDetails.emailAddress = orderDetails.customer.email;

                    confirmationDetails.entries = orderDetails.entries;

                    confirmationDetails.currency = orderDetails.currency;

                    return confirmationDetails;
                });

            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.confirmation')
    .factory('OrderREST', ['Restangular', 'SiteConfigSvc', function(Restangular, siteConfig){

        return {
            Orders: Restangular.withConfig(function(RestangularConfigurer) {
                RestangularConfigurer.setBaseUrl(siteConfig.apis.orders.baseUrl);
            })
        };

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.confirmation')
    .directive('summaryAlign',function() {
        return {
            restrict: 'A',
            scope:{
                productcount: '@'
            },
            link: function(scope, element, attrs){
                
                /*
                    after calculating the proper position we apply the necessary
                    class to the container to finalize the visual layout
                */
                var setClass = function(alignClass){
                    element.attr('class', alignClass);
                };
                 
                attrs.$observe('productcount', function(value){
                    
                    var alignClass = 'col-xs-12 ';
                    //check to see if we're only dealing with a signle product.  
                    
                    if( parseInt(value, 10) === 1)
                    {
                        //if only 1 product is in the cart it is an automatic centering for the display position
                        alignClass += 'col-lg-offset-4 col-lg-4 col-md-offset-4 col-md-4';
                    }else{
                        
                        //determines where the summary should be aligned based 
                        //on the number of products in the cart
                        var calculatePositionSlot = function(){
                            /*
                                here wer'e looking for 33% of hte display purely based on the knowledge that
                                based on the visual comps that unless we're in mobile the each product will always take up 
                                1/3 of the available horizontal space for display.
                                
                                Mobile is an autmoatic full width per product layout, so we can safely
                                leave the col-xs-12 as a default as that is a constant. 
                            */
                            return Math.floor(parseInt(((value*0.33) %1).toFixed(1).split('.')[1], 10)/3);
                        };
                    
                        
                        switch(calculatePositionSlot())
                        {
                            //places the summary in slot 3 of 3
                            case 0:
                                alignClass += 'col-lg-4 col-lg-offset-8 col-md-4 col-md-offset-8';
                            break;
                            //places the summary in slot 1 of 3
                            case 1:
                                alignClass += 'col-lg-4 col-md-4';
                            break;
                            //places the summary in slot 2 of 3
                            case 2:
                                alignClass += 'col-lg-4 col-lg-offset-4 col-md-4 col-md-offset-4';
                            break;
                        }
                    }
                    
                    setClass(alignClass);
                    
                });
                
            }
        };
    });

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/** Coupon Module. */
angular.module('ds.coupon', []);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.coupon')
    .controller('CouponCtrl', ['$scope', '$rootScope', 'CartSvc', 'CouponSvc', 'AuthSvc', '$translate', 'GlobalData',
        function($scope, $rootScope, CartSvc, CouponSvc, AuthSvc, $translate, GlobalData) {

            $scope.cart = CartSvc.getLocalCart();

            $scope.couponCollapsed = true;

            var unbind = $rootScope.$on('cart:updated', function(eve, eveObj){
                $scope.cart = eveObj.cart;
                $scope.currencySymbol = GlobalData.getCurrencySymbol($scope.cart.currency);
            });

            var unbindSignIn = $rootScope.$on('user:signedin', function () {
                if ($scope.coupon && $scope.coupon.error && $scope.coupon.error.status === 403) {
                    delete $scope.couponErrorMessage;
                }
            });

            $scope.$on('$destroy', unbind);
            $scope.$on('$destroy', unbindSignIn);

            /** get coupon and apply it to the cart */
            $scope.applyCoupon = function(code) {
                if( isValidCouponCode(code) ) {
                    $scope.removeErrorBlock();
                    $scope.coupon = CouponSvc.getCoupon(code).then(function (couponGetResponse) {
                        if (couponGetResponse.discountAbsolute && couponGetResponse.discountAbsolute.currency !== $scope.cart.currency) {
                            getCouponError({status: 'CURR'});
                        }
                        else {
                            CartSvc.redeemCoupon(couponGetResponse, $scope.cart.id).then(function () {
                                //success
                            }, function (couponRedeemError) {
                                //error
                                redeemCouponError(couponRedeemError);
                            });
                        }
                    }, function (couponGetError) {
                        getCouponError(couponGetError);
                    });
                }
            };

            $scope.removeCoupon = function(couponId) {
                CartSvc.removeCoupon($scope.cart.id, couponId).then(function () {
                    $scope.removeErrorBlock();
                });
            };

            // added for loyalty
            $scope.coupon = {};

            $scope.removeAllCoupons = function() {
                CartSvc.removeAllCoupons($scope.cart.id).then(function () {
                    //loyalty code emit
                    $rootScope.$emit('coupon:removed');
                    $scope.removeErrorBlock();
                });
            };

            $scope.removeErrorBlock = function () {
                if($scope.coupon && $scope.coupon.error) {
                    $scope.coupon.error = '';
                }

                if($scope.couponErrorMessage) {
                    $scope.couponErrorMessage = '';
                }
            };

            var getCouponError = function(couponError) {
                $scope.coupon.error = couponError;
                if (couponError.status === 404 || (couponError.status === 403 && AuthSvc.isAuthenticated())) {
                    $translate('COUPON_NOT_VALID').then(function (response) {
                        $scope.couponErrorMessage = response;
                    });
                }
                else if (couponError.status === 403) {
                    $translate('COUPON_ERR_ANONYMOUS').then(function (response) {
                        $scope.couponErrorMessage = response;
                    });
                }
                else if (couponError.status === 'CURR') {
                    $translate('COUPON_ERR_CURRENCY').then(function (response) {
                        $scope.couponErrorMessage = response;
                    });
                }
                else {
                    $translate('COUPON_NOT_VALID').then(function (response) {
                        $scope.couponErrorMessage = response;
                    });
                }
            };

            var redeemCouponError = function (couponError) {
                     var errorMessages = CouponSvc.redeemCouponError(couponError);
                     // Just display the first coupon error message
                     $scope.couponErrorMessage = errorMessages[0];
            };

            var isValidCouponCode = function (code) {
                if ( code.indexOf(' ') > -1) {
                    $scope.couponErrorMessage = $translate.instant('COUPON_NOT_VALID');
                    return false;
                }
                return true;
            };
        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Provides a variety of coupon: access, validation, and redemptions services.
 */
angular.module('ds.coupon')
    .factory('CouponSvc', ['CartSvc', 'CouponREST', '$translate',
        function(CartSvc, CouponREST, $translate) {

            return {

                getCoupon: function(couponCode) {
                    return CouponREST.Coupon.one('coupons', couponCode).get();
                },

                redeemCouponError: function(couponError) {

                    if (couponError.status === 400) {
                        // Look for the COUPON error(s) by code, defined here:
                        //https://devportal.yaas.io/services/coupon/latest/index.html#ValidateCouponRedemption
                        // This is built to work with multiple coupon errors
                        var filteredMessages = couponError.data.details
                            .filter(function(msg) {
                                if (
                                    msg.type === 'coupon_not_active' ||
                                    msg.type === 'coupon_expired' ||
                                    msg.type === 'coupon_redemptions_exceeded' ||
                                    msg.type === 'coupon_redemption_forbidden' ||
                                    msg.type === 'coupon_order_total_too_low' ||
                                    msg.type === 'coupon_currency_incorrect' ||
                                    msg.type === 'coupon_discount_currency_incorrect' ||
                                    msg.type === 'coupon_discount_amount_incorrect'
                                ) {
                                    return true;
                                }
                                else {
                                    return false;
                                }
                            })
                            .map(function(msg) {
                                return $translate.instant(msg.type.toUpperCase());
                            });

                        return filteredMessages;
                    }
                    else {
                        var error = $translate.instant('COUPON_ERROR');
                        return [error];
                    }
                }
            };

        }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.coupon')
    .factory('CouponREST', ['Restangular', 'SiteConfigSvc', function(Restangular, siteConfig){

        return {
            /** Endpoint for Coupon.*/
            Coupon: Restangular.withConfig(function (RestangularConfigurer) {
                RestangularConfigurer.setBaseUrl(siteConfig.apis.coupon.baseUrl);

            })
        };

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ('Confidential Information'). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
'use strict';

(function() {
	/** BACKEND-MOCK-INSTRUCTIONS:
	 *  Use the querystring parameter ?nobackend in url to load this module, otherwise it is empty in codebase.
	 *  This module is multi-purpose. It can be used to a) mock data b) mock errors or c) passthrough desired services.
	 *  To change state of mocking from error to data, change comments to pass back data, error integer, or passthrough at bottom.
	 *  For error-mock: uncomment integer to mock status code. Integer return will hit error handler and mock error. Also comment out mock data.
	 *  For data-mock: uncomment the JSON data return, and comment out the status code integer.
	 *  Realize that some mock data might go stale based on session state, if so, then paste updated JSON from response tabs.
	 *  Sometimes clicking back the ?nobackend parameter can be removed causing unexpected results. Good to watch for that.
	 *  Also, be sure that the domain and tenant id settings (below) are correct for your build environment.
	**/
	if( !document.URL.match(/\?nobackend$/) ){
		// if not requested only add a blank stub to app dependency.
		angular.module('ds.backendMock', []);

	} else if (document.URL.match(/\?nobackend$/)) {

	    // if the query string is present add a module with a run definition to replace the back end.
		angular.module('ds.backendMock', ['ngMockE2E'])

			.run(function($httpBackend) {

				// MOCK-RUNNER-CONFIGURATION-. TODO - update or remove.
				var BUILD_DOMAIN = 'yaas-test.apigee.net/test',
				    BUILD_TENANT = '8bwhetym79cq',
				    MOCK_PRODUCT =  '5436899a3cceb8a9381288d9',
				    MOCK_ORDER   =  'X38KIHUG';

				// CATEGORY: category-service.js #121 getCategories MOCK - an excellent test mock because it is a simple call/response call on home page.
				$httpBackend.whenGET('https://'+BUILD_DOMAIN+'/category/v2/'+BUILD_TENANT+'/categories?expand=subcategories&toplevel=true')
					.respond(
						//MOCK-ERROR-STATUS-CODE
						//401 //500 //404  //uncomment integer to mock status code. Int will hit error handler and mock error. Also comment out mock data.
						//MOCK-DATA-RESPONSE
						[{
						  'id' : '256',
						  'name' : 'MOCK',
						  'description' : 'description',
						  'image' : 'https://yaas-test.apigee.net/test/media-repository/v2/8bwhetym79cq/SJ8Gkp4vpyKjuC7FCDw2kY1KUf6iEyRc/media/5485a4c755ceb64199047c02',
						  'subcategories' : [ {
						    'id' : '28384512',
						    'parentId' : '256',
						    'name' : 'Beersteins',
						    'description' : '',
						    'subcategories' : [ {
						      'id' : '28385024',
						      'parentId' : '28384512',
						      'name' : 'Traditional',
						      'description' : ''
						    } ]
						  }, {
						    'id' : '41452032',
						    'parentId' : '256',
						    'name' : 'hybris Mugs',
						    'description' : '',
						    'image' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/y_ondemand_backoffice/media/546f5ee1f0ee5477bf977ca4'
						  } ]
						}, {
						  'id' : '2304',
						  'name' : 'Accessories',
						  'image' : 'https://yaas-test.apigee.net/test/media-repository/v2/8bwhetym79cq/SJ8Gkp4vpyKjuC7FCDw2kY1KUf6iEyRc/media/5485a4d555ceb64199047c46',
						  'subcategories' : [ {
						    'id' : '28379136',
						    'parentId' : '2304',
						    'name' : 'Small Mugs',
						    'description' : '',
						    'image' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/y_ondemand_backoffice/media/54647b7b79ae1910e885193f'
						  }, {
						    'id' : '46116096',
						    'parentId' : '2304',
						    'name' : 'Housewear'
						  } ]
						}, {
						  'id' : '3584',
						  'name' : 'Sports',
						  'image' : 'https://yaas-test.apigee.net/test/media-repository/v2/8bwhetym79cq/SJ8Gkp4vpyKjuC7FCDw2kY1KUf6iEyRc/media/548196fce46e11c342fd4df8'
						}, {
						  'id' : '4096',
						  'name' : 'Safety',
						  'image' : 'https://yaas-test.apigee.net/test/media-repository/v2/8bwhetym79cq/SJ8Gkp4vpyKjuC7FCDw2kY1KUf6iEyRc/media/5481f5dd55ceb64199043c72'
						}, {
						  'id' : '4864',
						  'name' : 'Computer Accessories',
						  'image' : 'https://yaas-test.apigee.net/test/media-repository/v2/8bwhetym79cq/SJ8Gkp4vpyKjuC7FCDw2kY1KUf6iEyRc/media/5485a48a55ceb64199047bc0'
						}, {
						  'id' : '5632',
						  'name' : 'Cosmetics',
						  'image' : 'https://yaas-test.apigee.net/test/media-repository/v2/8bwhetym79cq/SJ8Gkp4vpyKjuC7FCDw2kY1KUf6iEyRc/media/5485a4a255ceb64199047bc2'
						}, {
						  'id' : '102403072',
						  'name' : 'Candy',
						  'subcategories' : [ {
						    'id' : '43524096',
						    'parentId' : '102403072',
						    'name' : 'Chewing Gum',
						    'description' : '',
						    'image' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/SJ8Gkp4vpyKjuC7FCDw2kY1KUf6iEyRc/media/547d9b01b80ec710ea0e8498',
						    'subcategories' : [ {
						      'id' : '43525632',
						      'parentId' : '43524096',
						      'name' : 'Hubba Bubba',
						      'description' : '',
						      'image' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/SJ8Gkp4vpyKjuC7FCDw2kY1KUf6iEyRc/media/548045411bae31f953e73e3f'
						    } ]
						  } ]
						}, {
						  'id' : '7680',
						  'name' : 'T-shirts',
						  'image' : 'https://yaas-test.apigee.net/test/media-repository/v2/8bwhetym79cq/SJ8Gkp4vpyKjuC7FCDw2kY1KUf6iEyRc/media/5485a4b155ceb64199047bc4'
						} ]
					); //end mock.

				// ANONYMOUS-LOGIN: Account Service. Use to mock Authentication errors.
				// $httpBackend.whenPOST('https://yaas-test.apigee.net/test/account/v1/auth/anonymous/login?hybris-tenant=8bwhetym79cq')
				// 	.respond(
				// 		//MOCK-ERROR-STATUS-CODE
				// 		//401 //500 //404  //uncomment integer to mock status code. Int will hit error handler and mock error. Also comment out mock data.
				// 		//MOCK-DATA-RESPONSE
				// 		// {
				// 		//   'status' : 403,
				// 		//   'message' : 'Project BAD8bwhetym79cq does not exist',
				// 		//   'type' : 'insufficient_permissions'
				// 		// }
				// 	); //end mock.


				// PRODUCT-DETAILS: white mug MOCK.
				$httpBackend.whenGET('https://'+BUILD_DOMAIN+'/product-details/v3/'+BUILD_TENANT+'/productdetails/'+ MOCK_PRODUCT+'?expand=media')
					.respond(
						//MOCK-ERROR-STATUS-CODE
						//401 //500 //404  //uncomment integer to mock status code. Int will hit error handler and mock error. Also comment out mock data.
						//MOCK-DATA-RESPONSE
						{
						  'id' : '5436899a3cceb8a9381288d9',
						  'sku' : 'P1234000',
						  'name' : 'hybris Coffee Mug - MOCK',
						  'description' : 'MOCK Drink your morning, afternoon, and evening coffee from the hybris mug.  Get caffinated in style. ',
						  'published' : true,
						  'images' : [ {
						    'id' : '5436899af2ee256c97bed3c0',
						    'url' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/product/media/5436899af2ee256c97bed3c0'
						  }, {
						    'id' : '5436899bf2ee256c97bed3c2',
						    'url' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/product/media/5436899bf2ee256c97bed3c2'
						  }, {
						    'id' : '5436899bf2ee256c97bed3c4',
						    'url' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/product/media/5436899bf2ee256c97bed3c4'
						  }, {
						    'id' : '5436899bf2ee256c97bed3c6',
						    'url' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/product/media/5436899bf2ee256c97bed3c6'
						  } ],
						  'inStock' : true,
						  'created' : '2014-10-09T13:11:54.108+0000',
						  'color' : 'White',
						  'itemCondition' : 'NEW',
						  'adult' : false,
						  'customAttributes' : [ ],
						  'defaultPrice' : {
						    'currency' : 'USD',
						    'priceId' : '5436899c5acee4d3c910b7cf',
						    'value' : 9.99
						  },
						  'categories' : [ {
						    'id' : '256',
						    'name' : 'Mugs',
						    'description' : 'description',
						    'image' : 'https://yaas-test.apigee.net/test/media-repository/v2/8bwhetym79cq/SJ8Gkp4vpyKjuC7FCDw2kY1KUf6iEyRc/media/5485a4c755ceb64199047c02'
						  } ]
						}
					); //end mock.

				// ORDERS: order confirmation MOCK.
				// This will mock data for pages at: http://dev.local:9000/8bwhetym79cq/#!/confirmation/X38KIHUG/?nobackend and
				// http://dev.local:9000/8bwhetym79cq/#!/orderDetail/X38KIHUG?nobackend
				$httpBackend.whenGET('https://'+BUILD_DOMAIN+'/order/v4/'+BUILD_TENANT+'/orders/'+ MOCK_ORDER)
					.respond(
						//MOCK-ERROR-STATUS-CODE
						//401 //404 //500  //uncomment integer to mock status code. Int will hit error handler and mock error. Also comment out mock data.
						//MOCK-DATA-RESPONSE
						{
						  'created' : '2015-02-02T19:12:55.765Z',
						  'status' : 'CREATED',
						  'entries' : [ {
						    'amount' : 4,
						    'price' : 9.99,
						    'totalPrice' : 39.96,
						    'id' : '5436899a3cceb8a9381288d9',
						    'product' : {
						      'id' : '5436899a3cceb8a9381288d9',
						      'sku' : 'P1234000',
						      'name' : 'hybris Coffee Mug - White',
						      'description' : 'Drink your morning, afternoon, and evening coffee from the hybris mug.  Get caffinated in style. ',
						      'published' : true,
						      'inStock' : true,
						      'created' : '2014-10-09T13:11:54.108+0000',
						      'externalImages' : [ ],
						      'images' : [ {
						        'id' : '5436899af2ee256c97bed3c0',
						        'url' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/product/media/5436899af2ee256c97bed3c0'
						      }, {
						        'id' : '5436899bf2ee256c97bed3c2',
						        'url' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/product/media/5436899bf2ee256c97bed3c2'
						      }, {
						        'id' : '5436899bf2ee256c97bed3c4',
						        'url' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/product/media/5436899bf2ee256c97bed3c4'
						      }, {
						        'id' : '5436899bf2ee256c97bed3c6',
						        'url' : 'http://media-repository-v2.test.cf.hybris.com/8bwhetym79cq/product/media/5436899bf2ee256c97bed3c6'
						      } ],
						      'color' : 'White',
						      'itemCondition' : 'NEW',
						      'adult' : false,
						      'customAttributes' : [ ]
						    }
						  } ],
						  'customer' : {
						    'id' : 'C9851410463',
						    'name' : 'asdfsasdf asfd',
						    'title' : 'Mr.',
						    'firstName' : 'asdfsasdf',
						    'lastName' : 'asfd',
						    'email' : 'test1@test1.com- MOCK'
						  },
						  'billingAddress' : {
						    'contactName' : 'MOCK9999',
						    'street' : '9999MOCK',
						    'zipCode' : '999',
						    'city' : '999',
						    'country' : 'US',
						    'state' : 'AK',
						    'contactPhone' : '9999'
						  },
						  'shippingAddress' : {
						    'contactName' : '99MOCK99',
						    'street' : '9999MOCK',
						    'zipCode' : '999MOCK',
						    'city' : '999',
						    'country' : 'US',
						    'state' : 'AK',
						    'contactPhone' : '9999'
						  },
						  'payments' : [ {
						    'status' : 'SUCCESS - MOCK',
						    'method' : 'Visa',
						    'paymentResponse' : 'ChargeId - ch_15Rpcx424QP3MpDM8oUPHenk',
						    'paidAmount' : 42.94,
						    'currency' : 'USD'
						  } ],
						  'shipping' : {
						    'total' : {
						      'amount' : 2.98,
						      'currency' : 'USD'
						    }
						  },
						  'tax' : {
						    'lines' : [ ],
						    'total' : {
						      'amount' : 0,
						      'currency' : 'USD',
						      'inclusive' : false
						    }
						  },
						  'totalPrice' : 42.94,
						  'currency' : 'USD'
						}
					); //end mock.
					
					$httpBackend.expectGET('https://api.yaas.io/hybris/customer/v1/defaultproj/me/addresses/28e7d417bc').respond(500);

					$httpBackend.whenPUT('https://api.yaas.io/hybris/customer/v1/defaultproj/me/addresses/28e7d417bc')
					.respond(
						//MOCK-ERROR-STATUS-CODE
						//401 //404 //500  //uncomment integer to mock status code. Int will hit error handler and mock error. Also comment out mock data.
						//MOCK-DATA-RESPONSE
						500
					);

					$httpBackend.whenDELETE('https://api.yaas.io/hybris/customer/v1/defaultproj/me/addresses/28e7d417bc')
					.respond(500);

					$httpBackend.whenDELETE('https://api.yaas.io/hybris/customer/v1/defaultproj/me/addresses/3af291947a')
					.respond(500);

					$httpBackend.whenPUT('https://api.yaas.io/hybris/customer/v1/defaultproj/me/addresses/3af291947a')
					.respond(500);

					$httpBackend.whenDELETE('https://api.yaas.io/hybris/customer/v1/defaultproj/me/addresses/1ef631bd25')
					.respond(500);

					$httpBackend.whenPUT('https://api.yaas.io/hybris/customer/v1/defaultproj/me/addresses/1ef631bd25')
					.respond(500);
					
					/*$httpBackend.whenGET('https://api.yaas.io/hybris/customer/b1/defaultproj/me')
					.respond(
						//MOCK-ERROR-STATUS-CODE
						//401 //404 //500  //uncomment integer to mock status code. Int will hit error handler and mock error. Also comment out mock data.
						//MOCK-DATA-RESPONSE
						500
					);*/
					
					/*$httpBackend.whenGET('https://api.yaas.io/hybris/customer/b1/defaultproj/me/addresses?pageNumber=1&pageSize=6')
					.respond(
						//MOCK-ERROR-STATUS-CODE
						//401 //404 //500  //uncomment integer to mock status code. Int will hit error handler and mock error. Also comment out mock data.
						//MOCK-DATA-RESPONSE
						500
					);*/

					
					$httpBackend.whenGET('https://api.yaas.io/hybris/order/v1/defaultproj/orders?pageSize=10')
					.respond(
						//MOCK-ERROR-STATUS-CODE
						//401 //404 //500  //uncomment integer to mock status code. Int will hit error handler and mock error. Also comment out mock data.
						//MOCK-DATA-RESPONSE
						500
					);

					/** MOCK-PASSTHROUGHS
					  * - These are required for anything that is not mocked. The HTTPBackendProxy passes them through to the server.
					  * - When the site is fully mocked, these can be removed.
					  * - Removing these will give errors for every service that can still be mocked.
					**/

					// various passthroughs. these allow existing services to work, while some are mocked.
					$httpBackend.whenGET('/js/app/auth/templates/signin.html').passThrough();
					$httpBackend.whenGET('/js/app/auth/templates/signup.html').passThrough();
					$httpBackend.whenGET('/js/app/account/templates/addresses.html').passThrough();

					$httpBackend.whenGET('/js/app/account/templates/address-form.html').passThrough();

					$httpBackend.whenGET('/js/app/cart/templates/cart-costs.html').passThrough();
					$httpBackend.whenGET('/js/app/coupons/templates/coupon-apply.html').passThrough();
					



					// dont mock everything else, specify pass through to avoid error.
					$httpBackend.whenGET(/^\w+.*/).passThrough();
					$httpBackend.whenPOST(/^\w+.*/).passThrough();

				});


		}

})(angular);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
'use strict';

angular.module('ds.errors', [])
    /**
     *  Dynamic error display.
     */
    .controller('ErrorsCtrl', ['$scope', '$state', '$stateParams', '$translate',
		function( $scope, $state, $stateParams, $translate ) {

			var errorType = '';

			// if errorId is valid, then postfix dynamic message, else always generic message.
			if($stateParams.errorId === '401' || $stateParams.errorId === '404'){
				errorType = '_' + $stateParams.errorId;
			}

			$translate('ERROR_TITLE' + errorType).then(function(value){
				$scope.errorTitle = value;
			});
			$translate('ERROR_MESSAGE' + errorType).then(function(value){
				$scope.errorMessage = value;
			});
			$translate('ERROR_REDIRECT').then(function(value){
				$scope.errorRedirect = value;
			});
			$translate('ERROR_BUTTON_TEXT').then(function(value){
				$scope.errorButtonText = value;
			});

			$scope.redirect = function() {
				$state.go('base.home');
			};
    }]);



/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.searchlist', [
    'ds.shared',
    'ds.products'
]);


/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */



'use strict';

angular.module('ds.searchlist')
    .controller('SearchListCtrl', ['$scope', '$rootScope', 'ProductSvc', 'GlobalData', 'settings', '$state', '$location', '$timeout', '$anchorScroll', 'ysearchSvc', 'searchString', 'MainMediaExtractor',
        function ($scope, $rootScope, ProductSvc, GlobalData, settings,  $state, $location, $timeout, $anchorScroll, ysearchSvc, searchString, MainMediaExtractor) {

            $scope.searchString = searchString;

            $scope.pageSize = GlobalData.products.pageSize;

            $scope.pageNumber = 0;
            $scope.setSortedPageSize = void 0;
            $scope.setSortedPageNumber = 1;
            $scope.sort = {selected: GlobalData.getSearchRefinements()[0].id};
            $scope.products = [];
            $scope.total = GlobalData.products.meta.total;
            $scope.store = GlobalData.store;
            $scope.prices = {};
            $scope.requestInProgress = false;
            $scope.PLACEHOLDER_IMAGE = settings.placeholderImage;
            $scope.sortParams = GlobalData.getSearchRefinements();

            $scope.pagination = {
                productsFrom: 1,
                productsTo: 1
            };

            //Initialization of algolia
            ysearchSvc.init();


            $scope.loadedPages = 1;
            $scope.loadMorePages = false;


            function getProductIdsFromAssignments(assignments) {

                return assignments.map(function (assignment) {
                    return assignment.objectID;
                });
            }

            $scope.currencySymbol = GlobalData.getCurrencySymbol();


            function assignPrices(products) {
                var pricesMap = {};
                var currentCurrency = GlobalData.getCurrencyId();
                angular.forEach(products, function (product) {
                    if (product.prices && product.prices.length > 0) {
                        product.prices.forEach(function (price) {
                            if (price.currency === currentCurrency) {
                                pricesMap[product.product.id] = price;
                            }
                        });
                    }
                });

                $scope.prices = angular.extend($scope.prices, pricesMap);

                //initialize the viewing bar promixity script
                /* jshint ignore:start */
                initRefineAffix();
                /* jshint ignore:end */

                if ($scope.loadMorePages) {
                    $timeout(function () {
                        $scope.pageSize = $scope.pageSize / $scope.loadedPages;
                        $scope.pageNumber = $scope.loadedPages;

                        //Scroll to the page
                        if (!!$scope.products[$scope.pageSize * ($scope.loadedPages - 1)]) {
                            $scope.scrollTo('p_' + $scope.products[$scope.pageSize * ($scope.loadedPages - 1)].id);
                        }

                        //Try scrolling to the last element
                        $scope.scrollTo('p_' + GlobalData.products.lastViewedProductId);

                        //Set page parameter
                        $location.search('page', $scope.pageNumber).replace();

                        $scope.loadMorePages = false;
                    }, 1);
                }
            }

            function setMainImage(product) {
                var mainMedia = MainMediaExtractor.extract(product.media);
                if (mainMedia) {
                    product.mainImageURL = mainMedia.url;
                }
            }

            function assignMainImage(products) {
                _.forEach(products, function (product) {
                    setMainImage(product.product);
                });
            }

            function getProducts(ids) {

                var query = {
                    expand: 'media',
                    sort: $scope.sort.selected
                };

                //we only want to show published products on this list
                var qSpec = 'published:true';
                qSpec = qSpec + ' ' + 'id:(' + ids + ')';
                query.q = qSpec;

                ProductSvc.queryProductDetailsList(query).then(
                    function (products) {
                        $scope.requestInProgress = false;
                        if (products) {
                            $scope.products = $scope.products.concat(products);
                            if ($scope.products.length === 0) {
                                $scope.pagination.productsFrom = 0;
                            }

                            if (products.length) {
                                assignMainImage(products);
                                assignPrices(products);
                            }

                            //Set page parameter
                            $location.search('page', $scope.pageNumber).replace();

                            //Send event that search is done
                            $rootScope.$emit('search:performed', { searchTerm: $scope.searchString, numberOfResults: $scope.total });
                        }
                    }, function () {
                        $scope.requestInProgress = false;
                    });
            }


            $scope.addMore = function () {

                // prevent additional API calls if all products are retrieved
                // infinite scroller initiates lots of API calls when scrolling to the bottom of the page
                if (!GlobalData.products.meta.total || $scope.products.length < GlobalData.products.meta.total) {
                    if (!$scope.requestInProgress) {
                        $scope.pageNumber = $scope.pageNumber + 1;

                        $scope.requestInProgress = true;

                        var page = $scope.pageNumber;

                        ysearchSvc.getResults($scope.searchString, {hitsPerPage: $scope.pageSize, page: page - 1})
                            .then(function (content) {

                                GlobalData.products.meta.total = content.nbHits;
                                $scope.total = content.nbHits;

                                $scope.lastPageNumber = Math.ceil(content.nbHits / $scope.pageSize);

                                if (content.hits.length > 0) {
                                    var ids = getProductIdsFromAssignments(content.hits);

                                    getProducts(ids);
                                }

                            }, function () {
                                $scope.requestInProgress = false;
                            });

                    }
                }
            };

            $scope.backToTop = function () {
                window.scrollTo(0, 0);
            };

            $scope.scrollTo = function (id) {

                // always scroll by 150 extra pixels (because of the navigation pane)
                $anchorScroll.yOffset = 150;

                //Then try scrolling to the element
                var old = $location.hash();
                $location.hash(id);
                $anchorScroll();
                $location.hash(old);
            };

            //Check for query parameter that has the number of pages
            if (!!$location.search().page) {
                $scope.loadedPages = parseInt($location.search().page);
                $scope.pageSize = $scope.pageSize * $scope.loadedPages;
                $scope.sort = GlobalData.products.lastSort || {selected: ''};
                $scope.loadMorePages = true;
            }

            // trigger initial load of items
            $scope.addMore();

            //Save id of the last viewed element, last viewed page and current sort
            $scope.openProductDetails = function (productId) {
                GlobalData.products.lastViewedProductId = productId;
                GlobalData.products.lastSort = $scope.sort;
            };

            $scope.showRefineContainer = function () {
                $scope.refineContainerShowing = !$scope.refineContainerShowing;
            };

        }]);


/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/** REST configuration for services related to checkout. */
angular.module('ds.checkout')
    .factory('ShippingREST', ['Restangular', 'SiteConfigSvc', 'GlobalData', function(Restangular, siteConfig, GlobalData){
        return {
            /** Configures main shipping API endpoint.*/

            ShippingZones: Restangular.withConfig(function(RestangularConfigurer) {
                            RestangularConfigurer.setBaseUrl(siteConfig.apis.shippingZones.baseUrl);
                            RestangularConfigurer.addFullRequestInterceptor(function(element, operation, route, url, headers, params, httpConfig) {
                                return {
                                    element: element,
                                    params: params,
                                    headers: _.extend(headers, {'accept-language': GlobalData.getAcceptLanguages()}),
                                    httpConfig: httpConfig
                                };
                            });
            })

        };


    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.checkout')
     /** The checkout service provides functions to pre-validate the credit card through Stripe,
      * and to create an order.
      */
    .factory('ShippingSvc', ['ShippingREST', '$q', 'GlobalData',
        function (ShippingREST, $q, GlobalData) {

            var getShipToCountries = function () {
                var deferred = $q.defer();
                var shippingZones;
                var site = GlobalData.getSiteCode();
                var shipToCountries = [];
                ShippingREST.ShippingZones.all(site).all('zones').getList({ expand: 'methods', activeMethods: true}).then(function(zones){
                    shippingZones = zones.length ? zones.plain() : [];
                    for (var i = 0; i < shippingZones.length; i++) {
                        for (var j = 0; j < shippingZones[i].shipTo.length; j++) {
                            if (shipToCountries.indexOf(shippingZones[i].shipTo[j]) < 0) {
                                shipToCountries.push(shippingZones[i].shipTo[j]);
                            }
                        }
                    }
                    deferred.resolve(shipToCountries);
                });
                
                return deferred.promise;
            };

            var getSiteShippingZones = function () {
                var deferred = $q.defer();
                var shippingZones;
                var site = GlobalData.getSiteCode();
                ShippingREST.ShippingZones.all(site).all('zones').getList({ expand: 'methods,fees', activeMethods: true}).then(function(zones){
                    shippingZones = zones.length ? zones.plain() : [];
                    deferred.resolve(shippingZones);
                });

                return deferred.promise;
            };

            var getMinimumShippingCost = function (item) {
                var deferred = $q.defer();
                var site = GlobalData.getSiteCode();
                var minCost;
                ShippingREST.ShippingZones.one(site).one('quote').all('minimum').post(item).then(function(result){
                    minCost = result.plain();
                    deferred.resolve(minCost);
                });

                return deferred.promise;
            };

            var getShippingCosts = function (item) {
                var deferred = $q.defer();
                var site = GlobalData.getSiteCode();
                var shippingCosts;
                ShippingREST.ShippingZones.one(site).all('quote').post(item).then(function(result){
                    shippingCosts = result.plain();
                    deferred.resolve(shippingCosts);
                });

                return deferred.promise;
            };

            var isShippingConfigured = function (zones) {
                if (zones) {
                    for (var i = 0; i < zones.length; i++) {
                        if (zones[i].methods && zones[i].methods.length) {
                            return true;
                        }
                    }
                }
                return false;
            };

        return {

            getShipToCountries: function () {
                return getShipToCountries();
            },

            getSiteShippingZones: function () {
                return getSiteShippingZones();
            },

            getShippingCosts: function (item) {
                return getShippingCosts(item);
            },

            getMinimumShippingCost: function (item) {
                return getMinimumShippingCost(item);
            },

            isShippingConfigured: function (zones) {
                return isShippingConfigured(zones);
            }

        };

    }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/** Module for application infrastructure and utilities.*/
angular.module('ds.shared', [
    'ds.i18n',
    'infinite-scroll'
]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.router', [])

   /** Sets up the routes for UI Router. */
    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', 'TranslationProvider', 'SiteConfigSvcProvider',
        function($stateProvider, $urlRouterProvider, $locationProvider, TranslationProvider, siteConfig) {


            // States definition
            $stateProvider
                .state('base', {
                    abstract: true,
                    views: {

                        'sidebarNavigation@': {
                            templateUrl: 'js/app/shared/templates/sidebar-navigation.html',
                            controller: 'SidebarNavigationCtrl'
                        },
                        'topNavigation@': {
                            templateUrl: 'js/app/shared/templates/top-navigation.html',
                            controller: 'TopNavigationCtrl'
                        },
                        'cart@': {
                            templateUrl: 'js/app/cart/templates/cart.html',
                            controller: 'CartCtrl'
                        },
                        'footer@':{
                            templateUrl: 'js/app/shared/templates/footer.html'
                        }
                    },
                    resolve:{
                        // this will block controller loading until the application has been initialized with
                        //  all required configuration (language, currency)
                        /* jshint ignore:start */
                        initialized: ['ConfigSvc',function(ConfigSvc) {
                            return ConfigSvc.initializeApp();
                        }]
                        /* jshint ignore:end */

                    }
                })
                .state('base.home', {
                    url: '/home',
                    views: {
                        'main@':{
                            templateUrl: 'js/app/home/templates/home.html',
                            controller: 'HomeCtrl'
                        }
                    },
                    resolve:{
                        // this will block controller loading until the application has been initialized with
                        //  all required configuration (language, currency)
                        dummy: ['initialized', function(initialized){// force initialization delay
                            if(initialized) {
                                return {};
                            }
                        }]
                    }
                })
                .state('base.search', {
                    url: '/search/:searchString',
                    views: {
                        'main@': {
                            templateUrl: 'js/app/search/templates/search-list.html',
                            controller: 'SearchListCtrl'
                        },
                        'footer@': {
                            template: ''
                        }
                    },
                    resolve:{
                        searchString: ['$sanitize', '$stateParams', function ($sanitize, $stateParams) {
                            $stateParams.searchString = $sanitize($stateParams.searchString);
                            return $stateParams.searchString;
                        }]
                    }

                })
                .state('base.product', {
                    url: '/products/',
                    abstract: true
                })
                .state('base.category', {
                    url: '/ct/:catName',
                    views: {
                        'main@': {
                            templateUrl: 'js/app/products/templates/product-list.html',
                            controller: 'BrowseProductsCtrl'
                        },
                        'footer@': {
                            template:''
                        }
                    },
                    resolve: {

                        category: ['$stateParams', 'CategorySvc', 'initialized', function ($stateParams, CategorySvc, initialized) {
                            if(initialized){
                                return CategorySvc.getCategoryWithProducts($stateParams.catName);
                            }

                        }]
                    }
                })
                .state('base.product.detail', {
                    url: ':productId/',
                    params: {
                        lastCatId: 'lastCatId'
                    },
                    views: {
                        'main@': {
                            templateUrl: 'js/app/products/templates/product-detail.html',
                            controller: 'ProductDetailCtrl'
                        }
                    },
                    resolve: {
                        product: ['$stateParams', 'PriceProductREST', 'CategorySvc', 'initialized', function ($stateParams, PriceProductREST, CategorySvc, initialized) {
                            if(initialized){
                                return PriceProductREST.ProductDetails.one('productdetails', $stateParams.productId).customGET('', {expand: 'media'})
                                    .then(function (prod) {
                                        if(prod.categories && prod.categories.length){
                                            return CategorySvc.getCategoryById(prod.categories[0].id).then(function(category){
                                                prod.richCategory = category;
                                                return prod;
                                            });

                                        } else {
                                            return prod;
                                        }
                                    });
                            }

                        }],

                        lastCatId: function ($stateParams) {
                            if($stateParams.lastCatId !== 'lastCatId') {
                                return $stateParams.lastCatId;
                            }
                            else{
                                return null;
                            }
                        },

                        shippingZones: ['ShippingSvc', 'initialized', 'GlobalData', function (ShippingSvc, initialized, GlobalData) {
                            if(initialized){
                                return ShippingSvc.getSiteShippingZones(GlobalData.getSiteCode());
                            }
                        }]

                    }
                })

                .state('base.product.review', {
                    url: ':productId/reviews',
                    views: {
                        'main@': {
                            templateUrl: 'js/app/loyalty/templates/product_reviews.html',
                            controller: 'RatingReviewCtrl'
                        }
                    }
                })
                
                .state('base.checkout', {
                    abstract: true,
                    views: {
                        'main@': {
                            templateUrl: 'js/app/checkout/templates/checkout-frame.html',
                            controller: 'CheckoutBaseCtrl'
                        }
                    },
                    resolve: {
                        cart: ['CartSvc', function (CartSvc) {
                            return CartSvc.getLocalCart();
                        }],
                        order: ['CheckoutSvc', function (CheckoutSvc) {
                            return CheckoutSvc.getDefaultOrder();
                        }],
                        shippingCountries: ['ShippingSvc', 'initialized', function (ShippingSvc, initialized) {
                            if (initialized) {  // parent resolve - if-check to make usage explicit
                                return ShippingSvc.getShipToCountries();
                            }
                        }],
                        shippingZones: ['ShippingSvc', 'initialized', function (ShippingSvc, initialized) {
                            if (initialized) {
                                return ShippingSvc.getSiteShippingZones();
                            }
                        }]
                    }
                })

                .state('base.checkout.details', {
                    url: '/checkout/',
                    views: {
                        'checkoutcart@base.checkout.details': {
                            templateUrl: 'js/app/checkout/templates/checkout-cart.html',
                            controller: 'CheckoutCartCtrl'
                        },
                        'checkoutcartmobile@base.checkout.details':{
                            templateUrl: 'js/app/checkout/templates/checkout-cart.html',
                            controller: 'CheckoutCartCtrl'
                        },
                        'checkoutform': {
                            templateUrl: 'js/app/checkout/templates/checkout-form.html',
                            controller: 'CheckoutCtrl'
                        },
                        'checkoutcartedit': {
                            templateUrl: 'js/app/checkout/templates/checkout-edit-cart.html',
                            controller: 'CheckoutEditCartCtrl'
                        }
                    }
                })
                .state('base.confirmation', {
                    url: '/confirmation/:entity/:id/',
                    views: {
                        'main@': {
                            templateUrl: 'js/app/confirmation/templates/confirmation.html',
                            controller: 'ConfirmationCtrl'
                        }
                    },
                    resolve: {
                        isAuthenticated: ['AuthSvc', function(AuthSvc){
                            return AuthSvc.isAuthenticated();
                        }]
                    }
                })
                .state('base.account', {
                    url: '/account/',
                    views: {
                        'main@': {
                            templateUrl: 'js/app/account/templates/account.html',
                            controller: 'AccountCtrl'
                        }
                    },
                    resolve: {
                        account: ['AccountSvc', function(AccountSvc) {
                            return AccountSvc.account();
                        }],
                        addresses: ['AccountSvc', function(AccountSvc) {
                            var query = {
                                pageNumber: 1,
                                pageSize: siteConfig.apis.account.addresses.initialPageSize
                            };
                            return AccountSvc.getAddresses(query).then(
                                function (response) {
                                    return response;
                                },
                                function () {
                                    return [];
                                }
                            );
                        }],
                        orders: ['OrderListSvc', function(OrderListSvc) {
                            var parms = {
                                pageSize: 10
                            };
                            return OrderListSvc.query(parms).then(
                                function (response) {
                                    return response;
                                },
                                function () {
                                    return [];
                                }
                            );
                        }]
                    },
                    data: {
                        auth: 'authenticated'
                    }
                })
                .state('base.changePassword', {
                    url: '/changePassword?token',
                    views: {
                        'main@': {
                            templateUrl: 'js/app/auth/templates/password-reset.html',
                            controller: 'ResetPasswordUpdateCtrl'
                        }
                    }
                })
                .state('base.changeEmail', {
                    url: '/changeEmail?token',
                    views: {
                        'main@': {
                            templateUrl: 'js/app/account/templates/change-email-confirmation.html',
                            controller: 'ChangeEmailConfirmationCtrl'
                        }
                    }
                })
                .state('base.orderDetail', {
                    url: '/orderDetail/:orderId',
                    views: {
                        'main@': {
                            templateUrl: 'js/app/account/templates/order-detail.html',
                            controller: 'AccountOrderDetailCtrl'
                        }
                    },
                    resolve: {
                        order: ['$stateParams', 'OrdersREST', function ($stateParams, OrdersREST) {
                            return OrdersREST.Orders.one('orders', $stateParams.orderId).get()
                                .then(function (result) {
                                    window.scrollTo(0, 0);
                                    result.id = $stateParams.id;
                                    return result;
                                });
                        }]
                    },
                    data: {
                        auth: 'authenticated'
                    }
                })
                .state('errors', {
                    url: '/errors/:errorId',
                    views: {
                        'main@': {
                            templateUrl: 'js/app/errors/templates/error-display.html',
                            controller: 'ErrorsCtrl'
                        }
                    }
                })
                .state('base.googlewallet', {
                    url: '/googlewallet/:customerId',
                    views: {
                        'main@': {
                            templateUrl: 'js/app/loyalty/templates/google-wallet.html',
                            controller: 'GoogleWalletCtrl'
                        }
                    }
                });

            $urlRouterProvider.otherwise('/home');

            /* Code from angular ui-router to make trailing slash conditional */
            $urlRouterProvider.rule(function($injector, $location) {
                var path = $location.path();
                // Note: misnomer. This returns a query object, not a search string
                var search = $location.search();
                var params;

                // check to see if the path already ends in '/'
                if (path[path.length - 1] === '/') {
                    return;
                }

                // If there was no search string / query params, return with a `/`
                if (Object.keys(search).length === 0) {
                    return path + '/';
                }

                // Otherwise build the search string and return a `/?` prefix
                params = [];
                angular.forEach(search, function(v, k){
                    params.push(k + '=' + v);
                });
                return path + '/?' + params.join('&');
            });
            $locationProvider.hashPrefix('!');
        }
    ]);



/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')


/**
 * Provides default settings (constants) for the application.
 *
 * @type {Object}
 */
    .constant('settings', {

        hybrisUser: 'Anonymous',
        hybrisApp: 'y_ondemand_storefront',
        roleSeller: 'seller',
        // cookie name
        accessCookie: 'auth.user',
        languageCookie: 'languageCookie',
        siteCookie: 'siteCookie',
        consentReferenceCookie: 'consentReferenceCookie',

        // header keys
        headers: {

            // "final" headers for CaaS auth.
            // will be replaced by full oauth flow.
            hybrisTenant: 'hybris-tenant',
            hybrisUser: 'hybris-user',
            hybrisRoles: 'hybris-roles',   //TODO deprecated, can refactor out.
            hybrisApp: 'hybris-app',       //TODO deprecated, can refactor out.
            language: 'accept-language',
            hybrisAuthorization: 'Authorization',
            paging: {
                total: 'hybris-count'
            },
            hybrisCurrency: 'hybris-currency'
        },

        // relevant keys from configuration service:
        configKeys: {

            stripeKey: 'payment.stripe.key.public',
            storeCurrencies: 'project_curr',
            storeLanguages: 'project_lang',
            storeName: 'store.settings.name',
            storeLogo: 'store.settings.image.logo.url',
            fbAppIdKey: 'facebook.app.id',
            googleClientId: 'google.client.id',
            googleResponseToken: 'access_token'
        },

        localeImages: {
            en: './img/flags/en.jpg',
            de: './img/flags/de.jpg'
        },

        // identifies the languages for which labels have been localized - see public/js/app/shared/i18n
        translateLanguages:['en','de'],
        // fallback language for label localization
        translateDefault: 'en',

        placeholderImage: 'img/no-image.jpg',
        placeholderImageId: 'no-image',

        homeState: 'base.home',
        checkoutState: 'base.checkout.details',
        allProductsState: 'base.category',

        eventSource: {
            login: 'login',
            initialization: 'init',
            unknown: 'unknown',
            languageUpdate: 'languageUpdate',
            siteUpdate: 'siteUpdate'
        },

        avatarImagePlaceholder: './img/user-icon_small_active.png'
    });
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
'use strict';

angular.module('ds.appconfig', [])

    /**
     *   Dynamic Build Configurations - for non-persistent, .gitignored application settings.
     *   to commit any changes to dynamic configurations - first remove it from .gitignore,
     *   then add it back to git ignore to avoid persisting build configurations in github.
     */

    .constant('appConfig', {

        dynamicDomain: function(){
            // Dynamic Domain is generated and replaced by build script, see gruntfile.
            return /*StartDynamicDomain*/ 'api.stage.yaas.io' /*EndDynamicDomain*/;
        },

        storeTenant: function(){
            var tenantId = '';
            var pathLength = window.location.pathname.length;

            // Set tenant id from either single or multi tenant mode.
            if( pathLength > 1 ){
                tenantId = window.location.pathname.substring( 1, pathLength-1 );
            } else {
                // Dynamic ProjectId is configured and replaced by build script, see gruntfile.
                tenantId = /*StartProjectId*/ 'saploytest' /*EndProjectId*/;
            }
            return tenantId;
        },

        clientId: function() {
            // Dynamic ClientId is configured and replaced by build script, see gruntfile.
            return /*StartClientId*/ 'T2kXYhbrAOCntbgN7lwwxxi6xOfyIFAE' /*EndClientId*/;
        },

        redirectURI: function() {
            // Dynamic RedirectURI is configured and replaced by build script, see gruntfile.
            return /*StartRedirectURI*/ 'https://loyaltyshoptest.stage.yaas.io' /*EndRedirectURI*/;
        }


    });

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')

/**
 * Provides default settings for the application, tenant configured dynamically in service provider.
 *
 * @type {Object}
 */
/** Acts as URL provider for service API's. */
    .provider('SiteConfigSvc', [

        function SiteConfigSvcProvider(appConfig) {

            var apiPath, tenantId = '';

            // handle dynamic tenant data.
            if (!_.isEmpty(appConfig) && !_.isEmpty(appConfig.storeTenant())) {
                tenantId = appConfig.storeTenant();
            }
            // handle dynamic domain data.
            if (!_.isEmpty(appConfig) && !_.isEmpty(appConfig.dynamicDomain())) {
                apiPath = appConfig.dynamicDomain();
            }

            this.apis = {
                account: {
                    baseUrl: 'https://' + apiPath + '/hybris/account/v1',
                    addresses: {
                        initialPageSize: 6
                    }
                },

                cart: {
                    baseUrl: 'https://' + apiPath + '/hybris/cart/v1/' + tenantId
                },

                cartcalculation: {
                    baseUrl: 'https://' + apiPath + '/hybris/cartcalculation/v1/' + tenantId
                },

                categories: {
                    baseUrl: 'https://' + apiPath + '/hybris/category/v1/' + tenantId
                },

                checkout: {
                    baseUrl: 'https://' + apiPath + '/hybris/checkout/v1/' + tenantId
                },

                coupon: {
                    baseUrl: 'https://' + apiPath + '/hybris/coupon/v1/' + tenantId
                },

                customers: {
                    baseUrl: 'https://' + apiPath + '/hybris/customer/v1/' + tenantId
                },

                orders: {
                    baseUrl: 'https://' + apiPath + '/hybris/order/v1/' + tenantId
                },

                prices: {
                    baseUrl: 'https://' + apiPath + '/hybris/price/v1/' + tenantId
                },

                products: {
                    baseUrl: 'https://' + apiPath + '/hybris/product/v1/' + tenantId,
                    pageSize: 10
                },

                productDetails: {
                    baseUrl: 'https://' + apiPath + '/hybris/productdetails/v1/' + tenantId
                },

                shippingCosts: {
                    baseUrl: 'https://' + apiPath + '/hybris/shippingcost/v1/' + tenantId
                },

                shippingZones: {
                    baseUrl: 'https://' + apiPath + '/hybris/shipping/v1/' + tenantId
                },

                siteSettings: {
                    baseUrl: 'https://' + apiPath + '/hybris/site/v1/' + tenantId
                },

                indexing: {
                    baseUrl: 'https://' + apiPath + '/hybris/search-algolia/v1/' + tenantId
                }
            };

            this.schemas = {
                noteMixinMetadata: 'https://api.yaas.io/hybris/schema/v1/hybriscommerce/cart-item-note-1.0.0'
            };

            this.$get = ['appConfig',
                function (appConfig) {
                    return new SiteConfigSvcProvider(appConfig);
                }
            ];

        }
    ]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.httpproxy', [])

       /** Defines the HTTP interceptors. */
    .factory('interceptor', ['$q', '$injector', 'settings', 'TokenSvc', 'httpQueue', 'GlobalData', 'SiteConfigSvc','flash', '$location', '$rootScope',
        function ($q, $injector, settings, TokenSvc, httpQueue, GlobalData, siteConfig,flash, $location, $rootScope) {

            return {
                request: function (config) {
                    document.body.style.cursor = 'wait';
                    // skip html requests as well as anonymous login URL
                    if (config.url.indexOf('templates') < 0 && config.url.indexOf(siteConfig.apis.account.baseUrl) < 0) {

                        var token = TokenSvc.getToken().getAccessToken();
                        if (token) {
                            config.headers[settings.headers.hybrisAuthorization] = 'Bearer ' + token;
                        } else {
                            // no local token - issue request to get token (async) and "save" http request for re-try
                            $injector.get('AnonAuthSvc').getToken();
                            var deferred = $q.defer();
                            httpQueue.appendBlocked(config, deferred);
                            return deferred.promise;
                        }
                    }
                    return config || $q.when(config);
                },
                requestError: function (request) {
                    document.body.style.cursor = 'auto';
                    return $q.reject(request);
                },
                response: function (response) {
                    document.body.style.cursor = 'auto';
                    return response || $q.when(response);
                },
                responseError: function (response) {
                    document.body.style.cursor = 'auto';

                    var $translate = $injector.get('$translate');

                    if ( angular.isObject(response.config) ) {

                        if ( response.config.hasOwnProperty('url') ) {

                            if ( response.config.url.indexOf('loy-') > -1 ) {

                                if(!(response.config.url.indexOf('wallet') > -1) && !(response.config.url.indexOf('dummyFire') > -1) && !(response.config.url.indexOf('ratingReviews') > -1) ){
                                    if(response.data.message){
                                        $translate([response.data.message]).then(
                                            function(translatedStrings) {
                                                flash.error = translatedStrings[response.data.message];
                                            }
                                        );
                                    }
                                    else if(response.status){
                                        $translate([response.status.toString()]).then(
                                            function(translatedStrings) {
                                                flash.error = translatedStrings[response.status.toString()];
                                            }
                                        );
                                    }
                                }


                            } else {

                    if (response.config.url.indexOf('/hybris/piwik') > -1 ||
                        response.config.url.indexOf('loginconfig') > -1 ||
                        response.config.url.indexOf('shippingcost') > -1 ||
                        response.config.url.indexOf('me/accounts/internal/email/change') > -1 ||
                        response.config.url.indexOf('algolia') > -1) {
                        //Ignore if request to one of this endpoints fails.
                                } else {
                        //Normal process of other responses
                        if (response.status === 401) {
                            // 401 on login means wrong password - requires user action
                            if (response.config.url.indexOf('login') < 0 && response.config.url.indexOf('password/change') < 0) {
                                // remove any existing token, as it appears to be invalid
                                TokenSvc.unsetToken();
                                var $state = $injector.get('$state');
                                // if current state requires authentication, prompt user to sign in and reload state
                                if ($state.current.data && $state.current.data.auth && $state.current.data.auth === 'authenticated') {
                                    $injector.get('AuthDialogManager').open({}, {}, {});
                                } else {
                                    // else, retry http request - new anonymous token will be triggered automatically
                                    // issue request to get token (async) and "save" http request
                                    $injector.get('AnonAuthSvc').getToken();
                                    var deferred = $q.defer();
                                    httpQueue.appendRejected(response.config, deferred);
                                    return deferred.promise;
                                }
                            } else if (response.config.url.indexOf('login') < 0 && response.config.url.indexOf('password/change') < 0) {
                                // show error view
                                $injector.get('$state').go('errors', { errorId: '401' });
                            }

                        } else if (response.status === 403) {
                            // if 403 during login, should already be handled by auth dialog controller
                            if (response.config.url.indexOf('login') < 0 && response.config.url.indexOf('coupon') < 0) {
                                // using injector lookup to prevent circular dependency
                                var AuthSvc = $injector.get('AuthSvc');
                                if (AuthSvc.isAuthenticated()) {
                                    // User is authenticated but is not allowed to access resource
                                    // this scenario shouldn't happen, but if it does, don't fail silently
                                    window.alert('You are not authorized to access this resource!');
                                } else {
                                    // User is not authenticated - make them log in and reload the current state
                                    $injector.get('AuthDialogManager').open({}, {}, {}).then(
                                        // success scenario handled as part of "logged in" workflow
                                        function () { },
                                    function () { // on dismiss, re-route to home page
                                        $injector.get('$state').go(settings.homeState);
                                    });
                                }
                            }
                        } else if (response.status === 404 && response.config.url.indexOf('cart') < 0 && response.config.url.indexOf('login') < 0 && response.config.url.indexOf('password/reset') < 0 && response.config.url.indexOf('coupon') < 0) {
                            $injector.get('$state').go('errors', { errorId: '404' });
                        } else if (response.status === 404 && response.config.url.indexOf('cart') > -1 && $location.url().indexOf('checkout') > -1) {
                            $rootScope.showCart = true;
                            $injector.get('$state').go(settings.allProductsState);
                        } else if (response.status === 500) {
                            //show error view with default message.
                            if(response.config.url.indexOf('orders') < 0 && response.config.url.indexOf('me') < 0) {
                                $injector.get('$state').go('errors');
                            }else {
                                if (response.config.url.indexOf('orders') > 0) {
                                    return $q.when(response);
                                }else if (response.config.url.indexOf('me') > 0) {
                                    return $q.reject(response);
                                }
                            }
                            

                        }
                    }}}
                    }
                    return $q.reject(response);
                }
            };
        }]);



/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
    .constant('Countries', {

        world: {
            countries: [{ name: 'Afghanistan', id: 'AF' }, { name: 'Aland Islands', id: 'AX' },{ name: 'Albania', id: 'AL' }, { name: 'Algeria', id: 'DZ' },
                { name: 'American Samoa', id: 'AS' },{ name: 'Andorra', id: 'AD' }, { name: 'Angola', id: 'AO' }, { name: 'Anguilla', id: 'AI' },
                { name: 'Antarctica', id: 'AQ' }, { name: 'Antigua and Barbuda', id: 'AG' }, { name: 'Argentina', id: 'AR' },
                { name: 'Armenia', id: 'AM' }, { name: 'Aruba', id: 'AW' }, { name: 'Australia', id: 'AU' }, { name: 'Austria', id: 'AT' },
                { name: 'Azerbaijan', id: 'AZ' }, { name: 'Bahamas', id: 'BS' }, { name: 'Bahrain', id: 'BH' },
                { name: 'Bangladesh', id: 'BD' }, { name: 'Barbados', id: 'BB' }, { name: 'Belarus', id: 'BY' },
                { name: 'Belgium', id: 'BE' }, { name: 'Belize', id: 'BZ' }, { name: 'Benin', id: 'BJ' }, { name: 'Bermuda', id: 'BM' },
                { name: 'Bhutan', id: 'BT' }, { name: 'Bolivia, Plurinational State of', id: 'BO' }, { name: 'Bonaire, Sint Eustatius and Saba', id: 'BQ' },
                { name: 'Bosnia and Herzegovina', id: 'BA' }, { name: 'Botswana', id: 'BW' }, { name: 'Bouvet Island', id: 'BV' },
                { name: 'Brazil', id: 'BR' }, { name: 'British Indian Ocean Territory', id: 'IO' }, { name: 'Brunei Darussalam', id: 'BN' },
                { name: 'Bulgaria', id: 'BG' }, { name: 'Burkina Faso', id: 'BF' }, { name: 'Burundi', id: 'BI' }, { name: 'Cambodia', id: 'KH' },
                { name: 'Cameroon', id: 'CM' }, { name: 'Canada', id: 'CA' }, { name: 'Cape Verde', id: 'CV' }, { name: 'Cayman Islands', id: 'KY' },
                { name: 'Central African Republic', id: 'CF' }, { name: 'Chad', id: 'TD' }, { name: 'Chile', id: 'CL' }, { name: 'China', id: 'CN' },
                { name: 'Christmas Island', id: 'CX' }, { name: 'Cocos (Keeling) Islands', id: 'CC' }, { name: 'Colombia', id: 'CO' },
                { name: 'Comoros', id: 'KM' }, { name: 'Congo', id: 'CG' }, { name: 'Congo, the Democratic Republic of the', id: 'CD' },
                { name: 'Cook Islands', id: 'CK' }, { name: 'Costa Rica', id: 'CR' }, { name: 'Cote d\'Ivoire', id: 'CI' }, { name: 'Croatia', id: 'HR' },
                { name: 'Cuba', id: 'CU' }, { name: 'Curacao', id: 'CW' }, { name: 'Cyprus', id: 'CY' }, { name: 'Czech Republic', id: 'CZ' },
                { name: 'Denmark', id: 'DK' }, { name: 'Djibouti', id: 'DJ' }, { name: 'Dominica', id: 'DM' }, { name: 'Dominican Republic', id: 'DO' },
                { name: 'Ecuador', id: 'EC' }, { name: 'Egypt', id: 'EG' }, { name: 'El Salvador', id: 'SV' }, { name: 'Equatorial Guinea', id: 'GQ' },
                { name: 'Eritrea', id: 'ER' }, { name: 'Estonia', id: 'EE' }, { name: 'Ethiopia', id: 'ET' }, { name: 'Falkland Islands (Malvinas)', id: 'FK' },
                { name: 'Faroe Islands', id: 'FO' }, { name: 'Fiji', id: 'FJ' }, { name: 'Finland', id: 'FI' }, { name: 'France', id: 'FR' },
                { name: 'French Guiana', id: 'GF' }, { name: 'French Polynesia', id: 'PF' }, { name: 'French Southern Territories', id: 'TF' },
                { name: 'Gabon', id: 'GA' }, { name: 'Gambia', id: 'GM' }, { name: 'Georgia', id: 'GE' }, { name: 'Germany', id: 'DE' },
                { name: 'Ghana', id: 'GH' }, { name: 'Gibraltar', id: 'GI' }, { name: 'Greece', id: 'GR' }, { name: 'Greenland', id: 'GL' },
                { name: 'Grenada', id: 'GD' }, { name: 'Guadeloupe', id: 'GP' }, { name: 'Guam', id: 'GU' }, { name: 'Guatemala', id: 'GT' },
                { name: 'Guernsey', id: 'GG' }, { name: 'Guinea', id: 'GN' }, { name: 'Guinea-Bissau', id: 'GW' }, { name: 'Guyana', id: 'GY' },
                { name: 'Haiti', id: 'HT' }, { name: 'Heard Island and McDonald Mcdonald Islands', id: 'HM' }, { name: 'Holy See (Vatican City State)', id: 'VA' },
                { name: 'Honduras', id: 'HN' }, { name: 'Hong Kong', id: 'HK' }, { name: 'Hungary', id: 'HU' }, { name: 'Iceland', id: 'IS' },
                { name: 'India', id: 'IN' }, { name: 'Indonesia', id: 'ID' }, { name: 'Iran, Islamic Republic of', id: 'IR' }, { name: 'Iraq', id: 'IQ' },
                { name: 'Ireland', id: 'IE' }, { name: 'Isle of Man', id: 'IM' }, { name: 'Israel', id: 'IL' }, { name: 'Italy', id: 'IT' },
                { name: 'Jamaica', id: 'JM' }, { name: 'Japan', id: 'JP' }, { name: 'Jersey', id: 'JE' }, { name: 'Jordan', id: 'JO' },
                { name: 'Kazakhstan', id: 'KZ' }, { name: 'Kenya', id: 'KE' }, { name: 'Kiribati', id: 'KI' },
                { name: 'Korea, Democratic People\'s Republic of', id: 'KP' }, { name: 'Korea, Republic of', id: 'KR' },
                { name: 'Kuwait', id: 'KW' }, { name: 'Kyrgyzstan', id: 'KG' }, { name: 'Lao People\'s Democratic Republic', id: 'LA' },
                { name: 'Latvia', id: 'LV' }, { name: 'Lebanon', id: 'LB' }, { name: 'Lesotho', id: 'LS' }, { name: 'Liberia', id: 'LR' },
                { name: 'Libya', id: 'LY' }, { name: 'Liechtenstein', id: 'LI' }, { name: 'Lithuania', id: 'LT' }, { name: 'Luxembourg', id: 'LU' },
                { name: 'Macao', id: 'MO' }, { name: 'Macedonia, the Former Yugoslav Republic of', id: 'MK' }, { name: 'Madagascar', id: 'MG' },
                { name: 'Malawi', id: 'MW' }, { name: 'Malaysia', id: 'MY' }, { name: 'Maldives', id: 'MV' }, { name: 'Mali', id: 'ML' },
                { name: 'Malta', id: 'MT' }, { name: 'Marshall Islands', id: 'MH' }, { name: 'Martinique', id: 'MQ' }, { name: 'Mauritania', id: 'MR' },
                { name: 'Mauritius', id: 'MU' }, { name: 'Mayotte', id: 'YT' }, { name: 'Mexico', id: 'MX' }, { name: 'Micronesia, Federated States of', id: 'FM' },
                { name: 'Moldova, Republic of', id: 'MD' }, { name: 'Monaco', id: 'MC' }, { name: 'Mongolia', id: 'MN' }, { name: 'Montenegro', id: 'ME' },
                { name: 'Montserrat', id: 'MS' }, { name: 'Morocco', id: 'MA' }, { name: 'Mozambique', id: 'MZ' }, { name: 'Myanmar', id: 'MM' },
                { name: 'Namibia', id: 'NA' }, { name: 'Nauru', id: 'NR' }, { name: 'Nepal', id: 'NP' }, { name: 'Netherlands', id: 'NL' },
                { name: 'New Caledonia', id: 'NC' }, { name: 'New Zealand', id: 'NZ' }, { name: 'Nicaragua', id: 'NI' }, { name: 'Niger', id: 'NE' },
                { name: 'Nigeria', id: 'NG' }, { name: 'Niue', id: 'NU' }, { name: 'Norfolk Island', id: 'NF' }, { name: 'Northern Mariana Islands', id: 'MP' },
                { name: 'Norway', id: 'NO' }, { name: 'Oman', id: 'OM' }, { name: 'Pakistan', id: 'PK' }, { name: 'Palau', id: 'PW' },
                { name: 'Palestine, State of', id: 'PS' }, { name: 'Panama', id: 'PA' }, { name: 'Papua New Guinea', id: 'PG' }, { name: 'Paraguay', id: 'PY' },
                { name: 'Peru', id: 'PE' }, { name: 'Philippines', id: 'PH' }, { name: 'Pitcairn', id: 'PN' }, { name: 'Poland', id: 'PL' },
                { name: 'Portugal', id: 'PT' }, { name: 'Puerto Rico', id: 'PR' }, { name: 'Qatar', id: 'QA' }, { name: 'Reunion', id: 'RE' },
                { name: 'Romania', id: 'RO' }, { name: 'Russian Federation', id: 'RU' }, { name: 'Rwanda', id: 'RW' }, { name: 'Saint Barthelemy', id: 'BL' },
                { name: 'Saint Helena, Ascension and Tristan da Cunha', id: 'SH' }, { name: 'Saint Kitts and Nevis', id: 'KN' }, { name: 'Saint Lucia', id: 'LC' },
                { name: 'Saint Martin (French part)', id: 'MF' }, { name: 'Saint Pierre and Miquelon', id: 'PM' }, { name: 'Saint Vincent and the Grenadines', id: 'VC' },
                { name: 'Samoa', id: 'WS' }, { name: 'San Marino', id: 'SM' }, { name: 'Sao Tome and Principe', id: 'ST' }, { name: 'Saudi Arabia', id: 'SA' },
                { name: 'Senegal', id: 'SN' }, { name: 'Serbia', id: 'RS' }, { name: 'Seychelles', id: 'SC' }, { name: 'Sierra Leone', id: 'SL' },
                { name: 'Singapore', id: 'SG' }, { name: 'Sint Maarten (Dutch part)', id: 'SX' }, { name: 'Slovakia', id: 'SK' }, { name: 'Slovenia', id: 'SI' },
                { name: 'Solomon Islands', id: 'SB' }, { name: 'Somalia', id: 'SO' }, { name: 'South Africa', id: 'ZA' },
                { name: 'South Georgia and the South Sandwich Islands', id: 'GS' }, { name: 'South Sudan', id: 'SS' }, { name: 'Spain', id: 'ES' },
                { name: 'Sri Lanka', id: 'LK' }, { name: 'Sudan', id: 'SD' }, { name: 'Suriname', id: 'SR' }, { name: 'Svalbard and Jan Mayen', id: 'SJ' },
                { name: 'Swaziland', id: 'SZ' }, { name: 'Sweden', id: 'SE' }, { name: 'Switzerland', id: 'CH' }, { name: 'Syrian Arab Republic', id: 'SY' },
                { name: 'Taiwan, Province of China', id: 'TW' }, { name: 'Tajikistan', id: 'TJ' }, { name: 'Tanzania, United Republic of', id: 'TZ' },
                { name: 'Thailand', id: 'TH' }, { name: 'Timor-Leste', id: 'TL' }, { name: 'Togo', id: 'TG' }, { name: 'Tokelau', id: 'TK' },
                { name: 'Tonga', id: 'TO' }, { name: 'Trinidad and Tobago', id: 'TT' }, { name: 'Tunisia', id: 'TN' }, { name: 'Turkey', id: 'TR' },
                { name: 'Turkmenistan', id: 'TM' }, { name: 'Turks and Caicos Islands', id: 'TC' }, { name: 'Tuvalu', id: 'TV' },
                { name: 'Uganda', id: 'UG' }, { name: 'Ukraine', id: 'UA' }, { name: 'United Arab Emirates', id: 'AE' }, { name: 'United Kingdom', id: 'GB' },
                { name: 'United States', id: 'US' }, { name: 'United States Minor Outlying Islands', id: 'UM' }, { name: 'Uruguay', id: 'UY' },
                { name: 'Uzbekistan', id: 'UZ' }, { name: 'Vanuatu', id: 'VU' }, { name: 'Venezuela, Bolivarian Republic of', id: 'VE' },
                { name: 'Viet Nam', id: 'VN' }, { name: 'Virgin Islands, British', id: 'VG' }, { name: 'Virgin Islands, U.S.', id: 'VI' },
                { name: 'Wallis and Futuna', id: 'WF' }, { name: 'Western Sahara', id: 'EH' }, { name: 'Yemen', id: 'YE' }, { name: 'Zambia', id: 'ZM' },
                { name: 'Zimbabwe', id: 'ZW' }]
        },

        us: {
            states: [{id:'AL', name:'Alabama'},{id:'AK', name:'Alaska'},{id:'AZ', name:'Arizona'},{id:'AR', name:'Arkansas'},
                {id:'CA', name:'California'},{id:'CO', name:'Colorado'},{id:'CT', name:'Connecticut'},{id:'DE', name:'Delaware'},
                {id:'DC', name:'District Of Columbia'},{id:'FL', name:'Florida'},{id:'GA', name:'Georgia'},{id:'HI', name:'Hawaii'},
                {id:'ID', name:'Idaho'},{id:'IL', name:'Illinois'},{id:'IN', name:'Indiana'},{id:'IA', name:'Iowa'},
                {id:'KS', name:'Kansas'},{id:'KY', name:'Kentucky'},{id:'LA', name:'Louisiana'},{id:'ME', name:'Maine'},
                {id:'MD', name:'Maryland'},{id:'MA', name:'Massachusetts'},{id:'MI', name:'Michigan'},{id:'MN', name:'Minnesota'},
                {id:'MS', name:'Mississippi'},{id:'MO', name:'Missouri'},{id:'MT', name:'Montana'},{id:'NE', name:'Nebraska'},
                {id:'NV', name:'Nevada'},{id:'NH', name:'New Hampshire'},{id:'NJ', name:'New Jersey'},{id:'NM', name:'New Mexico'},{id:'NY', name:'New York'},
                {id:'NC', name:'North Carolina'},{id:'ND', name:'North Dakota'},{id:'OH', name:'Ohio'},{id:'OK', name:'Oklahoma'},{id:'OR', name:'Oregon'},
                {id:'PA', name:'Pennsylvania'},{id:'RI', name:'Rhode Island'},{id:'SC', name:'South Carolina'},{id:'SD', name:'South Dakota'},
                {id:'TN', name:'Tennessee'},{id:'TX', name:'Texas'},{id:'UT', name:'Utah'},{id:'VT', name:'Vermont'},{id:'VA', name:'Virginia'},
                {id:'WA', name:'Washington'},{id:'WV', name:'West Virginia'},{id:'WI', name:'Wisconsin'},{id:'WY', name:'Wyoming'}]
        },

        canada: {
            provinces: [{id:'AB', name:'Alberta'},{id:'BC', name:'British Columbia'},{id:'MB', name:'Manitoba'},
                {id:'NB', name:'New Brunswick'},{id:'NL', name:'Newfoundland and Labrador'},{id:'NS', name:'Nova Scotia'},
                {id:'NT', name:'Northwest Territories'},{id:'NU', name:'Nunavut'},{id:'ON', name:'Ontario'},
                {id:'PE', name:'Prince Edward Island'},{id:'QC', name:'Quebec'},{id:'SK', name:'Saskatchewan'},{id:'YT', name:'Yukon'}]
        }

    });
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
/**
 * quantity-input
 * This directive restricts inputs to only accept numerical characters, as well as enter/tab/etc keystrokes
 * @return {Object}
 */
    .directive('quantityInput',[function(){
        return {
            restrict: 'A',
            link: function(scope, element) {
                element.bind('keydown', function (event) {
                    if (!(event.keyCode===13 || event.ctrlKey || event.altKey ||
                        (47<event.keyCode && event.keyCode<58 && event.shiftKey===false) ||
                        (95<event.keyCode && event.keyCode<106) ||
                        (event.keyCode===8) || (event.keyCode===9) ||
                        (event.keyCode>34 && event.keyCode<41) ||
                        (event.keyCode===46)))
                    {
                        event.preventDefault();
                    }
                });
            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';


$(document).on('mouseover', '.js-megamenutoggle', function() {
    
    //close all other dropdown menus
    $('.dropdown-menu').hide();
    
    //show the current drop down menu if there is one
    var subMenu = $(this).siblings('.dropdown-menu');
    if(subMenu.size() > 0){
        subMenu.show();
    }
});

$(document).on('click', '.js-megamenutoggle', function() {
    $('.js-megamenutoggle').removeClass('mactive');
    $(this).addClass('mactive');
});

$(document).on('mouseleave', '.js-mainNav', function(){
    $('.dropdown-menu').hide();
    
});

$(document).on('click', 'body', function() {
    $('.dropdown-menu').hide();
});



/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2014 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
    .directive('matchBackground',[ function() {
        return {
            restrict: 'A',
            link: function(scope, element) {
                // match color of container to page background so that it will not differ for short verticle views.
                var bgColor = $(element).css('background-color');
                $('html').css('background-color', bgColor);
            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
    .directive('stickyNavigation',[ '$timeout', function($timeout){

        var container;

        $(window).resize(function(){

            setNavigationHeight(container);
        });

        var setNavigationHeight = function setNavigationHeight(){
            var availableHeight = container.height();

            var reservedHeight, marginOffset;

            reservedHeight = 0;
            marginOffset = 0;

            $('.hy-stickyComponent').each(function(){
                reservedHeight += $(this).outerHeight(true) ;
            });

            if($('.hy-flexibleHeightNav').length > 0)
            {
                //get the margin for the container
                marginOffset += parseInt($('.hy-flexibleHeightNav').css('marginBottom').split('px')[0], 10);
                marginOffset += parseInt($('.hy-flexibleHeightNav').css('marginTop').split('px')[0], 10);
                //remove the margin offset for display
                reservedHeight -= marginOffset;
            }
            $('.hy-flexibleHeightNav .hy-scrollingNav').height( availableHeight  - reservedHeight );


        };

        return {
            restrict: 'A',
            link: function(scope, element) {
                container = $(element);
                angular.element(document).ready(function () {
                    $timeout(setNavigationHeight, 500);
                });
            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2014 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';
//Used for determing the current visible items indexes
//It is checking if the details (name and price) part of item is visible
angular.module('ds.shared')
    .directive('infiniteScrollVisibleItems', ['$window', function ($window) {
        return {
            restrict: 'A',
            link: function (scope, element) {

                $window = angular.element($window);
                var lastScrollTop = 0;
                var firstIndex = 0;
                var elements = [];
                var i = 0;
                var offset = 0;

                //Function that checks if the element is visible in viewport
                var isElementInViewport = function (el) {
                    var rect = el.getBoundingClientRect();

                    return (
                        //Used 100 instead of 0 because of the top navigation
                    rect.top >= 100 &&
                    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)
                    );
                };

                //Function that determines the direction of users scroll
                var scrollDirectionUp = function () {
                    var st = $window.scrollTop();
                    var directionUp = true;
                    if (st > lastScrollTop) {
                        // down scroll
                        directionUp = false;
                    }
                    lastScrollTop = st;
                    return directionUp;
                };

                //Function that handles events and calculates
                var handler = function (e) {

                    var firstVisibleIndex = 0;
                    var lastVisibleIndex = 0;
                    firstIndex = scope.pagination.productsFrom;
                    if (scrollDirectionUp()) {
                        //console.log('Scroll up');

                        //If it is scroll event then the checking is done only on small part of elements based
                        //on last visible items (if it is scroll up then the next visible items 100% have <= indexes
                        //than last one)
                        if (e.type === 'scroll') {
                            //Get all elements that have index smaller than scope.productsTo
                            elements = element.querySelectorAll('.productInfoContainer').slice(0, scope.pagination.productsTo);
                        }
                        else {
                            //Loop over all elements
                            elements = element.querySelectorAll('.productInfoContainer');
                        }
                        if(elements.length > 0) {

                            for (i = elements.length - 1; i >= 0; i--) {
                                //Find the first one that is visible
                                if (isElementInViewport(elements[i])) {
                                    lastVisibleIndex = i + 1;
                                    break;
                                }
                            }
                            firstVisibleIndex = 0;
                            for (i = lastVisibleIndex - 1; i >= 0; i--) {
                                //Find the first one that is visible
                                if (!isElementInViewport(elements[i])) {
                                    firstVisibleIndex = i + 1;
                                    break;
                                }
                            }
                            firstVisibleIndex += 1;

                            offset = 0;
                        }
                        else{
                            firstVisibleIndex = 1;
                            lastVisibleIndex = 1;
                        }
                    }
                    else {
                        //console.log('Scroll down');

                        if (e.type === 'scroll') {
                            //Get all elements from currently shown index - 3 until the end
                            // elements = element.querySelectorAll(':nth-child(n+' + queryIndex + ') .productInfoContainer');
                            elements = element.querySelectorAll('.productInfoContainer').slice(scope.pagination.productsFrom - 1);

                            offset = firstIndex;
                        }
                        else {
                            //Loop over all elements
                            elements = element.querySelectorAll('.productInfoContainer');

                            //Set offset to 1 because looping is done over all elements
                            offset = 1;
                        }

                        if(elements.length > 0) {

                            for (i = 0; i < elements.length; i++) {
                                if (isElementInViewport(elements[i])) {
                                    firstVisibleIndex = i;
                                    break;
                                }
                            }

                            lastVisibleIndex = elements.length - 1;
                            for (i = firstVisibleIndex; i < elements.length; i++) {
                                if (!isElementInViewport(elements[i])) {
                                    lastVisibleIndex = i - 1;
                                    break;
                                }
                            }
                        } else{
                            offset = 1;
                            firstVisibleIndex = 1;
                            lastVisibleIndex = 1;
                        }
                    }

                    if (!scope.$$phase) {
                        scope.$apply(function () {
                            scope.pagination.productsFrom = firstVisibleIndex + offset;
                            scope.pagination.productsTo = lastVisibleIndex + offset;
                        });
                    }
                    else {
                        scope.pagination.productsFrom = firstVisibleIndex + offset;
                        scope.pagination.productsTo = lastVisibleIndex + offset;
                    }
                };

                $window.on('resize scroll', handler);

                scope.$on('initialViewportCheck', function () {
                  //Fire this event when the list finished rendering on page and DOM is completed

                    //Check if the firstVisibleIndex is 0 and only fire then, that way it is fired only on load
                    if(firstIndex === 0) {
                        handler({type: 'initialViewportCheck'});
                    }
                });
            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2014 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';
//Used for determing when the ng repeat has finished with rendering elements
angular.module('ds.shared')
    .directive('onFinishRenderNgRepeat', ['$timeout','$rootScope',function ($timeout, $rootScope) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                if (scope.$last === true) {
                    $timeout(function () {
                        $rootScope.$broadcast(attrs.onFinishRenderNgRepeatEvent);
                    });
                }
            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.ybreadcrumb', [])
    .run(['$templateCache', function($templateCache) {
        $templateCache.put('template/y-breadcrumb.html',
            '<div class="breadcrumb-container" ng-show=\"items.path && items.path.length > 1\">' +
                '<div ng-show=\"size !== \'small\'\" class=\"row productListingBreadCrumb\" ng-cloak>' +
                    '<div ng-if=\"items.name\" class=\"col-xs-12 col-sm-6  title breadCrumbText\">' +
                        '<a ng-repeat=\"item in items.path\" ng-if=\"!$last\" ui-sref=\"base.category({catName: item.slug})\" id=\"bc{{item.id}}\">' +
                            '<span ng-if=\"!$first\"> / </span> {{item.name}}' +
                        '</a>' +
                        '<span ng-if=\"items.path && items.path.length > 1\"> / </span>' +
                        '<span class="last">{{items.path[items.path.length -1].name}}</span>' +
                    '</div>' +
                '</div>' +
                '<small  ng-show=\"size === \'small\'\"><a ng-repeat=\"item in items.path\" ui-sref=\"base.category({catName: item.slug})\" id=\"bc{{item.id}}\">' +
                    '<span ng-if=\"!$first\">/</span> {{item.name}}' +
                '</a></small>' +
            '</div>'
        );
    }]);

angular.module('ds.ybreadcrumb')
    .directive('ybreadcrumb',function() {
        return {
            restrict: 'E',
            scope: {
                items: '=yitem',
                size: '=size'
            },
            templateUrl: 'template/y-breadcrumb.html',
            replace: true
        };
    });
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.ytracking', [])
    .constant('yTrackingLocalStorageKey', 'ytracking')
    .directive('ytracking', ['ytrackingSvc', '$rootScope', '$document',
        function (ytrackingSvc, $rootScope, $document) {
            return {
                restrict: 'A',
                compile: function () {

                    //Init tracking
                    ytrackingSvc.init();

                    //Handlers for events
                    $rootScope.$on('product:opened', function (arg, obj) {

                        var name = !!obj.product && !!obj.product.name ? obj.product.name : '';
                        var category = !!obj.categories && !!obj.categories[0] ? obj.categories[0].name : '';
                        var price = !!obj.prices && !!obj.prices[0] ? obj.prices[0].effectiveAmount : '';

                        ytrackingSvc.setProductViewed(obj.product.id, name, category, price);
                    });
                    $rootScope.$on('category:opened', function (arg, obj) {
                        var path = '';
                        //For now we are only sending last category name, in future we will send array of categories
                        for (var i = 0; i < obj.path.length; i++) {
                            path = obj.path[i].name;
                        }
                        ytrackingSvc.setCategoryViewed(path);
                    });

                    $rootScope.$on('customer:login', function (arg, customer) {
                        ytrackingSvc.customerLogIn(customer);
                    });

                    $rootScope.$on('search:performed', function (arg, obj) {
                        ytrackingSvc.searchEvent(obj.searchTerm, obj.numberOfResults);
                    });

                    $rootScope.$on('checkout:opened', function (arg, cart) {
                        ytrackingSvc.proceedToCheckout(cart);
                    });

                    $rootScope.$on('order:placed', function (arg, obj) {
                        //Send ordered cart items to piwik
                        for (var i = 0; i < obj.cart.items.length; i++) {
                            //sku, name, categoryName, unitPrice, amount
                            var item = obj.cart.items[i];
                            var price = !!item.itemPrice && !!item.itemPrice.amount ? item.itemPrice.amount : '';
                            ytrackingSvc.addEcommerceItem(item.product.id, item.product.name, '', price, item.quantity);
                        }
                        //Send order details to piwik
                        var orderId = obj.orderId || '';
                        var totalPrice = !!obj.cart && !!obj.cart.totalPrice ? obj.cart.totalPrice.amount : '';
                        var subTotalPrice = !!obj.cart && !!obj.cart.subTotalPrice.amount ? obj.cart.subTotalPrice.amount : '';
                        var tax = !!obj.cart && !!obj.cart.totalTax ? obj.cart.totalTax.amount : '';
                        var shippingCost = !!obj.cart && !!obj.cart.shippingCost ? obj.cart.shippingCost.amount : '';
                        var discountOffered = false;

                        ytrackingSvc.orderPlaced(orderId, totalPrice, subTotalPrice, tax, shippingCost, discountOffered);
                    });

                    $rootScope.$on('cart:updated', function (arg, obj) {
                        ytrackingSvc.cartUpdated(obj.cart);
                    });

                    // This should be maybe changed, and user should put ng-click to all banners that we want to look for
                    // or say to user to give to all banners that they want to follow specific class
                    $document.on('click', '.banner', function () {
                        var element = angular.element(this);
                        var id = element.attr('id') || '';
                        var url = element.attr('href') || '';

                        ytrackingSvc.bannerClick(id, url);
                    });
                }
            };
        }])
    .factory('ytrackingSvc', ['yTrackingLocalStorageKey', '$http', 'localStorage', '$window', '$timeout', 'GlobalData', 'settings', 'appConfig', 'CookieSvc',
        function (yTrackingLocalStorageKey, $http, localStorage, $window, $timeout, GlobalData, settings, appConfig, CookieSvc) {

            var internalCart = {};

            /**
            * Url for piwik service.
            * appConfig dependency should be refactored out maybe and tenant and domain
            * should be provided for example as parameters to ytracking directive so this tracking
            * can also work for any other storefront (not just this template)
            */
            var apiPath = appConfig.dynamicDomain();
            var tenantId = appConfig.storeTenant();

            var piwikUrl = 'https://' + apiPath + '/hybris/profile-piwik/b2/' + tenantId + '/events';
            var consentUrl = 'https://' + apiPath + '/hybris/profile-consent/b2/' + tenantId + '/consentReferences';

            var getConsentReference = function () {
                var consentReferenceCookie = CookieSvc.getConsentReferenceCookie();
                if (!!consentReferenceCookie) {
                    return consentReferenceCookie;
                } else {
                    return '';
                }
            };

            // We could do this in ConfigSvc. This way, consent-reference will be fetched before piwik starts tracking and sending
            // events. When done in ConfigSvc then the code should probably also detect if ytracking is enabled before attmepting
            // to fetch the consent-reference.
            var makeOptInRequest = function() {
                var req = {
                    method: 'POST',
                    url: consentUrl,
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                };

                return $http(req);
            };

            /**
            * Create object from piwik GET request
            */
            var getPiwikQueryParameters = function (hash) {
                var split = hash.split('&');

                var obj = {};
                for (var i = 0; i < split.length; i++) {
                    var kv = split[i].split('=');
                    obj[kv[0]] = decodeURIComponent(kv[1] ? kv[1].replace(/\+/g, ' ') : kv[1]);
                }

                //Set date for this request to current datetime when request processed. Needed from CDM for order of events.
                obj.date = new Date().getTime();

                return obj;
            };

            /**
            * Function that process piwik requests
            */
            var processPiwikRequest = function (e) {

                //Get object from query parameters
                var obj = getPiwikQueryParameters(e);


                /*
                 if no consent reference cookie present, we must get the consent reference before making the
                 first call to the tracking endpoint
                 */
                if (!getConsentReference()) {
                    //noinspection JSUnusedAssignment
                    makeOptInRequest().success(function (response) {
                        if (!!response.id) {
                            CookieSvc.setConsentReferenceCookie(response.id);
                        }
                        //Make post request to service
                        makePiwikRequest(obj);
                    });
                }
                else {
                    //Make post request to service
                    makePiwikRequest(obj);
                }
            };

            /**
            * Function that creates POST request to CDM endpoint
            */
            var makePiwikRequest = function (obj) {

                var req = {
                    method: 'POST',
                    url: piwikUrl,
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'consent-reference': getConsentReference()
                    },
                    data: JSON.stringify(obj)
                };

                //pass 'piwik' as event type if the tracking endpoint is the edge endpoint
                if (piwikUrl.indexOf('edge') >= 0) {
                    req.headers['event-type'] = 'piwik';
                    req.headers[settings.headers.hybrisTenant] = appConfig.storeTenant();
                }

                $http(req).success(function () {
                    //Get all items that failed before and resend them to PIWIK server
                    var items = localStorage.getAllItems(yTrackingLocalStorageKey);
                    for (var i = 0; i < items.length; i++) {
                        makePiwikRequest(items[i]);
                    }
                }).error(function () {
                    //Store request to localstorage so it can be sent again when possible
                    localStorage.addItemToArray(yTrackingLocalStorageKey, obj);
                });

            };

            /**
            * Initialization of piwik
            */
            var init = function () {
                $window._paq = $window._paq || [];

                //Make requests to service custom
                $window._paq.push(['setCustomRequestProcessing', processPiwikRequest]);

                //Set document title
                $window._paq.push(['setDocumentTitle', 'PageViewEvent']);

                //Set user id to equal the user token
                //$window._paq.push(['setUserId', TokenSvc.getToken().getAccessToken().toString()]);

                $window._paq.push(['setTrackerUrl', piwikUrl]);

                //Add site code. It should be   <tenant>.<siteCode>
                $window._paq.push(['setSiteId', GlobalData.store.tenant + '.' + GlobalData.getSiteCode()]);

                $window._paq.push(['trackPageView']);
                $window._paq.push(['enableLinkTracking']);

            };

            /**
            * Method that is setting current url
            */
            var setCustomUrl = function () {
                if (!!$window._paq) {
                    $window._paq.push(['setCustomUrl', $window.document.URL]);
                }
            };

            /**
            * User viewed product
            */
            var setProductViewed = function (sku, name, category, price) {
                if (!!$window._paq) {
                    //Wait current digest loop to finish, and then when the page is changed update values to PIWIK
                    $timeout(function () {
                        setCustomUrl();

                        $window._paq.push(['setEcommerceView',
                            sku, //(required) SKU: Product unique identifier
                            name, //(optional) Product name
                            category, //(optional) Product category, or array of up to 5 categories
                            price //(optional) Product Price as displayed on the page
                        ]);

                        $window._paq.push(['trackPageView', 'ProductDetailPageViewEvent']);
                    });
                }
            };

            /**
            * User viewed category
            */
            var setCategoryViewed = function (categoryPage) {
                if (!!$window._paq) {
                    //Wait current digest loop to finish, and then when the page is changed update values to PIWIK
                    $timeout(function () {
                        setCustomUrl();

                        $window._paq.push(['setEcommerceView',
                            false, //No product on Category page
                            false, //No product on Category page
                            categoryPage // Category Page, or array of up to 5 categories
                        ]);

                        $window._paq.push(['trackPageView', 'CategoryPageViewEvent']);
                    });
                }
            };

            /**
            * User searched event
            */
            //Category missing? There is no way to set SearchEvent and SearchNoResultsEvent as action_view
            var searchEvent = function (searchTerm, numberOfResults) {
                if (!!$window._paq) {
                    if (numberOfResults > 0) {
                        $window._paq.push(['trackSiteSearch',
                            searchTerm,
                            false, //This is search category selected in our search. At the moment we dont have this
                            numberOfResults
                        ]);
                    }
                    else {
                        $window._paq.push(['trackSiteSearch',
                            searchTerm,
                            false, //This is search category selected in our search. At the moment we dont have this
                            0
                        ]);
                    }
                }
            };

            /**
            * User clicked on element with class  banner
            */
            var bannerClick = function (bannerId, url) {
                if (!!$window._paq) {
                    $timeout(function () {
                        setCustomUrl();
                        $window._paq.push(['setCustomVariable', 1, bannerId, url, 'page']);
                        $window._paq.push(['trackLink', 'BannerClickEvent', 'action_name']);
                    });
                }
            };

            /**
            * User updated cart
            */
            var cartUpdated = function (cart) {
                var i = 0;

                //Check if there is some item that is removed in new cart??
                if (!!internalCart.items) {
                    if (!!cart.items) {

                        var productFound = false;
                        for (i = 0; i < internalCart.items.length; i++) {
                            //Check if this item exists in new cart
                            for (var j = 0; j < cart.items.length; j++) {
                                if (internalCart.items[i].product.id === cart.items[j].product.id) {
                                    productFound = true;
                                    break;
                                }
                            }
                            if (!productFound) {
                                //If it didn't break before that means that the item is not found and deleted
                                addEcommerceItem(internalCart.items[i].product.id, internalCart.items[i].product.name, '', internalCart.items[i].itemPrice.amount, 0);
                            }
                            productFound = false;
                        }
                    }
                    else {
                        //All items are removed
                        for (i = 0; i < internalCart.items.length; i++) {
                            addEcommerceItem(internalCart.items[i].product.id, internalCart.items[i].product.name, '', internalCart.items[i].itemPrice.amount, 0);
                        }
                    }
                }

                if (!!cart.items) {
                    for (i = 0; i < cart.items.length; i++) {
                        //sku, name, categoryName, unitPrice, amount
                        var item = cart.items[i];
                        addEcommerceItem(item.product.id, item.product.name, '', item.itemPrice.amount, item.quantity);
                    }
                }

                //Records the cart for this visit
                $window._paq.push(['trackEcommerceCartUpdate', !!cart.totalPrice ? cart.totalPrice.amount : 0]); // (required) Cart amount

                //Save previous state for later comparasion (checking if objects are removed from cart)
                internalCart = cart;
            };

            /**
            * Function for adding item to cart
            */
            var addEcommerceItem = function (id, name, categoryName, unitPrice, amount) {
                if (!!$window._paq) {
                    $window._paq.push(['addEcommerceItem',
                        id, // (required) SKU: Product unique identifier
                        name, // (optional) Product name
                        categoryName, // (optional) Product category. You can also specify an array of up to 5 categories eg. ["Books", "New releases", "Biography"]
                        unitPrice, // (recommended) Product price
                        amount // (optional, default to 1) Product quantity
                    ]);
                }
            };

            /**
            * User opened checkout page
            */
            var proceedToCheckout = function (cart) {
                if (!!$window._paq) {
                    $timeout(function () {
                        setCustomUrl();

                        var cartId = !!cart.id ? cart.id : '';
                        $window._paq.push(['setCustomVariable', 1, 'cart_id', cartId, 'page']);
                        $window._paq.push(['trackLink', 'ProceedToCheckoutEvent', 'action_name']);
                    });
                }
            };

            /**
            * User created order
            */
            var orderPlaced = function (orderId, orderGrandTotal, orderSubTotal, taxAmount, shippingAmount, isDiscountOffered) {
                if (!!$window._paq) {
                    $window._paq.push(['trackEcommerceOrder',
                        orderId, // (required) Unique Order ID
                        orderGrandTotal, // (required) Order Revenue grand total (includes tax, shipping, and subtracted discount)
                        orderSubTotal, // (optional) Order sub total (excludes shipping)
                        taxAmount, // (optional) Tax amount
                        shippingAmount, // (optional) Shipping amount
                        isDiscountOffered // (optional) Discount offered (set to false for unspecified parameter)
                    ]);
                }
            };

            /**
            * User created order
            */
            var customerLogIn = function () {
                if (!!$window._paq) {
                    $window._paq.push(['trackPageView', 'CustomerLogin']);
                }
            };

            return {
                cartUpdated: cartUpdated,
                init: init,
                addEcommerceItem: addEcommerceItem,
                orderPlaced: orderPlaced,
                setProductViewed: setProductViewed,
                setCategoryViewed: setCategoryViewed,
                setCustomUrl: setCustomUrl,
                searchEvent: searchEvent,
                bannerClick: bannerClick,
                proceedToCheckout: proceedToCheckout,
                customerLogIn: customerLogIn
            };
        }]);

/*
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2014 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.ysearch', ['algoliasearch'])
    .directive('ysearch', function () {
        return {
            controller: 'ysearchController',
            restrict: 'E',
            scope: {
                parametersToReturn: '=?returnParameters',
                page: '=?page',
                searchString: '=?searchString'
            },
            replace: true,
            templateUrl: 'js/app/shared/templates/ysearch.html'
        };
    });

angular.module('ds.ysearch')
    .controller('ysearchController', ['$scope', '$rootScope', '$state', 'ysearchSvc', 'GlobalData', function (scope, $rootScope, $state, ysearchSvc, GlobalData) {

        if (!scope.page) {
            scope.page = 0;
        }
        if (!scope.searchString) {
            scope.searchString = '';
        }
        scope.search = {
            text: scope.searchString,
            results: [],
            numberOfHits: 0,
            showSearchResults: false,
            searchAvailable: false,
            searchError: false,
            zeroResults: false
        };

        scope.yglyphiconVisible = false;

        //Init of algolia search service
        ysearchSvc.init().then(function () {
            scope.search.searchAvailable = ysearchSvc.getActiveStatus();
        });

        scope.showSearchResults = function () {
            // load the currency before displaying the search results
            // to ensure we get the current site's one
            scope.currency = GlobalData.getCurrency();
            scope.currencySymbol = GlobalData.getCurrencySymbol();

            scope.search.showSearchResults = true;
            if (scope.search.text !== '') {
                if (scope.search.results.length === 0) {
                    scope.doSearch(scope.search.text, 0);
                }
            }
        };

        scope.hideSearchResults = function () {
            $rootScope.closeOffcanvas();
            scope.search.showSearchResults = false;
        };

        //Used for checking if the user left te search field
        angular.element(document)
            .bind('mouseup', function (e) {
                var container = angular.element('.y-search');
                if (!container.is(e.target) && container.has(e.target).length === 0) {
                    scope.search.showSearchResults = false;
                    //Used to apply changes for showSearchResults
                    scope.$digest();
                }
            });

        scope.doSearch = function () {
            scope.search.showSearchResults = true;
            if (scope.search.text === '') {
                scope.search.showSearchResults = false;
                scope.search.results = [];
                scope.search.numberOfHits = 0;
            }
            else {
                ysearchSvc.getResults(scope.search.text, { hitsPerPage: 5, page: 0 })
                    .then(function (content) {
                        if (content.query !== scope.search.text) {
                            // do not take out-dated answers into account
                            return;
                        }
                        //Hide error only when search was ok
                        scope.search.searchError = false;
                        scope.search.numberOfHits = content.nbHits;
                        scope.search.results = content.hits;
                        scope.search.searchError = false;

                        if (content.hits.length === 0) {
                            scope.search.zeroResults = true;
                        }
                        else {
                            scope.search.zeroResults = false;
                        }
                    }, function () {
                        //Show error that search didn't perform correctly.
                        scope.search.searchError = true;
                    });
            }
        };

        scope.goToResultsPage = function () {
            if (scope.search && scope.search.text && scope.search.text.length) {
                scope.hideSearchResults();
                $state.go('base.search', { searchString: scope.search.text });
            }
        };
    }]);


angular.module('ds.ysearch')
    .factory('ysearchSvc', ['algolia', 'ysearchREST', '$q', function (algolia, ysearchREST, $q) {
        var client, index, algoliaConfiguration;
        var active = false;

        var init = function () {
            var promise = $q.when(getAlgoliaConfiguration());
            promise.then(function (config) {
                if (!config.algoliaCredentials) {
                    config.algoliaCredentials = {
                        applicationId: '',
                        searchKey: '',
                        indexName: ''
                    };
                }
                if (!!config.activation) {
                    active = config.activation;
                }
                client = algolia.Client(config.algoliaCredentials.applicationId, config.algoliaCredentials.searchKey, { method: 'https' });
                index = client.initIndex(config.algoliaCredentials.indexName);
            });
            return promise;
        };

        var getActiveStatus = function () {
            return active;
        };

        var getAlgoliaConfiguration = function () {
            if (!!algoliaConfiguration) {
                return algoliaConfiguration;
            }
            else {
                algoliaConfiguration = ysearchREST.AlgoliaSettings.all('project').get('configuration');
            }
            return algoliaConfiguration;
        };

        var getResults = function (searchString, parameters) {
            if (index) {
                return index.search(searchString, parameters);
            }
            else {
                return init()
                        .then(function () {
                            return index.search(searchString, parameters);
                        });
            }
        };

        return {
            init: init,
            getActiveStatus: getActiveStatus,
            getResults: getResults
        };
    }]);

angular.module('ds.ysearch')
    .factory('ysearchREST', ['SiteConfigSvc', 'Restangular', function (siteConfig, Restangular) {
        return {
            AlgoliaSettings: Restangular.withConfig(function (RestangularConfigurer) {
                RestangularConfigurer.setBaseUrl(siteConfig.apis.indexing.baseUrl);
            })
        };
    }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.auth')
.directive('popOver', ['$compile', '$controller', function ( $compile, Controller) {

    var getController = function getController(controllerInstance, scope)
    {
        var controller;
        var controlsLocals = {
            loginOpts: {},
            showAsGuest: false
        };

        controlsLocals.$scope = scope;

        controller = new Controller(controllerInstance, controlsLocals);
        return controller;
    };

    return {
        restrict: 'A',
        scope:{
            templateUrl:'@',
            popoverClass:'@',
            popoverController:'@'
        },

        link: function (scope, element) {

            var template = '';
            $.ajax({url:scope.templateUrl}).done(
                function(data){
                    template =  ('<div class="popover '+ scope.popoverClass + '" role="tooltip"><div class="arrow"></div><div class="glyphicon glyphicon-remove js-closePopover popoverCloseBtn pull-right" aria-hidden="true"></div><div class="clear"></div><div class="popover-content"></div></div>');
                    var options = {
                        trigger: 'click',
                        html: true,
                        template:template,
                        content:  $compile(data)(scope)
                    };

                    $(element).popover(options).addClass(scope.popoverClass);


                    $(element).on('shown.bs.popover', function(){
                        getController(scope.popoverController, scope);
                        scope.$digest();
                    });

                    $(document).on('click', '.js-closePopover', function(){
                        $(element).popover('hide');
                    });

                    $('html').on('click', function (e) {
                        //the 'is' for buttons that trigger popups
                        //the 'has' for icons within a button that triggers a popup
                        if (!$(element).is(e.target) && $(element).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
                            $(element).popover('hide');
                        }
                    });

                });

        }
    };
}]);

/*
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

var regExpValidators = {
    url: new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/),
    email: new RegExp(/[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/),
    id: new RegExp(/^[0-9a-zA-Z-_]+$/),
    name: new RegExp(/^[0-9a-zA-Z-\s]+$/),
    password: new RegExp(/[\x00-\x7F]+/),
    description: new RegExp(/[\x00-\x7F]+/),
    date: new RegExp(/[\w]+/),
    keys: new RegExp(/^[.\-_a-zA-Z0-9:§]+$/),
    apiVersion: new RegExp(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/),
};

angular.module('ds.security', [])
    .directive('builderInput', function () {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attr, ctrl) {
                scope.$watch(attr.ngModel, function () {
                    if (ctrl.$viewValue) {
                        var isValid = regExpValidators[attr.builderInput].test(ctrl.$viewValue);
                        ctrl.$setValidity('regexpFilter', isValid);
                    }
                });
            }
        };
    });


/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';
//Used for determing the current visible items indexes
//It is checking if the details (name and price) part of item is visible
angular.module('ds.shared')
    .directive('stopEvent', [function () {
        return {
          restrict: 'A',
          link: function (scope, element, attr) {
            element.on(attr.stopEvent, function (e) {
              e.stopPropagation();
            });
          }

        };
    }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */
(function () {
    'use strict';

    angular.module('ds.shared')
        .directive('forceScroll', [function () {
            return {
                restrict: 'M',
                scope: false,
                controller: ['$rootScope', '$scope', function ($rootScope, $scope) {
                    $rootScope.forceScroll = true;

                    $scope.$on('$destroy', function () {
                        $rootScope.forceScroll = false;
                    });
                }]
            };
        }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2014 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
    .controller('SiteSelectorController', ['$scope', 'GlobalData', 'SiteSelectorSvc',
        function ($scope, GlobalData, SiteSelectorSvc) {

            $scope.sites = GlobalData.getSites();
            $scope.selectedSite = GlobalData.getSite();
            $scope.hoveredSite = {};
            $scope.selectedLanguage = function () {
                return GlobalData.getLanguageCode();
            };

            $scope.setHoveredSite = function (site) {
                $scope.hoveredSite = site;
            };

            $scope.selectSiteAndLanguage = function (site, language) {
                var previousCode = $scope.selectedSite.code;
                var previousLanguage = $scope.selectedLanguage();

                $scope.selectedSite = site;

                //Only apply changes if site or language changed
                if (previousCode !== $scope.selectedSite.code) {
                    //Update cart and etc. and use choosen language
                    SiteSelectorSvc.changeSite(site, language);
                }
                else {
                    //If site is not changed, only change language
                    if (previousLanguage !== language) {
                        GlobalData.setLanguage(language);
                    }
                }
            };
        }
    ]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */


(function () {
    'use strict';

    angular.module('ds.shared')
        .directive('siteSelector', function () {
            return {
                restrict: 'E',
                controller: 'SiteSelectorController',
                templateUrl: 'js/app/shared/directives/site-selector/site-selector.html'
            };
        });

})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
    .factory('SiteSelectorSvc', ['GlobalData', 'CartSvc', 'SiteSettingsREST',
        function (GlobalData, CartSvc, SiteSettingsREST) {
            
            return {

                /**
                 * Method that is used to change current site on storefront
                 */
                changeSite: function (site, languageCode) {
                    SiteSettingsREST.SiteSettings.one('sites', site.code).get({ expand: 'payment:active,tax:active,mixin:*' }).then(function (result) {
                        GlobalData.setSite(result, languageCode);
                        GlobalData.setSiteCookie(result);
                    });

                }

            };
        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates management of the OAuth token and user name, using cookies.
 */
angular.module('ds.shared')
    .factory('CookieSvc', ['settings', 'ipCookie', function(settings, ipCookie){

        var defaultExpirySeconds = 100000;

        var LanguageCookie = function(languageCode) {
            this.languageCode = languageCode;
            this.getLanguageCode = function () {
                return this.languageCode;
            };
        };

        var SiteCookie = function (site) {
            this.site = site;
            this.getSite = function () {
                return this.site;
            };
        };

        var ConsentReferenceCookie = function(consentReference) {
            this.consentReference = consentReference;
            this.getConsentReference = function () {
                return this.consentReference;
            };
        };

        var CookieSvc = {

            setLanguageCookie: function (languageCode, expiresIn) {
                ipCookie.remove(settings.languageCookie);
                var languageCookie = new LanguageCookie(languageCode);
                ipCookie(settings.languageCookie, JSON.stringify(languageCookie), {expirationUnit: 'seconds', expires: expiresIn ? epiresIn : defaultExpirySeconds, secure: false});
            },

            getLanguageCookie: function () {
                var languageCookie = ipCookie(settings.languageCookie);
                return languageCookie ? new LanguageCookie(languageCookie.languageCode) : false;
            },

            setSiteCookie: function (site, expiresIn) {
                ipCookie.remove(settings.siteCookie);
                var siteCookie = new SiteCookie(site);
                ipCookie(settings.siteCookie, JSON.stringify(siteCookie), { expirationUnit: 'seconds', expires: expiresIn ? expiresIn : defaultExpirySeconds, secure: false});
            },

            getSiteCookie: function () {
                var siteCookie = ipCookie(settings.siteCookie);
                if (siteCookie) {
                    return siteCookie.site;
                }
                return siteCookie;
            },

            setConsentReferenceCookie: function(consentReference, expiresIn) {
                ipCookie.remove(settings.consentReferenceCookie);
                var consentReferenceCookie = new ConsentReferenceCookie(consentReference);
                ipCookie(settings.consentReferenceCookie, JSON.stringify(consentReferenceCookie), { expirationUnit: 'seconds', expires: expiresIn ? expiresIn : defaultExpirySeconds });
            },

            getConsentReferenceCookie: function() {
                var consentReferenceCookie = ipCookie(settings.consentReferenceCookie);
                if (consentReferenceCookie) {
                    return consentReferenceCookie.consentReference;
                }
                return consentReferenceCookie;
            }

        };

        return CookieSvc;

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
/** Acts as global data store for application settings. In contrast to the "settings" constant provider,
 * these settings may change over the life of the application.
 *
 * Also provides some logic around updating these settings.
 * */
    .factory('GlobalData', ['appConfig', '$translate', 'CookieSvc', '$rootScope', 'translateSettings', 'settings',
        function (appConfig, $translate, CookieSvc, $rootScope, translateSettings, settings) {


            var sites, currentSite;

            var languageCode;
            var defaultLang = 'en';
            var languageMap = {};
            var availableLanguages = {};
            // HTTP accept-languages header setting for service calls
            var acceptLanguages;

            var storeDefaultCurrency;
            var activeCurrencyId;
            var availableCurrency = {};


            // for label translation, we're limited to what we're providing in localization settings in i18
            function setTranslateLanguage(langCode) {
                if (settings.translateLanguages.indexOf(langCode) > -1) {
                    $translate.use(langCode);
                } else if (translateSettings.supportedLanguages.indexOf(defaultLang) > -1) {
                    $translate.use(defaultLang);
                } else {
                    $translate.use(translateSettings.defaultLanguageCode);
                }
            }

            /**
            * Used for getting the language object from language id.
            */
            function getLanguageById(id) {
                switch (id) {
                    case 'en':
                        return { id: id, label: 'English' };
                    case 'de':
                        return { id: id, label: 'German' };
                    default:
                        return { id: id, label: id };
                }
            }

            function setLanguageWithOptionalCookie(newLangCode, setCookie, updateSource) {
                if (!_.isEmpty(languageMap)) {
                    if (newLangCode && newLangCode in languageMap) {

                        if (setCookie) {
                            CookieSvc.setLanguageCookie(newLangCode);
                        }

                        if (languageCode !== newLangCode) {
                            languageCode = newLangCode;
                            acceptLanguages = (languageCode === defaultLang ? languageCode : languageCode + ';q=1,' + defaultLang + ';q=0.5');
                            if (updateSource !== settings.eventSource.initialization) { // don't event on initialization
                                $rootScope.$emit('language:updated', {
                                    languageCode: languageCode,
                                    source: updateSource
                                });
                            }
                        }
                        setTranslateLanguage(languageCode);
                    } else {
                        console.warn('Language not valid: ' + newLangCode);
                        if (defaultLang && defaultLang in languageMap) {
                            console.log('Using default language instead: ' + defaultLang);
                            setLanguageWithOptionalCookie(defaultLang, setCookie, updateSource);
                        } else {
                            console.error('No default language defined.');
                        }
                    }
                }
            }

            return {
                orders: {
                    meta: {
                        total: 0
                    }
                },
                products: {
                    meta: {
                        total: 0
                    },
                    pageSize: 8,
                    lastSort: '',
                    lastViewedProductId: ''
                },
                addresses: {
                    meta: {
                        total: 0
                    }
                },

                store: {
                    tenant: appConfig.storeTenant(),
                    clientId: appConfig.clientId(),
                    redirectURI: appConfig.redirectURI(),
                    name: '',
                    logo: null,
                    icon: null
                },

                user: {
                    isAuthenticated: false,
                    username: null
                },

                search: {
                    algoliaKey: '',
                    algoliaProject: 'MSSYUK0R36'
                },

                /** Returns the currency symbol of the active currency.*/
                getCurrencySymbol: function (optionalId) {
                    var id = optionalId || activeCurrencyId;
                    var symbol = '?';
                    if (id === 'USD' || id === 'CAD') {
                        symbol = '$';
                    }
                    else if (id === 'EUR') {
                        symbol = '\u20AC';
                    }
                    else if (id === 'GBP') {
                        symbol = '\u20A4';
                    }
                    else if (id === 'JPY' || id === 'CNY') {
                        symbol = '\u00A5';
                    }
                    else if (id === 'PLN') {
                        symbol = '\u007A' + '\u0142';
                    }
                    else if (id === 'CHF') {
                        symbol = 'CHF';
                    }

                    return symbol;
                },

                /** Sets the code of the language that's supposed to be active for the store.*/
                setLanguage: function (newLangCode, updateSource) {
                    setLanguageWithOptionalCookie(newLangCode, true, updateSource ? updateSource : settings.eventSource.unknown);
                },

                /** Returns the language code that's currently active for the store.*/
                getLanguageCode: function () {
                    return languageCode;
                },

                /** Returns the active language instance.*/
                getLanguage: function () {
                    return languageMap[languageCode];
                },

                /** Returns the 'accept-languages' header for the application.*/
                getAcceptLanguages: function () {
                    return acceptLanguages;
                },

                /** Determines the initial active language for the store, based on store configuration and
                 * any existing cookie settings. */
                loadInitialLanguage: function () {
                    var languageCookie = CookieSvc.getLanguageCookie();
                    if (languageCookie && languageCookie.languageCode) {
                        setLanguageWithOptionalCookie(languageCookie.languageCode, false, settings.eventSource.initialization);
                    } else {
                        setLanguageWithOptionalCookie(languageCode, true, settings.eventSource.initialization);
                    }
                },

                /** Sets the currency id that's supposed to be active for this store and stores it to a
                 * cookie.
                 * If the id is not part of the "available" currencies, the update will be silently rejected.
                 * @param object with property id === currency id; if property setCookie === true, setting will
                 * be written to cookie (if valid)*/
                setCurrency: function (currency) {
                    if (currency !== activeCurrencyId) {
                        activeCurrencyId = currency;
                    }
                },

                /** Determines the initial active site for the store, based on store configuration and
                * any existing cookie settings. */
                loadInitialSite: function () {
                    var siteCookie = CookieSvc.getSiteCookie();
                    return siteCookie;
                },

                /** Returns the id of the currency that's currently active for the store.*/
                getCurrencyId: function () {
                    return activeCurrencyId;
                },

                /** Returns the active currency instance.*/
                getCurrency: function () {
                    return activeCurrencyId;
                },

                /** Sets an array of currency instances from which a shopper should be able to choose.*/
                setAvailableCurrency: function (currency) {

                    if (currency) {
                        availableCurrency = currency;
                        storeDefaultCurrency = currency;
                    }
                    if (!storeDefaultCurrency) {
                        console.error('No default currency defined!');
                    }
                },

                /** Returns an array of currency instances supported by this project.*/
                getAvailableCurrency: function () {
                    return availableCurrency;
                },

                /** Sets an array of language instances from which a shopper should be able to choose.*/
                setAvailableLanguages: function (languages) {
                    if (languages) {
                        availableLanguages = [];

                        angular.forEach(languages, function (language) {
                            languageMap[language.id] = language;

                            availableLanguages.push(language);
                        });
                    }
                    if (!defaultLang) {
                        console.error('No default language has been defined!');
                    }
                },

                setDefaultLanguage: function (lang) {
                    defaultLang = lang.id;
                },

                /** Returns an array of language instances supported by this project.*/
                getAvailableLanguages: function () {
                    return availableLanguages;
                },

                setSiteCookie: function (site) {
                    var cookieSite = { code: site.code };
                    CookieSvc.setSiteCookie(cookieSite);
                },

                setSite: function (site, selectedLanguageCode) {
                    if (!currentSite || currentSite.code !== site.code) {

                        //Set current site
                        currentSite = site;

                        //Set name of store
                        this.store.name = site.name;
                        $rootScope.titleConfig = site.name;

                        //Set stripe key if defined
                        if (!!site.payment && site.payment.length > 0 && !!site.payment[0].configuration && !!site.payment[0].configuration.public && !!site.payment[0].configuration.public.publicKey) {
                            /* jshint ignore:start */
                            Stripe.setPublishableKey(site.payment[0].configuration.public.publicKey);
                            /* jshint ignore:end */
                        }

                        //Set main image
                        if (!!site.mixins && !!site.mixins.storeLogoImageKey &&
                            !!site.mixins.storeLogoImageKey.value) {
                            this.store.logo = site.mixins.storeLogoImageKey.value;
                        }
                        else {
                            //Delete this property and make store fallback to default
                            delete this.store.logo;
                        }

                        //Set site icon
                        if (!!site.mixins && !!site.mixins.storeIconImageKey &&
                            !!site.mixins.storeIconImageKey.value) {
                            this.store.icon = site.mixins.storeIconImageKey.value;
                        }
                        else {
                            //Delete this property and make store fallback to default
                            delete this.store.icon;
                        }

                        //Create array
                        if (site.currency) {
                            if (site.currency !== this.getCurrencyId()) {
                                this.setAvailableCurrency(site.currency);
                                this.setCurrency(site.currency);
                            }
                        }

                        //Set languages
                        var languages = [];
                        if (!!site.languages) {
                            for (var i = 0; i < site.languages.length; i++) {
                                languages.push(getLanguageById(site.languages[i]));
                            }
                        }
                        this.setAvailableLanguages(languages);

                        //Set default language
                        if (selectedLanguageCode) {
                            setLanguageWithOptionalCookie(selectedLanguageCode, true, settings.eventSource.siteUpdate);
                        }

                        //Emit site change for cart
                        $rootScope.$broadcast('site:updated');
                    }
                },

                setSites: function (Sites) {
                    var storefrontSites = [];
                    for (var i = 0; i < Sites.length; i++) {
                        storefrontSites.push(Sites[i]);
                    }
                    sites = storefrontSites;
                },

                getSite: function () {
                    if (!!currentSite) {
                        return currentSite;
                    }
                    else {
                        return CookieSvc.getSiteCookie();
                    }
                },

                getSiteCode: function () {
                    if (!!currentSite) {
                        return currentSite.code;
                    }
                    return 'default';
                },

                getSites: function () {
                    return sites;
                },

                getTaxType: function () {
                    if (!!currentSite && !!currentSite.tax && !!currentSite.tax[0]) {
                        return currentSite.tax[0].id;
                    }
                    return null;
                },

                getCurrentTaxConfiguration: function () {
                    if (!!currentSite && !!currentSite.tax && !!currentSite.tax[0] && currentSite.tax[0].id === 'FLATRATE' && !!currentSite.tax[0].configuration) {
                        return currentSite.tax[0].configuration.public;
                    }
                    else {
                        return null;
                    }
                },

                getSiteBanners: function () {
                    if (!!currentSite && !!currentSite.mixins) {
                        return currentSite.mixins.siteContentDetails;
                    }
                    return null;
                },

                getEmailRegEx: function () {
                    return (/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i);

                },

                getUserTitles: function () {
                    return ['', 'MR', 'MS', 'MRS', 'DR'];
                },

                getProductRefinements: function () {
                    return [{id: 'name', name: 'A-Z'}, {id: 'name:desc', name: 'Z-A'}, {id: 'metadata.createdAt:desc', name: $translate.instant('NEWEST')}];
                },

                getSearchRefinements: function () {
                    return [{id:'mostRelevant', name: $translate.instant('MOST_RELEVANT')}];
                },

                getTaxableCountries: function () {
                    return [{id:'US', name: 'USA'}, {id:'CA', name: 'CANADA'}];
                }

            };

        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates access to the configuration service.
 */
angular.module('ds.shared')
    .factory('ConfigSvc', ['$rootScope', '$q', 'settings', 'GlobalData', 'AuthSvc', 'AccountSvc', 'CartSvc', 'CategorySvc', 'SiteSettingsREST',
        function ($rootScope, $q, settings, GlobalData, AuthSvc, AccountSvc, CartSvc, CategorySvc, SiteSettingsREST) {
            var initialized = false;
            var selectedSiteCode = '';

            /**
            * Returns default or first site from sites array.
            */
            function getDefaultSite(sites) {
                for (var i = 0; i < sites.length; i++) {
                    if (sites[i].default) {
                        return sites[i];
                    }
                }
                return sites[0];
            }

            /**
            * Check if there is site in sites with specified code.
            */
            function siteExists(sites, code) {
                for (var i = 0; i < sites.length; i++) {
                    if (sites[i].code === code) {
                        return true;
                    }
                }
                return false;
            }

            /**
             * Loads the store configuration settings - store name and logo.
             * These settings are then stored in the GlobalData service.
             * Returns promise once done.
             */
            function loadConfiguration() {

                /**
                * Get default site for the moment
                */
                var configPromise = SiteSettingsREST.SiteSettings.all('sites').getList({});
                configPromise.then(function (sites) {

                    //Check if there is already default site in memory or cookies and if that one is valid one (exists in returned array)
                    var result;
                    var site = GlobalData.getSite();
                    if (!!site && siteExists(sites, site.code)) {
                        result = site;
                    }
                    else {
                        //If not, then use default one from returned array of sites
                        result = getDefaultSite(sites);

                        //Save selected site as cookie
                        GlobalData.setSiteCookie(result);
                    }

                    selectedSiteCode = result.code;
                    GlobalData.setSites(sites);

                    //TODO: Missing implementation for Algolia key
                    //GlobalData.search.algoliaKey = value;

                }, function (error) {
                    console.error('Store settings retrieval failed: ' + JSON.stringify(error));
                    // no point trying to localize, since we couldn't load language preferences
                    window.alert('Unable to load store configuration.  Please refresh!');
                });


                /**
                * Get login config (Facebook and Google)
                */
                var loginConfigPromise = AuthSvc.getFBAndGoogleLoginKeys();
                loginConfigPromise.then(function (result) {

                    if (!!result.facebookAppId) {
                        settings.facebookAppId = result.facebookAppId;
                    }
                    if (!!result.googleClientId) {
                        settings.googleClientId = result.googleClientId;
                    }
                }, function (error) {
                    console.error('Facebook and Google key retrieval failed: ' + JSON.stringify(error));
                });

                return $q.all([configPromise]);
            }


            return {

                /**
                 * Returns an empty promise that is resolved once the app has been initialized with all essential data.
                 */
                initializeApp: function () {
                    var def = $q.defer();
                    if (initialized) {
                        def.resolve({});
                    } else {
                        loadConfiguration(GlobalData.store.tenant).then(function () {

                            var siteSettingPromise = SiteSettingsREST.SiteSettings.one('sites', selectedSiteCode).get({ expand: 'payment:active,tax:active,mixin:*' });
                            siteSettingPromise.then(function (site) {

                                //Set site and load initial language
                                GlobalData.setSite(site);
                                GlobalData.loadInitialLanguage();

                                if (AuthSvc.isAuthenticated()) {
                                    // if session still in tact, load user preferences
                                    AccountSvc.account().then(function (account) {
                                        CategorySvc.getCategories().then(function () {
                                            def.resolve({});
                                        });

                                        return account;
                                    }).then(function (account) {
                                        if(account) {
                                            CartSvc.refreshCartAfterLogin(account.id);
                                        }
                                    });
                                } else {
                                    CategorySvc.getCategories().then(function () {
                                        def.resolve({});
                                    });

                                    //We are getting cart with siteChange that happens on load
                                    //CartSvc.getCart(); // no need to wait for cart promise to resolve

                                }
                                initialized = true;
                            });
                        }, function (error) {
                            console.error('Store settings retrieval failed: ' + JSON.stringify(error));
                            // no point trying to localize, since we couldn't load language preferences
                            window.alert('Unable to load store configuration.  Please refresh!');
                        });
                    }
                    return def.promise;
                }


            };
        }]);

/*
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
    .factory('SiteSettingsREST', ['Restangular', 'SiteConfigSvc', function (Restangular, siteConfig) {

        return {
            SiteSettings: Restangular.withConfig(function (RestangularConfigurer) {
                RestangularConfigurer.setBaseUrl(siteConfig.apis.siteSettings.baseUrl);
            })
        };

    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.queue', [])
    .factory('httpQueue', ['$injector', function($injector) {


        /** Holds all the "blocked" requests, so they can be re-requested in future. */
        var blockedBuffer = [];
        var rejectedBuffer = [];
        var authHeader = 'Authorization';
        /** Service initialized later because of circular dependency problem. */
        var $http, $translate;
        // keeps track of the last reject per URL
        var lastRejectTime = {};

        /** Submit requests that were never sent because of missing token.*/
        function retryBlockedHttpRequest(config, deferred) {
            deferred.resolve(config);
        }

        /** Resubmit requests that resulted in 401 due to rejected token. */
        function retryRejectedHttpRequest(config, deferred) {

            function successCallback(response) {
                deferred.resolve(response);
            }

            function errorCallback(response) {
                deferred.reject(response);
            }

            var lastTime = lastRejectTime[config.url];
            // If same URL was rejected less than 10 seconds ago, don't try again (this is meant to prevent a
            // retry loop where the root cause is not being fixed and otherwise, we would attempt to submit the
            // same failing request over and over.
            if(lastTime && new Date().getTime() - lastTime < 10000) {
                var $state = $injector.get('$state');
                $translate = $translate || $injector.get('$translate');
                $translate('SERVER_UNAVAILABLE').then(function(value){
                    console.error(value);
                });
                deferred.reject('Too soon to retry');
                $state.go('errors', { errorId : '401' });
            } else {
                lastRejectTime[config.url] = null;
                $http = $http || $injector.get('$http');
                $http(config).then(successCallback, errorCallback);
            }
        }

        function setToken(config, token){
            config.headers[authHeader] = 'Bearer ' + token;
        }

    return {
        /**
         * Appends HTTP request configuration object with deferred response -
         * use for requests that were never sent due to missing token.
         */
        appendBlocked: function (config, deferred) {
            blockedBuffer.push({
                config: config,
                deferred: deferred
            });
        },

        /**
         * Appends HTTP request configuration object with deferred response -
         * use for requests that were rejected by the service due to an invalid token.
         */
        appendRejected: function (config, deferred) {
            rejectedBuffer.push({
                config: config,
                deferred: deferred
            });
            lastRejectTime[config.url]= new Date().getTime();
        },

        /**
         * Abandon or reject (if reason provided) all the buffered requests.

        rejectAllRejected: function (reason) {
            if (reason) {
                for (var i = 0; i < rejectedBuffer.length; ++i) {
                    rejectedBuffer[i].deferred.reject(reason);
                }
            }
            rejectedBuffer = [];
        },*/

        /**
         * Retries all the buffered requests clears the buffer.
         * @param new token
         */
        retryAll: function (token) {
            var buff = blockedBuffer;

            for (var i = 0; i < buff.length; ++i) {
                setToken(buff[i].config, token);
                retryBlockedHttpRequest(buff[i].config, buff[i].deferred);
            }
            blockedBuffer = [];

            buff = rejectedBuffer;
            for (i = 0; i < buff.length; ++i) {
                setToken(buff[i].config, token);
                retryRejectedHttpRequest(buff[i].config, buff[i].deferred);
            }
            rejectedBuffer = [];
        }
    };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**
 *  Encapsulates complex event logic, such as reloading states or reloading objects that are not specific to a particular page.
 */
angular.module('ds.shared')
    .factory('EventSvc', ['$state', '$stateParams', 'settings', 'CartSvc', 'CategorySvc',
        function ($state, $stateParams, settings, CartSvc, CategorySvc) {

            return {

                /**
                 * Handle "site changed".
                 */
                onSiteChange: function () {

                    CartSvc.getCart();

                    if ($state.is('base.checkout.details') || $state.is('base.category') || $state.is('base.product.detail')) {
                        $state.transitionTo($state.current, $stateParams, {
                            reload: true,
                            inherit: true,
                            notify: true
                        });
                    }
                },

                /**
                 * Handle "language changed".
                 * @param eve language changed event
                 * @param eveObj - property: languageCode
                 */
                onLanguageChange: function (eve, eveObj) {

                    // cart is already loaded on login, initialization and siteChange - no need for separate refresh
                    if (eveObj.source !== settings.eventSource.login && eveObj.source !== settings.eventSource.initialization && eveObj.source !== settings.eventSource.siteUpdate) {
                        CartSvc.getCart();
                    }
                    // Any state that requires an updated localized data load should be refreshed (with exception of checkout,
                    //   as cart update is handled separately due to its global nature)
                    CategorySvc.getCategories(settings.eventSource.languageUpdate).then(function () {
                        if ($state.is('base.category') || $state.is('base.product.detail')) {
                            $state.transitionTo($state.current, $stateParams, {
                                reload: true,
                                inherit: true,
                                notify: true
                            });
                        }
                    });
                }

            };
        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';


angular.module('ds.localstorage', [])
    .factory('localStorage', ['$window', function ($window) {

        var addItem = function (key, value) {
            if(localStorageSupported()){
                $window.localStorage[key] = JSON.stringify(value);
            }
        };
        var addItemToArray = function (key, value) {
            if(localStorageSupported()){
                if($window.localStorage[key] === undefined || $window.localStorage[key] === ''){
                    $window.localStorage[key] = JSON.stringify([value]);
                }
                else {
                    var obj = JSON.parse($window.localStorage[key]);
                    obj.push(value);
                    $window.localStorage[key] = JSON.stringify(obj);
                }
            }
        };

        var getItem = function (key) {
            if(localStorageSupported()){
                if($window.localStorage[key] !== undefined) {
                    return $window.localStorage[key];
                }
                else{
                    return null;
                }
            }
        };

        var getAllItems = function (key) {

            if(localStorageSupported()){
                if($window.localStorage[key] !== undefined){
                    var data = JSON.parse($window.localStorage[key]);
                    delete $window.localStorage[key];
                    return data;
                }
            }
            return [];
        };

        var localStorageSupported = function () {
            try {
                return 'localStorage' in $window && $window.localStorage !== null;
            } catch(e) {
                return false;
            }
        };

        return {
            addItem: addItem,
            addItemToArray:addItemToArray,
            getItem: getItem,
            getAllItems: getAllItems
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
/** Handles interactions in the navigation side bar.   */


    .controller('SidebarNavigationCtrl', ['$scope', '$state', '$stateParams', '$rootScope', 'GlobalData',
        'AuthSvc', 'AuthDialogManager','CategorySvc', '$translate', '$q', 'settings',

        function ($scope, $state, $stateParams, $rootScope, GlobalData,
            AuthSvc, AuthDialogManager, CategorySvc, $translate, $q, settings) {

            $scope.tenantId = GlobalData.store.tenant;

            // determines "sign-in" link in sidebar
            $scope.isAuthenticated = AuthSvc.isAuthenticated;

            $scope.user = GlobalData.user;
            $scope.categories = CategorySvc.getCategoriesFromCache();
            $scope.GlobalData = GlobalData;
            // binds logo in sidebar
            $scope.store = GlobalData.store;


            $scope.localeImages = settings.localeImages;

            var unbindCats = $rootScope.$on('categories:updated', function(eve, obj){
                if(!$scope.categories || obj.source === settings.eventSource.languageUpdate){
                    $scope.categories = obj.categories;
                }
            });



            $scope.$on('$destroy', unbindCats);

            $scope.logout = function () {
                AuthSvc.signOut();
            };

            $scope.login = function(dOpts, opts) {
                AuthDialogManager.open(dOpts, opts);
            };

            $scope.hideMobileNav = function(){
                $rootScope.showMobileNav = false;
            };

            $scope.myAccount = function() {
                $state.go('base.account');
                $scope.hideMobileNav();
            };

        }]);

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
/** Handles interactions with the top menu (mobile menu, mobile search, mobile cart & full screen cart icon) */
    .controller('TopNavigationCtrl', ['$scope', '$rootScope', '$state', '$controller', '$timeout', 'GlobalData', 'CartSvc', 'AuthSvc', 'AuthDialogManager', 'CategorySvc', 'settings', 'YGoogleSignin',

        function ($scope, $rootScope, $state, $controller, $timeout, GlobalData, CartSvc, AuthSvc, AuthDialogManager, CategorySvc, settings, YGoogleSignin) {

            $scope.GlobalData = GlobalData;
            $scope.categories = CategorySvc.getCategoriesFromCache();

            $scope.isAuthenticated = AuthSvc.isAuthenticated;
            $scope.user = GlobalData.user;

            if (AuthSvc.isGoogleLoggedIn(GlobalData.customerAccount)) {
                YGoogleSignin.getUser(settings.googleClientId).then(function (googleUser) {
                    if (googleUser.image) {
                        $scope.user.image = googleUser.image;
                    } else {
                        $scope.user.image = settings.avatarImagePlaceholder;
                    }
                });
            } else {
                $scope.user.image = settings.avatarImagePlaceholder;
            }

            var unbindCats = $rootScope.$on('categories:updated', function(eve, obj){
                if(!$scope.categories || obj.source === settings.eventSource.languageUpdate){
                    $scope.categories = obj.categories;
                }
            });


            $scope.cart =  CartSvc.getLocalCart();
            var unbind = $rootScope.$on('cart:updated', function (eve, eveObj) {
                $scope.cart = eveObj.cart;
            });


            $scope.$on('$destroy', unbind);
            $scope.$on('$destroy', unbindCats);

            /** Toggles the "show cart view" state as the cart icon is clicked. Note that this is the
             * actual cart details display, not the icon. */
            $scope.toggleCart = function () {
                if (!$rootScope.showCart) {
                    AuthDialogManager.close();
                }
                $rootScope.showCart = !$rootScope.showCart;
            };

            /** Determines if the cart icon should be displayed.*/
            $scope.isShowCartButton = function () {
                return !$state.is('base.checkout.details') && !$state.is('base.confirmation');
            };

            /** Toggles the navigation menu for the mobile view. */
            $scope.toggleOffCanvas = function () {
                $rootScope.showMobileNav = !$rootScope.showMobileNav;
            };

            $scope.logout = function() {
                AuthSvc.signOut();
            };
            
            $scope.login = function(dOpts, opts) {
                AuthDialogManager.open(dOpts, opts);
            };

            $scope.myAccount = function() {
                $state.go('base.account');
            };

        }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared').filter('encodeURIComponent', function () {
    return window.encodeURIComponent;
});
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
    .filter('showNoOfItems', ['$translate', function ($translate) {
        return function (data) {
            if (typeof (data) === 'undefined') {
                return $translate.instant('ORDER_ITEM_COUNT', { number: 0 });
            }

            if (data > 1) {
                return $translate.instant('ORDER_ITEMS_COUNT', { number: data });
            } else {
                return $translate.instant('ORDER_ITEM_COUNT', { number: data });
            }
        };
    }]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.shared')
    .filter('sumByKey', function () {
        return function (data, key) {
            if (typeof (data) === 'undefined' || typeof (key) === 'undefined') {
                return 0;
            }

            var sum = 0;
            for (var i = data.length - 1; i >= 0; i--) {
                if (!!data[i][key] && !isNaN(data[i][key])) {
                    sum += parseInt(data[i][key]);
                }
            }

            return sum;
        };
    });
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.shared')
        .factory('CommittedMediaFilter', [function () {

            function filter(media) {
                if (!angular.isArray(media)) {
                    throw new Error('Media must be an array');
                }

                return media
                    .filter(function (medium) {
                        return !medium.uncommittedMedia;
                    });
            }

            return {
                filter: filter
            };
        }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

(function () {
    'use strict';

    angular.module('ds.shared')
        .factory('MainMediaExtractor', ['CommittedMediaFilter',
            function (CommittedMediaFilter) {

                function extract(media) {
                    if (!angular.isArray(media)) {
                        return undefined;
                    }

                    return CommittedMediaFilter.filter(media).shift();
                }

                return {
                    extract: extract
                };
            }]);
})();
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.i18n', [
		'pascalprecht.translate'
	]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.i18n')
    // default and supported languages for static information only - service language preferences are set in "GlobalData" via config service
    .constant('translateSettings', {
        defaultLanguageCode: 'en',
        supportedLanguages: ['en', 'de']
    });

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

angular.module('ds.i18n')
     /** Acts as dictionary provider for localization. */
	.provider('Translation', ['$translateProvider', 'translateSettings',
		function TranslationProvider($translateProvider, translateSettings) {

		    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');

			$translateProvider.useStaticFilesLoader({
			    prefix: 'js/app/shared/i18n/lang/lang_',
			    suffix: '.json'
			});

			$translateProvider.preferredLanguage(translateSettings.defaultLanguageCode);

			this.setPreferredLanguage = function(langCode) {
			    $translateProvider.preferredLanguage(langCode || translateSettings.defaultLanguageCode);
			};

			this.$get = ['$translateProvider',
				function($translateProvider) {
					return new TranslationProvider($translateProvider);
				}
			];

		}
	]);


            

	angular.module('ds.loyalty', [
	    'ui.slider',
	    'ui.select2'
	]);



    angular.module('ds.loyalty')

        .factory('LoyaltyConfig', ['$rootScope', 

            function ($rootScope) {

                var LoyaltyConfig = {

                    pointsToCurrencyKey: 'EARNING',

                    configData : {},

                    configFlags : { 
                        showReward : 'showReward', 
                        showCashBal : 'showCashBal' ,
                        enableTellAFriend : 'enableTellAFriend'               
                    },

                    conversionType : {
                        earning : 'EARNING',
                        redeeming : 'REDEEMING'
                    },
                    
                    
                    // Dynamic Configurations

           
                    apis: {


                        core: {

                            url: '/hybris/loy-member/v1',

                            program: {
                                loyaltyPrograms: '/hybris/loy-member/v1/loyaltyPrograms',
                                tiers: '/hybris/loy-member/v1/tiers'
                            },

                            member: {
                                members: '/hybris/loy-member/v1/members',
                                activities: '/hybris/loy-member/v1/memberActivities'
                            },

                            mash: {
                                activities: '/hybris/loy-member/v1/activities',
                                registration: '/hybris/loy-member/v1/memberRegistrations'
                            },

                            discount : {
                                loyaltyDiscount : '/hybris/loy-member/v1/discount',
                                remove : '/hybris/loy-member/v1/discount/remove'
                            }
                        },


                        config: {

                            url: '/hybris/loy-config/v1/',

                            loyaltyConfig: '/hybris/loy-config/v1/laasConfigurations',
                            programConfig: '/hybris/loy-config/v1/programConfigurations'
                        },


                        engine: {

                            url: '/hybris/loy-rule/v1',

                            fireRule: '/hybris/loy-rule/v1/dummyFire',
                            rewardInfo: '/hybris/loy-rule/v1/rewardInfo',
                        },

                        
                        advocacy: {

                            url: '/hybris/loy-advocacy/v1',

                            reviewRating :'/hybris/loy-advocacy/v1/ratingReviews',
                            ratingReview: '/hybris/loy-advocacy/v1/ratingReviewMashup',
                            sendReferral :'/hybris/loy-advocacy/v1/sendReferral'
                        },

                        wallet: {
                            
                            googleWallet : '/hybris/loy-google-wallet/v1/',
                            appleWallet:'/hybris/loy-apple-wallet/v1/STORECARD/',
                            appleWalletEndPoint : '/generateWalletUrl'

                        },

                        hybrisProfile: {
                            consentReference: '/hybris/profile-consent/b2',
                            analytics: '/hybris/dev-yprofile-analytics/v1'
                        },


                    }               
                
                };

                return LoyaltyConfig;
            }
        ]);

    angular.module('ds.loyalty')

        .factory('LoyaltySvc', ['settings', 'Utilities', 'LoyaltyREST', '$injector', '$rootScope',

            function (settings, Utilities, LoyaltyREST, $injector, $rootScope) {

                var $q = $injector.get('$q');
                var AuthSvc = $injector.get('AuthSvc');
                var AccountSvc = $injector.get('AccountSvc');
                var GlobalData = $injector.get('GlobalData');
                var LoyaltyConfig = $injector.get('LoyaltyConfig');
                var $translate = $injector.get('$translate');

                var orderAmounts = {

                };

                var LoyaltyService = {

                    getProductAttributes : function (cart) {
        
                        var productAttributesArray = [];

                        var self = this;

                        var defered = $q.defer();

                        var ctr = 0;

                        angular.forEach(cart.items, function(item){

                            self.getProductDetails(item.product.id).then(function (product) {

                                ctr += 1;

                                if( angular.isArray(product.categories) && product.categories.length > 0 ){

                                    angular.forEach(product.categories, function(category){ 
                                        category.categoryId =  category.id;
                                        delete category.image;
                                        delete category.metadata;
                                        delete category.published;
                                        delete category.id;
                                    });                                
                                }


                                var productAttributesObj = {
                                    productId : item.product.id,
                                    productName : product.product.name,
                                    price : item.price.effectiveAmount,
                                    quantity  : item.quantity,
                                    imageURL : item.product.images[0].url,
                                    productCategory : product.categories,
                                    customAttributes:[]
                                };


                                productAttributesArray.push(productAttributesObj);


                                if (ctr === cart.items.length) {
                                    defered.resolve(productAttributesArray);
                                }
                            });
                        });
                                          
                        return defered.promise;
                    },

                    applyLoyaltyPoints :  function (data) {

                        var url = Utilities.getApplyDiscountUrl();
                        var defered = $q.defer();

                        LoyaltyREST.postApplyLoyaltyPoints(url, data).then (

                            function (response) {
                                defered.resolve(response);
                            }, function(response) {
                                defered.reject(response);
                            }
                         );
                        
                        return defered.promise;
                    },

                    removeLoyaltyPoints :  function (data) {

                        var url = Utilities.getRemoveDiscountUrl();
                        url = url + '/'+data.cartId + '/'+data.loyaltyDiscountId;
                        var defered = $q.defer();

                        LoyaltyREST.deleteLoyaltyPoints(url, data).then (

                            function (response) {
                                defered.resolve(response);
                            }, function(response) {
                                defered.reject(response);
                            }
                         );
                        
                        return defered.promise;
                    },


                    getCurrencyConverter: function () {

                        var converter = 0;
                        var url = Utilities.getLoyaltyConfigurationUrl(); 

                        var defered = $q.defer();

                        LoyaltyREST.getLoyaltyConfiguration(url).then (

                            function (configOb) {
                                 
                               configOb[0].conversionRatio.forEach(function(v,i){
                                 
                                     if ( v.conversionType === LoyaltyConfig.pointsToCurrencyKey && v.currencySymbol === GlobalData.getCurrencyId()) {                                          
                                          converter = v.pointValue ;                                          
                                          defered.resolve(converter);
                                     }
                               })
                            }
                         );
                        
                        return defered.promise;
                    },

                    getPointsToCurrency: function ( points, currVal ) {
                        return points * currVal;
                    },

                    getCurrencyToPoints: function ( points, currVal ) {
                        return points / currVal;                        
                    },

                    setAmountsAfterOrder: function (amount) {                          
                        orderAmounts = amount;
                    },

                    getAmountsAfterOrder: function() {                             
                       return orderAmounts;
                    },
                    
                    registerForMembership: function(customer) {

                        var url = Utilities.getMemberRegistrationUrl();
                        return LoyaltyREST.registerForMembership(url, customer);
                    },

                    getLoyaltyConfiguration: function () {
                        var url = Utilities.getLoyaltyConfigurationUrl();
                        return LoyaltyREST.getLoyaltyConfiguration(url);
                    },

                    getLoyaltyPrograms: function () {
                        var url = Utilities.getloyaltyProgramUrl() + '?pageNumber=1&pageSize=1';
                        return LoyaltyREST.getLoyaltyPrograms(url);
                    },

                    getLoyaltyProgramById: function (programId) {
                        var url = Utilities.getloyaltyProgramUrl() + '/' + programId;
                        return LoyaltyREST.getLoyaltyPrograms(url);
                    },

                    getTiersOfProgram: function (programId) {
                        var url = Utilities.getloyaltyProgramUrl() + '?q=programId:' + programId;
                        return LoyaltyREST.getTiersOfProgram(url);
                    },

                    getTierInfo: function (tierId) {
                        var url = Utilities.getTiersUrl() + '/' + tierId;
                        return LoyaltyREST.getLoyaltyPrograms(url);
                    },

                    getMemberActivities: function(membershipId, pageSize) {

                       
                        var url = Utilities.getMemberActivityUrl() + '?q=memberId:(\"' + membershipId +'\")&'+'pageSize='+pageSize+'&sort=metadata:desc';
                        return LoyaltyREST.getUserPointsAccount(url);                        
                    },

                    getMemberActivitiesForOrder : function(orderId) {
                        var url = Utilities.getMemberActivityUrl() + '?q=refId:('+ orderId +')';
                        return LoyaltyREST.getUserPointsAccount(url);                        
                    },

                    isUserMember: function(customerId) {
                        var url = Utilities.getLoyaltyMembershipUrl();
                        url += '?q=customerId:' + customerId;
                        return LoyaltyREST.getUserLoyaltyMembership(url);
                    },

                    postMemberActivity: function(activityModel) {
                        var url = Utilities.getMemberActivityPostUrl();
                        return LoyaltyREST.postMemberActivity(url, activityModel);
                    },

                    getProductDetails: function(productId) {
                        var PriceProductREST = $injector.get('PriceProductREST');
                         return PriceProductREST.ProductDetails.one('productdetails', productId).customGET('', {expand: 'media'});
                    },

                    applyCoupon: function(couponCode) {                        
                        var url = Utilities.getCouponUsageUrl() + '/' + couponCode;
                        return LoyaltyREST.applyCoupon(url);                        
                    },

                    fireDummyRule: function(dummyRuleData) {                        
                        var url = Utilities.getFireRuleUrl();
                        return LoyaltyREST.fireDummyRule(url, dummyRuleData);                        
                    },

                    sendReferralEmail : function(data) {
                        var url = Utilities.getReferralEmailUrl();
                        return LoyaltyREST.sendReferralEmail(url, data);
                    },
                    getProductReviewRating : function(productId, params) {
                        var url = Utilities.getProductReviewRatingUrl();
                        url += '?q=sku:' + productId;

                        if (params) {
                            url += '&' + params;
                        }
                        return LoyaltyREST.getProductReviewRating(url);
                    },
                    getProductReviewer : function(productId, user) {
                        var url = Utilities.getProductReviewRatingUrl();
                        url += '?q=sku:' + productId;

                        if (user) {
                            url += ' ' + user;
                        }
                        return LoyaltyREST.getProductReviewRating(url);
                    },

                    postProductReviewRating : function(data) {
                        var url = Utilities.postProductReviewRatingUrl();
                        return LoyaltyREST.postProductReviewRating(url, data);
                    },

                    getProductAvgRating: function (productId) {
                        var url = Utilities.getProductReviewRatingUrl();
                        url += '/aggr?totalCount=true&q=sku:' + '\"' + productId + '\"' + '&avg=rating';
                        return LoyaltyREST.getProductAvgRating(url);                        
                    },

                    getProductRatingCounts : function (productId) {
                        var url = Utilities.getProductReviewRatingUrl();
                        url += '/' + productId + '/ratingCount';
                        return LoyaltyREST.getProductRatingCounts(url);                        
                    },

                    getProductReviewCount: function (productId) {
                        var url = Utilities.getProductReviewRatingUrl();
                        url += '/aggr?totalCount=true&q=sku:' + productId + ' ' + 'reviewComment:""';
                        return LoyaltyREST.getProductAvgRating(url);                        
                    },




                    getFireRuleOjbect: function () {

                        return {

                            ruleType: 'ORDER',

                            memberActivity: {
                                createdBy: 'SYSTEM',
                                memberActivityId: '',
                                memberId: '',
                                quarter: 'Q_1',
                                week: 1,
                                refId: '',
                                activityType: 'ORDER',
                                transactionAmount: 0,
                                transactionCurrency: GlobalData.getCurrencyId(),
                                transactionPoints: 0,
                                qualifyingPoints: 0,
                                rulesApplied: ['TEST'],
                                programId: '',
                                tierId: '',
                                discountId: '',
                                updatedBy: 'SYSTEM',
                                activityStatus: 'ACTIVE',
                                year: '',
                                month: 'JAN'
                            },

                            member: {
                                
                            },
                            customAttributes: [],
                            productAttributes : [],
                            orderAttributes : {
                              transactionCurrency :GlobalData.getCurrencyId(),
                              total:'',
                              subTotal:'',
                              shippingAmount:'',
                              discountAmount:'',
                              shippingCountry:'',
                              shippingState:'',
                              customAttributes:[]
                            }
                        };
                    },

                    getRewardInfoData: function(memberId){

                        var url = Utilities.getRewardInfoDataUrl()+ '/' + memberId;
                        return LoyaltyREST.getRewardInfo(url); 


                    },

                    getUser: function () {

                        var self = this;

                        var deferred = $q.defer();

                        $rootScope.thisUser = {

                            isUser: false,
                            isMember: false,

                            hybrisUser: {

                            },

                            loyaltyUser: {

                            }
                        };

                        if ( AuthSvc.isAuthenticated() ) {

                            $rootScope.thisUser.isUser = true;

                            AccountSvc.account().then(

                                function (userData) {

                                    $rootScope.thisUser.hybrisUser = userData;
                                    $rootScope.thisUser.hybrisUser.fullName = $rootScope.thisUser.hybrisUser.firstName + ' ' + $rootScope.thisUser.hybrisUser.lastName;

                                    var customerId = userData.id;

                                    if ( customerId && customerId !== 'C000000000' ) {

                                       self.isUserMember(customerId).then(

                                            function (memberData) {

                                                if ( memberData.length > 0 ) {
                                                    
                                                    $rootScope.thisUser.isMember = true;
                                                    $rootScope.thisUser.loyaltyUser = memberData[0];

                                                    $rootScope.$emit('loyaltyInformation:updated', $rootScope.thisUser);
                                                }

                                                deferred.resolve( $rootScope.thisUser );
                                            }
                                        ); 
                                    } 

                                    else {
                                        deferred.resolve( $rootScope.thisUser );
                                    }                                        
                                }
                            );
                        }

                        else {
                            deferred.resolve( $rootScope.thisUser );
                        }

                        return deferred.promise;
                    },

                    getMemberData: function (customerId) {

                        var deferred = $q.defer();

                        this.isUserMember(customerId).then(

                            function (memberData) {

                                if ( memberData.length > 0 ) {
                                    
                                    $rootScope.thisUser.isMember = true;
                                    $rootScope.thisUser.loyaltyUser = memberData[0];
                                    $rootScope.$emit('loyaltyInformation:updated', $rootScope.thisUser);
                                    deferred.resolve( memberData[0] );
                                }
                            }
                        );

                        return deferred.promise;
                    },



                    
                    getConfigData :  function() {

                        var deferred = $q.defer();

                        if ( angular.isArray(LoyaltyConfig.configData) ) {
                            if(LoyaltyConfig.configData === [])
                                $rootScope.isConfigMaintained = false;
                            else
                                $rootScope.isConfigMaintained = true;
                            deferred.resolve(LoyaltyConfig.configData);
                        } else {

                            LoyaltyREST.getLoyaltyConfiguration(Utilities.getLoyaltyConfigurationUrl()).then(

                                function (configData) {

                                    LoyaltyConfig.configData = configData;
                                    if(LoyaltyConfig.configData === [])
                                        $rootScope.isConfigMaintained = false;
                                    else
                                        $rootScope.isConfigMaintained = true;
                                    deferred.resolve(configData);
                                }
                            );
                        }

                        return deferred.promise;
                    },
                    

                    getSilentGratification: function() {

                        var deferred = $q.defer();

                        this.getConfigData().then(

                            function (configData) {

                                var result = false;
                                var matchedResult = false;

                                if (configData.length > 0) {

                                    configData[0].configData.forEach(function (configOb) {

                                        if ( ! matchedResult ) {

                                            if ( configOb.name === LoyaltyConfig.configFlags.showReward ) {

                                                matchedResult = true;

                                                result =  (configOb.value === 'true');
                                                $rootScope.loyaltyConfig.showReward = result;
                                            }
                                        }
                                    });
                                    
                                    deferred.resolve(result);
                                }
                            }
                        );

                        return deferred.promise;
                    },

                    getShowCash: function() {

                        var deferred = $q.defer();

                        this.getConfigData().then(

                            function (configData) {

                                var result = false;
                                var matchedResult = false;

                                if (configData.length > 0) {

                                    configData[0].configData.forEach(function (configOb) {

                                        if ( ! matchedResult ) {

                                            if ( configOb.name === LoyaltyConfig.configFlags.showCashBal ) {

                                                matchedResult = true;

                                                result =  (configOb.value === 'true');
                                                $rootScope.loyaltyConfig.showCashBal = result;
                                            }
                                        }
                                    });

                                    deferred.resolve(result);
                                }
                            }
                        );

                        return deferred.promise;
                    },

                    getEnableTellAFriend: function() {

                        var deferred = $q.defer();

                        this.getConfigData().then(

                            function (configData) {

                                var result = false;
                                var matchedResult = false;

                                if (configData.length > 0) {

                                    configData[0].configData.forEach(function (configOb) {

                                        if ( ! matchedResult ) {

                                            if ( configOb.name === LoyaltyConfig.configFlags.enableTellAFriend ) {

                                                matchedResult = true;

                                                result =  (configOb.value === 'true');
                                                $rootScope.loyaltyConfig.enableTellAFriend = result;
                                            }
                                        }
                                    });

                                    deferred.resolve(result);
                                }
                            }
                        );

                        return deferred.promise;
                    },

                    getRedeemRatio: function() {

                        var deferred = $q.defer();

                        this.getConfigData().then(

                            function (configobj) {

                                var result = false;
                                var matchedResult = false;

                                if (configobj.length > 0) {

                                    configobj[0].conversionRatio.forEach(function (conversionOb) {

                                        if ( ! matchedResult ) {

                                            if (conversionOb.currencySymbol === GlobalData.getCurrencyId() && conversionOb.conversionType === LoyaltyConfig.conversionType.redeeming ) {
                                                result =  (conversionOb.currencyValue / conversionOb.pointValue);
                                                matchedResult = true;
                                            }
                                        }
                                    });

                                    deferred.resolve(result);
                                }
                            }
                        );
                        return deferred.promise;
                    },

                    getFormattedDate : function (input) {

                        var deferred = $q.defer();
                        
                        var monthNames = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];

                        var date = new Date(input);
                        
                        var thisMonth = monthNames[date.getMonth()];
                        var thisYear = date.getFullYear();
                        var thisDate  = date.getDate();
                        
                        var thisHours = date.getHours();

                        var thisHoursInAmPm = (thisHours > 12) ? (thisHours-12) : thisHours;
                        
                        var thisMinutes = (date.getMinutes()<10)? ('0'+date.getMinutes()) : date.getMinutes();
                        var thisSeconds  = (date.getSeconds()<10)? ('0'+date.getSeconds()) : date.getSeconds();
                        var getAmPm = (thisHours >= 12) ? 'PM' : 'AM';
                        
                        $translate([thisMonth, getAmPm]).then(

                            function(translatedStrings) {
                                
                                thisMonth = translatedStrings[thisMonth];
                                getAmPm =  translatedStrings[getAmPm];
                                
                                var showThisDate = thisMonth + ' ' + thisDate +', '+ thisYear + ' ' + thisHoursInAmPm + ':' + thisMinutes + ':'+ thisSeconds + ' ' + getAmPm;

                                deferred.resolve(showThisDate);
                                
                            }
                        );

                        return deferred.promise;
                    },






                     updateAccountDetails: function(account){

                        var self = this;
                        
                        var deferred = $q.defer();

                        AccountSvc.account().then(

                                    function(userData) {

                                        self.isUserMember(userData.id).then(

                                            function(memberData) {

                                                if (memberData.length > 0) {

                                                    var memberId = memberData[0].memberId;

                                                // var mapperObj = {
                                                //     contactEmail : 'customerEmail',
                                                //     firstName : 'customerFirstName',
                                                //     lastName : 'customerLastName'
                                                // }

                                                var partialUpdateJson = {
                                                    customerEmail : account.contactEmail,
                                                    customerFirstName : account.firstName,
                                                    customerLastName : account.lastName,
                                                    preferredLanguage : account.preferredLanguage
                                                };
                                            
                                                var membershipJson = {
                                                    memberId: memberData[0].memberId,
                                                    memberNumber: memberData[0].memberNumber,
                                                    programId: memberData[0].programId,
                                                    customerId: memberData[0].customerId,
                                                    dateValidFrom: memberData[0].dateValidFrom,
                                                    dateValidTo: memberData[0].dateValidTo,
                                                    tierId : memberData[0].tierId,
                                                    tierHistory: memberData[0].tierHistory,
                                                    createdBy: memberData[0].createdBy,
                                                    memberStatus: memberData[0].memberStatus,
                                                    preferredLanguage : memberData[0].preferredLanguage

                                                }
                                                 // partialUpdateJson[mapperObj[field]] = data;

                                                   membershipJson = angular.extend(membershipJson, partialUpdateJson);
                                                    var url = Utilities.getLoyaltyMembershipUrl()+'/'+memberId+'?patch=true';
                                                    
                                                    LoyaltyREST.accountDetailsLoyalty(url,membershipJson).then(function(response){
                                                        deferred.resolve(response);
                                                    }, function(){
                                                        deferred.reject(response);
                                                    });
                                                }

                                                else {
                                                   
                                                }
                                            }
                                        );
                                    }
                                );  
                                return deferred.promise; 
                    },


                    getJWTForGoogleWallet: function (customerId, data) {
                        var url = Utilities.getGoogleWalletJWTUrl(customerId);
                        return LoyaltyREST.getJWTForGoogleWallet(url, data);
                    },

                    getHybrisProfileConsentReference: function () {
                        var url = Utilities.getHybrisProfileConsentReferenceUrl();
                        return LoyaltyREST.getHybrisProfileConsentReference(url);
                    },

                    checkForHybrisProfileSubscription: function () {
                        var url = Utilities.getHybrisProfileAnalyticsUrl() + '/tenantsubscription';
                        return LoyaltyREST.checkForHybrisProfileSubscription(url);
                    },



                };

                return LoyaltyService;
            }
        ]);


    angular.module('ds.loyalty')

        .factory('LoyaltyREST', ['RESTSvc',

            function (RESTSvc) {

                var LoyaltyREST = {

                    getLoyaltyConfiguration: function (url) {
                        return RESTSvc.get(url);
                    },

                    getLoyaltyPrograms: function (url) {
                        return RESTSvc.get(url);
                    },

                    registerForMembership: function(url, memberData) {
                        return RESTSvc.post(url, memberData);
                    },

                    getUserLoyaltyMembership: function(url, userData) {
                        return RESTSvc.get(url, userData);
                    },

                    postMemberActivity: function(url, activityModel) {
                        return RESTSvc.post(url, activityModel);
                    },

                    getTiersOfProgram: function(url) {
                        return RESTSvc.get(url);                        
                    },

                    getTierInfo: function(url) {
                        return RESTSvc.get(url);                        
                    },

                    getUserPointsAccount: function(url) {
                        return RESTSvc.get(url);  
                    },


                    getProductRatings: function(url) {
                        return RESTSvc.get(url);                        
                    },
                    
                    getProductAvgRating: function(url) {
                        return RESTSvc.get(url);                        
                    },

                    getProductReview: function(url) {
                        return RESTSvc.get(url);                        
                    },

                    postProductReview: function(url, reviewData) {
                        return RESTSvc.post(url, reviewData);
                    },

                    applyCoupon: function(url) {
                        return RESTSvc.get(url);
                    },

                    fireDummyRule: function (url , dummyData) {
                        return RESTSvc.post(url, dummyData);
                    },

                    accountDetailsLoyalty: function(url, accountData){

                        return RESTSvc.put(url, accountData);
                    },
                    getRewardInfo: function(url){
                        return RESTSvc.get(url);
                    },

                    sendReferralEmail: function(url, data) {
                        return RESTSvc.post(url, data);
                    },

                    getProductReviewRating : function(url) {
                        return RESTSvc.get(url);
                    },

                    postProductReviewRating : function(url, data) {
                        return RESTSvc.post(url, data);
                    },

                    getProductRatingCounts : function(url) {
                        return RESTSvc.get(url);
                    },

                    getJWTForGoogleWallet: function(url, data) {
                        return RESTSvc.post(url, data);
                    },

                    getURLForAppleWallet : function(url) {
                        return RESTSvc.get(url);
                    },

                    postApplyLoyaltyPoints: function(url, data) {
                        return RESTSvc.post(url, data);
                    },

                    deleteLoyaltyPoints: function(url) {
                        return RESTSvc.delete(url);
                    },

                    getHybrisProfileConsentReference: function (url, data) {
                        return RESTSvc.post(url, data);
                    },

                    checkForHybrisProfileSubscription: function (url) {
                        return RESTSvc.get(url);
                    },
                };

                return LoyaltyREST;
            }
        ]);

	angular.module('ds.loyalty')

		.factory('RESTSvc', ['$q', '$http', 

			function($q, $http) {

				return {

					get: function( url, data ) {

						var deferred = $q.defer();

						$http.get(
							url,
							data
						).success(function(response) {		                    
							deferred.resolve(response);
						}).error(function(response) {		                    
							deferred.reject(response);
						});

						return deferred.promise;
					},


					post: function( url, data ) {

						var deferred = $q.defer();

						$http.post(
							url,
							data
						).success(function(response) {		                    
							deferred.resolve(response);
						}).error(function(response) {		                    
							deferred.reject(response);
						});
						
						return deferred.promise;
					},


					put: function( url, data ) {

						var deferred = $q.defer();

						$http.put(
							url,
							data
						).success(function(response) {		                    
							deferred.resolve(response);
						}).error(function(response) {		                    
							deferred.reject(response);
						});
						
						return deferred.promise;
					},

					delete: function( url, data ) {

						var deferred = $q.defer();

						$http.delete(
							url,
							data
						).success(function(response) {		                    
							deferred.resolve(response);
						}).error(function(response) {		                    
							deferred.reject(response);
						});
						
						return deferred.promise;
					}
				};
			}
		]);


    angular.module('ds.loyalty')

        .factory('LoyaltyTokenSvc', ['$rootScope', 'RESTSvc', 'LoyaltyConfig', 'Utilities', 'ipCookie', 

            function($rootScope, RESTSvc, LoyaltyConfig, Utilities, ipCookie) {

                var defaultExpirySeconds = 3599;

                var Token = function(accessToken, tenant) {
               
                    this.accessToken = accessToken;
                    this.tenant = tenant;

                    this.getAccessToken = function() {
                        return this.accessToken;
                    };

                    this.getTenant = function() {
                        return this.tenant;
                    };
                };


                var TokenSvc = {

                    getAuthorizationBearer: function(accessToken) {
                        return 'Bearer ' + accessToken;
                    },

                    hasToken: function () {

                        if ( this.getToken().getAccessToken() ) {
                            return true;
                        } else {
                            return false;
                        }
                    },

                    getToken: function () {

                        var tokenCookie = ipCookie(LoyaltyConfig.accessCookie);

                        if ( tokenCookie ) {

                            if( tokenCookie.tenant === Utilities.getTenant() ) {
                                return new Token(tokenCookie.accessToken, tokenCookie.tenant);
                            }

                            
                        }
                        
                        return new Token(null, null);
                    },

                    saveToken: function(accessToken, expiresIn) {
                        var token = new Token( accessToken, Utilities.getTenant() );
                        ipCookie(LoyaltyConfig.accessCookie, JSON.stringify(token), {expirationUnit: 'seconds', expires: expiresIn ? expiresIn : defaultExpirySeconds, secure: false});
                        $rootScope.$emit('loyaltyToken:obtained', token);
                    },

                    removeToken: function () {
                        ipCookie.remove(LoyaltyConfig.accessCookie);
                    },

                    getAccessToken: function() {
                        var url = Utilities.getTokenUrl();

                        var client = Utilities.getClientInformation();

                        var queryString = '';

                        queryString +=  'grant_type=' + LoyaltyConfig.grantType;
                        queryString +=  '&scope=' + LoyaltyConfig.roleSeller;
                        queryString +=  '&client_id=' + client.clientId;
                        queryString +=  '&client_secret=' + client.clientSecret;

                        return RESTSvc.post(url, queryString);
                    },                
                    
                };

                return TokenSvc;
            }
        ]);

	angular.module('ds.loyalty')

		.factory('Utilities', ['$rootScope', '$injector', 

			function($rootScope, $injector) {


				var appConfig = $injector.get('appConfig');
				var LoyaltyConfig = $injector.get('LoyaltyConfig');


				return {

					getTextDay: function(numDay) {
						var textDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
						return textDays[numDay];
					},

					getMonthDay: function(numMonth) {
						var textMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',
						'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
						];
						return textMonths[numMonth];
					},

					getFormattedDate: function(epochTime) {

						if (epochTime == null) {
							epochTime = (new Date()).getTime();
						}

						while (Math.floor(epochTime).toString().length > 13) {
							epochTime /= 1000;
						}

						var newDate = new Date(parseFloat(epochTime));
						return this.getTextDay(newDate.getDay()) + ' ' + this.getMonthDay(newDate.getMonth()) + ' ' + newDate.getDate() + ' ' + newDate.getFullYear();
					},



					getApp: function () {
						return appConfig.app();
					},

					getTenant: function () {
						return appConfig.storeTenant();
					},

					getBaseUrl: function ( dontWantProtocol ) {
						return 'https://' + appConfig.dynamicDomain();
					},

					getLoyaltyConfigurationUrl: function () {
						return this.getBaseUrl() + LoyaltyConfig.apis.config.loyaltyConfig;
					},

					getloyaltyProgramUrl: function () {
						return this.getBaseUrl() + LoyaltyConfig.apis.config.programConfig;
					},

					getTiersUrl: function () {
						return this.getBaseUrl() + LoyaltyConfig.apis.core.program.tiers;
					},

					getLoyaltyMembershipUrl: function () {   
						return this.getBaseUrl() + LoyaltyConfig.apis.core.member.members;
					},

					getMemberRegistrationUrl: function () {
						return this.getBaseUrl() + LoyaltyConfig.apis.core.mash.registration;
					},

					getMemberActivityPostUrl: function () {
						return this.getBaseUrl() + LoyaltyConfig.apis.core.mash.activities;
					},

					getMemberActivityUrl: function () {
						return this.getBaseUrl() + LoyaltyConfig.apis.core.member.activities;
					},

					getFireRuleUrl: function () {
						return this.getBaseUrl() + LoyaltyConfig.apis.engine.fireRule;
					},

					getReferralEmailUrl : function () { 

						return this.getBaseUrl() + LoyaltyConfig.apis.advocacy.sendReferral;
					},

					getProductReviewRatingUrl : function () { 

						return this.getBaseUrl() + LoyaltyConfig.apis.advocacy.reviewRating;
					},

					postProductReviewRatingUrl : function () { 

						return this.getBaseUrl() + LoyaltyConfig.apis.advocacy.ratingReview;
					},
                    
                    getRewardInfoDataUrl: function(){
						return this.getBaseUrl() + LoyaltyConfig.apis.engine.rewardInfo;
					},

					getGoogleWalletJWTUrl: function (customerId) {

						return this.getBaseUrl() +LoyaltyConfig.apis.wallet.googleWallet+customerId+'/loyaltyObject' ;

					},
					
					getApplyDiscountUrl: function () {
						return this.getBaseUrl() + LoyaltyConfig.apis.core.discount.loyaltyDiscount;
					},

					getRemoveDiscountUrl : function (customerId) {
						return this.getBaseUrl() + LoyaltyConfig.apis.core.discount.remove;
					},

					getAppleWalletUrl : function (customerId) {
						return this.getBaseUrl() + LoyaltyConfig.apis.wallet.appleWallet +customerId + LoyaltyConfig.apis.wallet.appleWalletEndPoint;
					},

					getHybrisProfileConsentReferenceUrl: function () {
						return this.getBaseUrl() + [ LoyaltyConfig.apis.hybrisProfile.consentReference, this.getTenant(), 'consentReferences' ].join('/');
					},

					getHybrisProfileAnalyticsUrl: function () {
						return this.getBaseUrl() + LoyaltyConfig.apis.hybrisProfile.analytics;
					},

				};
			}
		]);

    angular.module('ds.loyalty')

       .controller('RegisterForLoyaltyProgramCtrl', ['$rootScope', '$scope', '$injector', '$modalInstance', 'userData',

            function ($rootScope, $scope, $injector, $modalInstance, userData) {

                $scope.userData = userData;
                $scope.myUser = {};
                $scope.wrongReferral = true;
                var LoyaltySvc = $injector.get('LoyaltySvc');

                $scope.getLoyaltyPrograms = function() {

                    $scope.loyaltyPrograms = [];

                    LoyaltySvc.getLoyaltyPrograms().then(

                        function(loyaltyProgramData) {

                            $scope.loyaltyPrograms.push(loyaltyProgramData[0]);
                            $scope.userProgram = $scope.loyaltyPrograms[0].programId;
                            $scope.userProgramName = $scope.loyaltyPrograms[0].loyaltyProgramName;
                        }
                    );
                };

                $scope.init = function() {
                    $scope.getLoyaltyPrograms();
                };

                 $scope.init();

                $scope.closeModal = function() {
                    $modalInstance.dismiss();
                };


                var loyaltyProgramRegistration = function (user) {
                    LoyaltySvc.registerForMembership(user).then(
                        function (registrationResponse) {
                            $scope.wrongReferral = true;
                            LoyaltySvc.getMemberData(user.customerId);
                            if ( $rootScope.loyaltyConfig.enableTellAFriend) {
                                $scope.closeModal();
                            }
                        },
                        function (error) {
                            $scope.wrongReferral = true;
                            $scope.myUser.referraledCode = '';
                        }
                    );
                };

                $scope.registerCustomerForProgram = function() {


                    var user = {
                        email: $scope.userData.email,
                        customerId: $scope.userData.customerId,
                        loyaltyProgramId: $scope.userData.loyaltyProgramId,
                        referralCode: $scope.myUser.referraledCode
                    };

                    LoyaltySvc.checkForHybrisProfileSubscription().then(function (subscriptionData) {
                        try {
                            return ( subscriptionData.status === 'ACTIVE' );
                        } catch ( exception ) {
                            return false;
                        }
                    }).then(function (subscriptionStatus) {
                        if ( subscriptionStatus ) {
                            LoyaltySvc.getHybrisProfileConsentReference().then(function (consentReferenceData) {
                                user = angular.extend(user, {
                                    customAttributes: [{
                                        cname: 'consentReference',
                                        cvalue: consentReferenceData.id
                                    }]
                                });
                                loyaltyProgramRegistration(user);
                            });
                        } else {
                            loyaltyProgramRegistration(user);
                        }
                    }, function (response) {
                        loyaltyProgramRegistration(user);
                    });
                };
            }
        ])

        .controller('LoyaltyProgramCtrl', ['$rootScope', '$scope', '$injector',

            function ($rootScope, $scope, $injector) {

                var LoyaltySvc = $injector.get('LoyaltySvc');
            
                $scope.registrationServiceCalled = false;
                var $modal = $injector.get('$modal');
                $scope.wrongReferral = true;
                $scope.myUser = {};

                $scope.registrationController = function($scope, GlobalData) {

                    $scope.loyaltyConfig =  $rootScope.loyaltyConfig;

                    $scope.loyaltyProgram = {

                    };

                    // $scope.site =  GlobalData.getSite();
                    
                    $scope.languageCode =  GlobalData.getLanguageCode();


                    $scope.wantLoyaltyProgram = false;

                    $scope.getLoyaltyPrograms = function () {

                        LoyaltySvc.getLoyaltyPrograms().then(

                            function (loyaltyProgramdata) {                              
                                $scope.loyaltyProgram = loyaltyProgramdata[0];
                            }
                        );
                    };

                    $scope.init = function () {

                        $scope.loyaltyProgram = {

                        };

                        $scope.wantLoyaltyProgram = false;

                        $scope.user = {
                            referraledCode: ''
                            // preferredLanguage: ''
                        };

                        // var idx = $scope.site.languages.indexOf($scope.languageCode);

                        // if ( idx < 0 ) {
                        //     idx = 0;
                        // }

                        // $scope.user.preferredLanguage = $scope.site.languages[idx];

                        $scope.getLoyaltyPrograms();
                    };

                    $scope.getLoyaltyProgramMembership = function() {
                       
                        $scope.modalInstance = $scope.openLoyaltyProgramMembershipModal();
                    };                   

                    $scope.openLoyaltyProgramMembershipModal = function() {

                        return $modal.open({
                            templateUrl: 'js/app/loyalty/templates/signup_for_loyalty_program_modal.html',
                            controller: 'RegisterForLoyaltyProgramCtrl',
                            resolve: {
                                userData: function () {
                                  return $scope.userData;
                              }
                          }
                        });                       
                    };


                    $scope.init();


                    var loyaltyProgramRegistration = function (user) {
                        LoyaltySvc.registerForMembership(user).then(function (response) {
                            $scope.registrationServiceCalled = true;
                        }, function (response) {
                            $scope.registrationServiceCalled = false;
                            if(response.status === 404 && response.message === "INVALID_REF_CODE"){
                                $scope.userData = user;
                                $scope.getLoyaltyProgramMembership();
                            }
                        });
                    };

                    $scope.$on('user:signedup', function( eve, userData ) { 
                        
                        $scope.$on('user:signedin', function() { 

                            if( $scope.wantLoyaltyProgram || !$rootScope.loyaltyConfig.showReward ) {

                                userData.loyaltyProgramId = $scope.loyaltyProgram.programId;
                                userData.referralCode = $scope.user.referraledCode;   
                                userData.preferredLanguage = $scope.languageCode ;                         

                                if ( ! $scope.registrationServiceCalled ) {

                                    $scope.registrationServiceCalled = true;

                                    /*
                                        If yProfile package is subscribed for the particular tenant, then generate the consent reference and pass the same id to the Loyalty member registration service as the custom attributes
                                     */
                                    
                                    LoyaltySvc.checkForHybrisProfileSubscription().then(function (subscriptionData) {
                                        try {
                                            return ( subscriptionData.status === 'ACTIVE' );
                                        } catch ( exception ) {
                                            return false;
                                        }
                                    }).then(function (subscriptionStatus) {
                                        if ( subscriptionStatus ) {
                                            LoyaltySvc.getHybrisProfileConsentReference().then(function (consentReferenceData) {
                                                userData = angular.extend(userData, {
                                                    customAttributes: [{
                                                        cname: 'consentReference',
                                                        cvalue: consentReferenceData.id
                                                    }]
                                                });
                                                loyaltyProgramRegistration(userData);
                                            });
                                        } else {
                                            loyaltyProgramRegistration(userData);
                                        }
                                    }, function (response) {
                                        loyaltyProgramRegistration(userData);
                                    });
                                }
                            }
                        });
                    });
                };
            }
        ]);

    angular.module('ds.loyalty')

        .controller('LoyaltyCheckoutCtrl', ['$rootScope', '$scope', '$injector', 'LoyaltySvc',

            function ($rootScope, $scope, $injector, LoyaltySvc) {

                var CartSvc = $injector.get('CartSvc');
                var GlobalData = $injector.get('GlobalData');
                var LoyaltySvc = $injector.get('LoyaltySvc');

                $scope.currencyId = GlobalData.getCurrencySymbol();
                $scope.thisUser = $rootScope.thisUser;
                $scope.showApplyPoints = true;
                $scope.isSliderDisabled = false;

                 $scope.getUser = function () {

                    $scope.thisUser = $rootScope.thisUser;

                    if ( $scope.thisUser ) {
                        $scope.calcAmounts();
                    }
                };

                $scope.isLoyaltyPointsApplied = false;

                $scope.applyLoyaltyPoints =  function(){
                    $scope.isSliderDisabled = true;
                    var applyDiscountData = {
                        customerId : $scope.thisUser.hybrisUser.id,
                        cartId : $scope.cart.id,
                        transactionAmount : $scope.redeem.pointsToCurr,
                        pointsRedeemed : $scope.redeem.pointsGoing,
                        transactionCurrency : GlobalData.getCurrencyId()
                    };                    
                    
                    LoyaltySvc.applyLoyaltyPoints(applyDiscountData).then(
                        
                        function(response) {
                            $scope.showApplyPoints = false;

                            CartSvc.getCart().then(function (cart){
                                $scope.cart = cart;
                                $scope.redeem.pointsGoing = applyDiscountData.pointsRedeemed;
                                $scope.amounts.redeemDiscount = applyDiscountData.transactionAmount;
                                $scope.isLoyaltyPointsApplied = true;
                            });
                        },

                        function(errorresponse) {
                           $scope.isSliderDisabled = false;
                            console.log(errorresponse);
                        }
                    );   
                }

                $scope.removeLoyaltyPoints =  function(){
                    if($scope.cart.discounts){
                        var removeDiscountData = {
                            cartId : "",
                            loyaltyDiscountId : -1
                        }
                        angular.forEach($scope.cart.discounts, function(discount){
                            if(discount.name == "Loyalty Points Redemption"){
                                removeDiscountData.loyaltyDiscountId = discount.id;
                            }
                        });
                    
                        removeDiscountData.cartId = $scope.cart.id;

                        if(removeDiscountData.loyaltyDiscountId !== -1){
                            LoyaltySvc.removeLoyaltyPoints(removeDiscountData).then(
                                
                                function(response) {
                                    $scope.showApplyPoints = true;
                                    CartSvc.getCart().then(function (cart){
                                        $scope.cart = cart;
                                        $scope.isSliderDisabled = false;
                                        $scope.redeem.pointsGoing = 0;
                                        $scope.amounts.redeemDiscount = 0;
                                        $scope.isLoyaltyPointsApplied = false;

                                    });
                                },

                                function(errorresponse) {
                                    console.log(errorresponse);
                                }
                            ); 
                        }
                    }   
                }

               
                var unBindUserEvent = $rootScope.$on('loyaltyInformation:updated', function (event, eveObj) {
                    $scope.thisUser = $rootScope.thisUser;
                    $scope.calcAmounts();
                });

                $scope.redeem = {

                    ratio: -1,
                    pointsGoing: 0,
                    pointsToCurr: 0,
                    cashGoing: 0
                };   

                $scope.getRedeemRatio = function() {

                    return LoyaltySvc.getRedeemRatio().then(

                        function (redeemRatio) {
                            $scope.redeem.ratio = redeemRatio;
                        }
                    );  
                };

                $scope.coupon = {

                };

                $scope.cart = {

                };            

                $scope.amounts = {
                    shippingAmount: 0,
                    originalAmount: 0,
                    originalTotalAmount: 0,
                    redeemDiscount: 0,
                    couponDiscount: 0,
                    discountAmount: 0,
                    newAmount: 0
                };

                $scope.calcAmounts = function () {

                    $scope.cart = CartSvc.getLocalCart();

                    if ( $scope.cart && angular.isArray( $scope.cart.items ) ) {

                        $scope.amounts.shippingAmount = $scope.cart.shipping.fee.amount;
                        $scope.amounts.originalAmount = angular.copy($scope.cart.subTotalPrice.amount);
                        $scope.amounts.originalTotalAmount = angular.copy($scope.cart.totalPrice.amount);
    
                        if($scope.cart.totalDiscount){
                             $scope.amounts.discountAmount = $scope.cart.totalDiscount.amount;
                        }
    
                        // $scope.coupon = UserCoupon.getCoupon();
                        // $scope.amounts.couponDiscount = $scope.coupon.amounts.discountAmount;

                        if ( $scope.redeem.ratio === -1 ) {

                            $scope.getRedeemRatio().then(

                                function (redeemRatio) {  
                                                          
                                    $scope.setUserMaxPoints();
                                    $scope.changeNewAmount();
                                    $scope.changeShippingAmount();
                                }
                            );
                        }   
                        else{
                            $scope.setUserMaxPoints();
                            $scope.changeNewAmount();
                            $scope.changeShippingAmount();
                        }                         
                    }
                };





                $scope.userMaxCash = 0;
                $scope.userMaxPoints = 0;


                $scope.setUserMaxPoints = function () {
                    $scope.userMaxPoints = $scope.getUserMaxPoints($scope.thisUser.loyaltyUser.totalBalancePoints || 0);
                    $scope.userMaxCash = ($scope.userMaxPoints * $scope.redeem.ratio).toFixed(2);
                    $rootScope.$broadcast('amountChanged:redeemablePoints', $scope.userMaxPoints);

                };

                $scope.getUserMaxPoints = function(userMaxpPoints) {

                    var productPoints = $scope.getPointsFromPrice($scope.amounts.originalAmount - $scope.amounts.couponDiscount);
                    
                    var result = userMaxpPoints;

                    if ( productPoints <= userMaxpPoints ) {
                        result = productPoints;
                    }

                    return result.toFixed(0);
                };


                $scope.getPointsFromPrice = function(priceVal) {
                    return priceVal / $scope.redeem.ratio;
                };


                $scope.changePointsGoing = function () {
                    $scope.redeem.pointsToCurr = ( ( $scope.redeem.pointsGoing || 0 ) * $scope.redeem.ratio).toFixed(2);
                    
                    $scope.amounts.redeemDiscount = parseFloat($scope.redeem.pointsToCurr);
                    
                    
                    $scope.changeNewAmount();
                    $scope.changeTotalDiscount();

                    if ( $scope.amounts.redeemDiscount >= ($scope.amounts.originalTotalAmount - $scope.amounts.couponDiscount) ){
                        $rootScope.$emit('redeem:full', $scope.amounts);
                    }
                    else{
                        $rootScope.$emit('redeem:partial', $scope.amounts);
                    }

                };

                $scope.changeCashGoing = function() {

                    $scope.redeem.pointsToCurr = ( $scope.redeem.cashGoing || 0 ).toFixed(2);
                    $scope.redeem.pointsGoing  = ($scope.redeem.cashGoing / $scope.redeem.ratio);
                    $scope.amounts.redeemDiscount = parseFloat($scope.redeem.pointsToCurr);
                    $scope.changeNewAmount();
                    $scope.changeTotalDiscount();

                    if ( $scope.amounts.redeemDiscount >= ($scope.amounts.originalTotalAmount - $scope.amounts.couponDiscount) ){
                        $rootScope.$emit('redeem:full', $scope.amounts);

                    }
                    else{
                        $rootScope.$emit('redeem:partial', $scope.amounts);
                    }

                };

                $scope.changeNewAmount = function () {
                    
                    $scope.amounts.newAmount = $scope.amounts.originalTotalAmount - parseFloat( $scope.amounts.redeemDiscount );

                    if ($scope.amounts.newAmount <= 0 ) {
                        $scope.amounts.newAmount = 0;
                    }
               
                    $scope.amounts.newAmount = parseFloat($scope.amounts.newAmount).toFixed(2);
                    $rootScope.$emit('amountChanged:total', $scope.amounts.newAmount);
                };   

                $scope.changeTotalDiscount = function () {                                     
                    //$scope.amounts.discountAmount = parseFloat( $scope.amounts.redeemDiscount ).toFixed(2);                    
                    $rootScope.$emit('amountChanged:discount', $scope.amounts.discountAmount);
                };

                $scope.changeShippingAmount = function () {
                    $scope.amounts.shippingAmount = parseFloat( $scope.amounts.shippingAmount ).toFixed(2);
                    $rootScope.$emit('amountChanged:shipping', $scope.amounts.shippingAmount);                    
                };

              



                $scope.serviceCalled = {};
                $scope.serviceCalled['ORDER_PLACED'] = false ;
                $scope.serviceCalled['ORDER'] = false ;
                $scope.serviceCalled['REDEEM'] = false;

                $scope.order = {
                    
                }


                var unBindOrderAddress = $rootScope.$on('order:cart', function(eve, order){
                    $scope.order =  order;
                });


                var unBindCartUpdated = $rootScope.$on('cart:updated', function (eve, cartObj) {
                    
                    if( cartObj.source !=='reset' ){
                        
                        $scope.amounts.originalTotalAmount = cartObj.cart.totalPrice.amount;                        
                    
                    }

                    $scope.amounts.redeemDiscount = 0;
                    $scope.amounts.discountAmount = 0;
                    $rootScope.$emit('amountChanged:total', $scope.amounts.originalTotalAmount);
                    $rootScope.$emit('amountChanged:discount', $scope.amounts.discountAmount);
                    
                    if ( cartObj.source !=='reset' ) {

                        $scope.calcAmounts();

                        $scope.redeem.cashGoing = 0;
                        $scope.redeem.pointsGoing = 0;
                        $scope.redeem.pointsToCurr = 0;
                    }

                    if ( $scope.thisUser.isMember ) {
                        $scope.setUserMaxPoints();
                    }
                });

                $scope.isOrderPlaced = false;

                var unBindOrderPlaced = $rootScope.$on('order:placed', function (eve, orderData) {
                    
                    $scope.isOrderPlaced = true;

                    if ( $scope.thisUser.isMember ) {

                        if ( ! $scope.serviceCalled['ORDER_PLACED'] ) {

                            $scope.serviceCalled['ORDER_PLACED'] = true;
                            $scope.doMemberActivitiesOnCheckout($scope.thisUser.hybrisUser.id, orderData.orderId);
                        }
                    }
                });


                var unBindCouponRemoved = $rootScope.$on('coupon:removed', function (e) {
                    $scope.isSliderDisabled = false;
                    $scope.showApplyPoints = true;
                    $scope.redeem.pointsGoing = 0;
                    $scope.amounts.redeemDiscount = 0;
                    $scope.isLoyaltyPointsApplied = false;
                });



                $scope.postOrderActivity = function (customerId, transactionAmount, orderId) {
                    
                    var totalItems  = 0;
                    angular.forEach($scope.cart.items, function(item){
                        totalItems = totalItems + item.quantity;
                    });

                    var orderActivity = {
                        customerId: customerId,
                        activityType: 'ORDER',
                        transactionAmount: transactionAmount,
                        refId: orderId,
                        transactionCurrency : GlobalData.getCurrencyId(),
                        rulesPayload : {
                            productAttributes :[],
                            orderAttributes : {
                                transactionCurrency :GlobalData.getCurrencyId(),
                                total : $scope.amounts.originalTotalAmount,
                                subTotal : $scope.amounts.originalAmount,
                                shippingAmount : $scope.amounts.shippingAmount,
                                discountAmount : $scope.amounts.discountAmount,
                                shippingCountry: $scope.order.shipTo.country,
                                shippingState : $scope.order.shipTo.state,
                                totalItems : totalItems,
                                customAttributes:[]
                            },
                            customAttributes: [{
                                key: 'STORE_ID',
                                value: '1003'
                            }]
                        }
                    };

                    LoyaltySvc.getProductAttributes($scope.cart).then(function(productAttributes){

                        orderActivity.rulesPayload.productAttributes = productAttributes;

                        if ( ! $scope.serviceCalled['ORDER'] ) {

                            $scope.serviceCalled['ORDER'] = true ;

                            LoyaltySvc.postMemberActivity(orderActivity).then(function(responseMemberActivity) {
                                $rootScope.$emit('loyalty:orderId', orderId);
                            }, function(errorresponse) {
                                $scope.serviceCalled['ORDER'] = false;
                            }); 
                        }
                    });
                };

                $scope.postRedeemActivity = function (customerId, pointsGoing, orderId) {                   

                    var redeemActivity = {
                        customerId: customerId,
                        activityType: 'REDEEM',
                        pointsRedeemed: pointsGoing,
                        transactionAmount: 0,      
                        refId: orderId,
                        rulesPayload : {
                                productAttributes :[],
                                orderAttributes : {
                                  transactionCurrency :GlobalData.getCurrencyId(),
                                  total : '',
                                  subTotal : '',
                                  shippingAmount :'',
                                  discountAmount : '',
                                  shippingCountry: "",
                                  shippingState : "",
                                  customAttributes:[]
                                }
                            },                  
                    };
                     
                     var responseMemberActivityRedeem ;

                    if ( ! $scope.serviceCalled['REDEEM'] ) {

                        return LoyaltySvc.postMemberActivity(redeemActivity).then(

                            function(responseMemberActivity) {

                                $scope.serviceCalled['REDEEM'] = true;
                                responseMemberActivityRedeem = responseMemberActivity;
                            }
                        );
                    }
                };

                $scope.doMemberActivitiesOnCheckout = function(customerId, orderId) {
                    
                    LoyaltySvc.setAmountsAfterOrder($scope.amounts);
                    //$scope.postOrderActivity(customerId, $scope.amounts.originalAmount, orderId) ;
                    if ( $scope.isLoyaltyPointsApplied ) {
                        $scope.postRedeemActivity(customerId, $scope.redeem.pointsGoing, orderId).then(

                            function(redeemResponse) {
                                $scope.postOrderActivity(customerId, $scope.amounts.originalAmount, orderId);
                            }
                        );
                    }

                    else {
                        $scope.postOrderActivity(customerId, $scope.amounts.originalAmount, orderId) ;
                    }
                };

                $scope.$on('$destroy', unBindCartUpdated);
                $scope.$on('$destroy', unBindOrderPlaced);
                $scope.$on('$destroy', unBindUserEvent);
                $scope.$on('$destroy', unBindCouponRemoved);

                $scope.$on('$destroy', function(){
                    if($scope.isOrderPlaced === false){
                        $scope.removeLoyaltyPoints();
                    }
                });


                $scope.init = function () {
                    $scope.getUser();
                    $scope.removeLoyaltyPoints();
                };
                $scope.init();               
            }
        ]);
angular.module('ds.loyalty')

.controller('LoyaltyUserCtrl', ['$rootScope', '$scope', '$injector','$http','GlobalData',

    function($rootScope, $scope, $injector, $http, GlobalData) {

        var $modal = $injector.get('$modal');
        var $timeout = $injector.get('$timeout');
        var LoyaltySvc = $injector.get('LoyaltySvc');

        $scope.thisUser = $rootScope.thisUser;

        $scope.isConfigMaintained = $rootScope.isConfigMaintained;

        $scope.configData = $rootScope.loyaltyConfig;
        $scope.disableInvitation = true;
        $scope.wrongReferral = false;
        $scope.disableSave = false;  


        $scope.user = {};
        $scope.myUser = {};


        $scope.getUser = function() {

            LoyaltySvc.getUser().then(

                function(userData) {
                    $scope.thisUser = userData;
                    $scope.checkForMembership();
                    //$scope.getJwtToken();
                }
            );

        };

        $scope.getRewardInfo = function(memberId) {

            LoyaltySvc.getRewardInfoData(memberId).then(
                function(rewardData) {

                    $scope.dispNextTierFlag = true;
                    $scope.displayRewardInfo = false;

                    if(rewardData && rewardData.totalBalancePoints && rewardData.currentTierName)
                        $scope.displayRewardInfo = true;

                    $scope.totalRedeemablePoints = rewardData.totalBalancePoints;

                    $scope.nextTierThreshold = rewardData.nextTierThreshold;

                    $scope.userPresentTier = rewardData.currentTierName;


                    if (rewardData.nextTierThreshold === 0) {

                        $scope.dispNextTierFlag = false;

                        $scope.nextTierThreshold = rewardData.totalQualifyingPoints;

                    } else {

                        $scope.updagradableTier = rewardData.nextTierName;

                        $scope.remainingPoints = rewardData.nextTierThreshold - rewardData.totalQualifyingPoints;
                        
                        if($scope.remainingPoints <= 0){
                            $scope.dispNextTierFlag = false;
                            $scope.nextTierThreshold = rewardData.totalQualifyingPoints;
                        }
                    }



                    $timeout(function() {

                        $scope.dynamicValue = (rewardData.totalQualifyingPoints / $scope.nextTierThreshold) * 100;

                    }, 200);

                }
            );


        };

        $scope.getLoyaltyInfo = function(loyaltyUser) {

            LoyaltySvc.getLoyaltyProgramById(loyaltyUser.programId).then(

                function(programData) {
                    $scope.thisUser.program = programData.loyaltyProgramName;
                    $scope.thisUser.programId = programData.programId;
                }
            );

            LoyaltySvc.getTierInfo(loyaltyUser.tierId).then(

                function(tierdata) {
                    $scope.thisUser.tier = tierdata.name;
                }
            );
        };

        $scope.loyaltyPrograms = [];
        $scope.userProgram = '';

                $scope.userProgramName = '';

        $scope.getLoyaltyPrograms = function() {

            $scope.loyaltyPrograms = [];

            LoyaltySvc.getLoyaltyPrograms().then(

                function(loyaltyProgramData) {

                    $scope.loyaltyPrograms.push(loyaltyProgramData[0]);
                    $scope.userProgram = $scope.loyaltyPrograms[0].programId;
                             $scope.userProgramName = $scope.loyaltyPrograms[0].loyaltyProgramName;
                }
            );
        };


       $scope.registerCustomerForProgram = function() {

            $scope.disableSave = true; 

            var user = {
                email: $scope.thisUser.hybrisUser.contactEmail,
                customerId: $scope.thisUser.hybrisUser.id,
                loyaltyProgramId: $scope.userProgram,
                referralCode: $scope.myUser.referraledCode,
                firstName: $scope.thisUser.hybrisUser.firstName,
                lastName: $scope.thisUser.hybrisUser.lastName,
                preferredLanguage : $scope.languageCode
            };


            var loyaltyProgramRegistration = function (user) {
                LoyaltySvc.registerForMembership(user).then(function (response) {
                    $scope.wrongReferral = false;
                    $scope.disableSave = false; 
                    LoyaltySvc.getMemberData(user.customerId);
                    $scope.closeModal();
                    //GlobalData.setLanguage($scope.myUser.preferredLanguage);
                }, function (response) {
                    $scope.wrongReferral = true;
                    $scope.disableSave = false; 
                    $scope.myUser.referraledCode = "";
                });
            };

            LoyaltySvc.checkForHybrisProfileSubscription().then(function (subscriptionData) {
                try {
                    return ( subscriptionData.status === 'ACTIVE' );
                } catch ( exception ) {
                    return false;
                }
            }).then(function (subscriptionStatus) {
                if ( subscriptionStatus ) {
                    LoyaltySvc.getHybrisProfileConsentReference().then(function (consentReferenceData) {
                        user = angular.extend(user, {
                            customAttributes: [{
                                cname: 'consentReference',
                                cvalue: consentReferenceData.id
                            }]
                        });
                        loyaltyProgramRegistration(user);
                    });
                } else {
                    loyaltyProgramRegistration(user);
                }
            }, function (response) {
                loyaltyProgramRegistration(user);
            });
        };
        
        var modalInstance = {

        };

        $scope.site =  GlobalData.getSite();

        $scope.languageCode =  GlobalData.getLanguageCode();

        var idx = $scope.site.languages.indexOf($scope.languageCode);

        if ( idx < 0 ) {
            idx = 0;
        }

        $scope.myUser.preferredLanguage = $scope.site.languages[idx];

        $scope.getLoyaltyProgramMembership = function() {
            $scope.wrongReferral = false;

           if($scope.configData.enableTellAFriend){
                modalInstance = $modal.open({
                    templateUrl: 'js/app/loyalty/templates/signup_for_loyalty_program_modal.html',
                    scope: $scope
                });
            }
            else{
                $scope.registerCustomerForProgram();
            }

           
        };

        $scope.closeModal = function() {
            modalInstance.close();
        };

        $scope.checkForMembership = function() {
            if ($scope.thisUser.isMember) {
                $scope.getLoyaltyInfo($scope.thisUser.loyaltyUser);
                $scope.getRewardInfo($scope.thisUser.loyaltyUser.memberId);
                $scope.getJwtToken();
                $scope.detectAppleDevice();
            } else {
                $scope.getLoyaltyPrograms();
            }
        };

        $scope.openReferralModal = function() {

            modalInstance = $modal.open({
                templateUrl: 'js/app/loyalty/templates/referral_modal.html',
                scope: $scope
            });

        };

        $scope.openPreferredLanguageModal = function() {

            modalInstance = $modal.open({
                templateUrl: 'js/app/loyalty/templates/preferred_language_modal.html',
                scope: $scope
            });

        };

        $scope.updatePreferredLanguage = function(){
            var user = {
                preferredLanguage : $scope.myUser.preferredLanguage
            }
            LoyaltySvc.updateAccountDetails(user).then(function(){
                LoyaltySvc.getMemberData($scope.thisUser.hybrisUser.id);
                $rootScope.$broadcast('loyaltyInformation:updated');
              //  GlobalData.setLanguage($scope.myUser.preferredLanguage);
                $scope.closeModal();
            },
            function(){

            });

        };

        $scope.handleArray = function(event, data) {

            if (angular.isArray(data)) {

                if (event.keyCode === 32) {

                    if (data.length > 4) {

                        event.stopPropagation();
                        event.preventDefault();
                        return false;
                    }
                }
            }
        };



        /*$scope.sendInvitation = function(referralModel, referralForm) {

            if (referralForm.$valid) {

                $scope.closeModal();

                $scope.referredEmails = referralModel.emailList.join(', ');

                var referralData = {
                    customerId: $scope.thisUser.hybrisUser.id,
                    programId: $scope.thisUser.programId || $scope.userProgram,
                    referralCode: $scope.thisUser.loyaltyUser.referralCode,
                    programName: $scope.thisUser.program,
                    emails: referralModel.emailList
                };


                LoyaltySvc.sendReferralEmail(referralData).then(

                    function(response) {


                        modalInstance = $modal.open({
                            templateUrl: 'js/app/loyalty/templates/success_modal.html',
                            scope: $scope
                        });
                    }
                );

            }
            $scope.referral = {

            };
        };
*/
        $scope.disableInvitation = true;

        $scope.checkEmailValidity = function (referralModel){
            var pattern = /^[_a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/; 
            if(angular.isArray(referralModel)){
                if(referralModel.length === 0)
                    $scope.disableInvitation = false;
                angular.forEach(referralModel, function (ratingOb) {
                if( ! pattern.test(ratingOb) || referralModel.length > 5) {
                    $scope.disableInvitation = false;
                }
                else
                    $scope.disableInvitation = true;
            });
            }
            
            else{
               if( ! pattern.test(referralModel) || referralModel.length > 5) {
                    $scope.disableInvitation = false;
                } 
                else
                $scope.disableInvitation = true; 
            }
               
        };


         $scope.select2Options = {
                    multiple: true,
                    'simple_tags': true,
                    tags: [],
                    maximumSelectionLength: 5
                };
         $scope.sendInvitation = function(referralModel, referralForm) {

            if (referralForm.$valid) {

                $scope.disableInvitation = false;

                $scope.emailList = [];
                for(var i=0 ; i < referralModel.emailList.length ; i++){
                     $scope.emailList[i] = referralModel.emailList[i];
                }
                
                $scope.referredEmails = $scope.emailList.join(', ');

                $scope.closeModal();

                var referralData = {
                    customerId: $scope.thisUser.hybrisUser.id,
                    programId: $scope.thisUser.programId || $scope.userProgram,
                    referralCode: $scope.thisUser.loyaltyUser.referralCode,
                    programName: $scope.thisUser.program,
                    emails: $scope.emailList
                };

                LoyaltySvc.sendReferralEmail(referralData).then(
                    function(response) {
                        modalInstance = $modal.open({
                            templateUrl: 'js/app/loyalty/templates/success_modal.html',
                            scope: $scope
                        });
                        $scope.disableInvitation = true;
                    },
                    function(error) {
                        $scope.disableInvitation = true;
                    }
                );

            }
            $scope.referral = {

            };
        };

        $scope.getJwtTokenCalled = 0;
        $scope.getURLForAppleWalletCalled = 0;

        $scope.getJwtToken = function(){
            if($scope.getJwtTokenCalled <1){
                $scope.getJwtTokenCalled = $scope.getJwtTokenCalled + 1 ;                        
                var data = {};
                LoyaltySvc.getJWTForGoogleWallet($scope.thisUser.hybrisUser.id, data).then(

                    function(walletData) {
                        gapi.savetowallet.render('saveToWallet', {
                            'jwt': walletData.tokenString
                        });
                    },
                    function(){
                        
                    }
                );
            }
        };

        $scope.showAddToAppleWallet = false;

        $scope.detectAppleDevice = function(){
            var uagent = navigator.userAgent.toLowerCase();
            if (uagent.search("iphone") > -1 || uagent.search("ipad") > -1 || uagent.search("ipod") > -1){
                $scope.getURLForAppleWallet();
            }
            else
              $scope.showAddToAppleWallet = false;
        };

        $scope.getURLForAppleWallet = function(){
            if($scope.thisUser.loyaltyUser.memberId && ($scope.getURLForAppleWalletCalled <1 ) ){
                $scope.getURLForAppleWalletCalled = $scope.getURLForAppleWalletCalled + 1 ;
                LoyaltySvc.getURLForAppleWallet($scope.thisUser.loyaltyUser.memberId).then(

                    function(response) {
                        $scope.appleWalletUrl = response.addToWalletUrl;
                        $scope.showAddToAppleWallet = true;

                    },
                    function(){
                        $scope.showAddToAppleWallet = false;
                    }
                );
            }
        };


        var unBindUserEvent = $rootScope.$on('loyaltyInformation:updated', function(event, eveObj) {
            $scope.thisUser = $rootScope.thisUser;
            $scope.checkForMembership();
        });

        $scope.$on('$destroy', unBindUserEvent);

        $scope.init = function() {
            $scope.getUser();
        };

        if($rootScope.isConfigMaintained){
            $scope.init();
        }

    }
]);


    angular.module('ds.loyalty')

        .controller('RewardHistoryCtrl', ['$rootScope', '$scope', '$injector',

            function ($rootScope, $scope, $injector) {

                var $q = $injector.get('$q');
               /* var $translate = $injector.get('$translate');*/
                var LoyaltySvc = $injector.get('LoyaltySvc');
                

                /*$scope.getFormattedDate = function (input) {

                    var deferred = $q.defer();
                    
                    var monthNames = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];

                    var date = new Date(input);
                    
                    var thisMonth = monthNames[date.getMonth()];
                    var thisYear = date.getFullYear();
                    var thisDate  = date.getDate();
                    
                    var thisHours = date.getHours();

                    var thisHoursInAmPm = (thisHours > 12) ? (thisHours-12) : thisHours;
                    
                    var thisMinutes = (date.getMinutes()<10)? ('0'+date.getMinutes()) : date.getMinutes();
                    var thisSeconds  = (date.getSeconds()<10)? ('0'+date.getSeconds()) : date.getSeconds();
                    var getAmPm = (thisHours >= 12) ? 'PM' : 'AM';
                    
                    $translate([thisMonth, getAmPm]).then(

                        function(translatedStrings) {
                            
                            thisMonth = translatedStrings[thisMonth];
                            getAmPm =  translatedStrings[getAmPm];
                            
                            var showThisDate = thisMonth + ' ' + thisDate +', '+ thisYear + ' ' + thisHoursInAmPm + ':' + thisMinutes + ':'+ thisSeconds + ' ' + getAmPm;

                            deferred.resolve(showThisDate);
                            
                        }
                    );

                    return deferred.promise;
                };

*/



                

                $scope.thisUser = $rootScope.thisUser;

                $scope.getUser = function () {

                    $scope.thisUser = $rootScope.thisUser;

                    if ( $scope.thisUser) {
                        $scope.checkForMembership();
                    }
                };

                var unBindUserEvent = $rootScope.$on('loyaltyInformation:updated', function (event, eveObj) {

                    $scope.thisUser = $rootScope.thisUser;
                    $scope.checkForMembership();
                });

                $scope.$on('$destroy', unBindUserEvent);




                $scope.defaultHistroyLength =10;

                $scope.showHistoryToggle = false;

                $scope.getMemberActivities = function (memberId) {

                    var params = {
                        pageSize: 100
                    };

                    $scope.memberActivities = [];
                    var activitiesArray = [];

                    LoyaltySvc.getMemberActivities(memberId, params.pageSize).then(

                        function (activitiesData) {

                            activitiesData.forEach(function (activityOb) {

                                var activity = angular.copy(activityOb);

                                LoyaltySvc.getFormattedDate(activity.metadata.createdAt).then(

                                    function (translatedDate) {

                                        activity.createdDate = translatedDate;
                                        activitiesArray.push(activity);
                                        $scope.memberActivities = activitiesArray;
                                        $scope.showHistoryFilter = $scope.showHistoryToggle ? $scope.memberActivities.length : $scope.defaultHistroyLength  ;

                                    }
                                );
                            });
                        }
                    );                    
                };


                $scope.checkForMembership = function () {

                    if ( $scope.thisUser.isMember ) {
                        $scope.getMemberActivities($scope.thisUser.loyaltyUser.memberId);
                    }
                };

    
                $scope.init = function() {                      
                    $scope.getUser();
                };

                $scope.init();                
            }
        ]);


	angular.module('ds.loyalty')

		.controller('RewardsPointCtrl', ['$rootScope', '$scope', '$injector',

			function ($rootScope, $scope, $injector) {

				var LoyaltySvc = $injector.get('LoyaltySvc');
                var $stateParams = $injector.get('$stateParams');



                $scope.thisUser = $rootScope.thisUser;

                $scope.getUser = function () {
                    $scope.thisUser = $rootScope.thisUser;
                    if ( $scope.thisUser ) {
                        $scope.getEarningRatio();
                    }
                    else{
                        LoyaltySvc.getUser();
                        $scope.getEarningRatio();
                    }
                };
                
                $scope.earning = {

                    ratio: 0,
                    points: 0,
                    cash: 0
                };

                $scope.getEarningRatio = function(pointsOb) {
                    //changed to getRedeemRatio
                    LoyaltySvc.getRedeemRatio().then(

                        function (earningRatio) {
                            $scope.earning.ratio = earningRatio;
                        }
                    );  
                };


                $scope.getTransactionAmountWithQty = function (amount, qty) {
                    return amount * qty;
                };



                $scope.product = {

                };

                $scope.quantity = 0;



                $scope.pointsProcessing = false;

                $scope.getCalculatePoints = function (productOb, quantity) {

                    if ($scope.thisUser.isMember) {


                        if ( productOb && quantity > 0 ) {

                            $scope.pointsProcessing = true;

                            var fireRuleModel = LoyaltySvc.getFireRuleOjbect();

                            if (fireRuleModel && angular.isObject(fireRuleModel)) {
                                var productAttributesObj = {
                                    productId : productOb.product.id,
                                    productName : productOb.product.name,
                                    price : productOb.prices[0].effectiveAmount,
                                    quantity  : quantity,
                                    imageURL : '',
                                    productCategory : angular.copy(productOb.categories),
                                    customAttributes:[]
                                };

                                angular.forEach(productAttributesObj.productCategory, function(category){ 
                                    category.categoryId =  category.id;
                                    delete category.image;
                                    delete category.metadata;
                                    delete category.published;
                                    delete category.id;
                                    delete category.parentId;
                                });

                                fireRuleModel.productAttributes.push(productAttributesObj);

                                fireRuleModel.member = $rootScope.thisUser.loyaltyUser;

                                delete fireRuleModel.member.id;
                                delete fireRuleModel.member.metadata;
                                delete fireRuleModel.member.referralCode;
                                delete fireRuleModel.member.customAttributes;

                                fireRuleModel.memberActivity.memberId = $rootScope.thisUser.loyaltyUser.memberId;

                                fireRuleModel.memberActivity.transactionAmount = $scope.getTransactionAmountWithQty(productOb.prices[0].effectiveAmount, quantity);

                                LoyaltySvc.fireDummyRule(fireRuleModel).then(

                                    function(fireRuleData) {

                                    $scope.earning.points = fireRuleData.redeemablePointsEarned;
                                    $scope.earning.cash = ( $scope.earning.points * $scope.earning.ratio );
                                    $scope.pointsProcessing = false;
                                    }
                                );

                            }
                        }
                    }
                };

                var productDetailsEvent = $scope.$on('product:details:updated', function (event, productOb) {
                    $scope.product = productOb;
                });


                var productQtyEvent = $scope.$on('product:qty:updated', function (event, quantity) {
                    $scope.quantity = quantity;
                    $scope.getCalculatePoints($scope.product,  $scope.quantity);
                });


                var unBindUserEvent = $rootScope.$on('loyaltyInformation:updated', function (event, eveObj) {
                    $scope.thisUser = $rootScope.thisUser;
                    $scope.getCalculatePoints($scope.product,  $scope.quantity);
                });

                $scope.$on('$destroy', unBindUserEvent);
                $scope.$on('$destroy', productQtyEvent);
                $scope.$on('$destroy', productDetailsEvent);



                $scope.init = function () {
                    $scope.getUser();
                };

                $scope.init();
			}
		]);


    angular.module('ds.loyalty')

        .controller('LoyaltyCartCtrl', ['$rootScope', '$scope', '$injector',

            function ($rootScope, $scope, $injector) {

                var LoyaltySvc = $injector.get('LoyaltySvc');


                $scope.thisUser = $rootScope.thisUser;

                $scope.getUser = function () {

                    $scope.thisUser = $rootScope.thisUser;

                    if ( ! $scope.thisUser ) {
                        LoyaltySvc.getUser();
                    }
                };

                var unBindUserEvent = $rootScope.$on('loyaltyInformation:updated', function (event, eveObj) {
                    $scope.thisUser = $rootScope.thisUser;
                });

                $scope.$on('$destroy', unBindUserEvent);
                
                $scope.earning = {

                    ratio: 0,
                    points: 0,
                    cash: 0
                };

                $scope.getEarningRatio = function(pointsOb) {
                    //changed to getRedeemRatio
                    LoyaltySvc.getRedeemRatio().then(

                        function (earningRatio) {

                            $scope.earning.ratio = earningRatio;

                            $scope.earning.points = pointsOb.redeemablePointsEarned;
                            $scope.earning.cash = ( $scope.earning.points * $scope.earning.ratio );
                        }
                    );  
                };

                $rootScope.$on('rewardPoints:calculated', function (event, pointsOb) {
                    $scope.getEarningRatio(pointsOb);
                });

                $scope.init = function () {
                    $scope.getUser();
                };

                $scope.init();
            }
        ]);

	angular.module('ds.loyalty')

        .controller('LoyaltyConfirmationCtrl', ['$rootScope', '$scope', 'LoyaltySvc',

            function ($rootScope, $scope, LoyaltySvc ) {

                $scope.amounts = {
                	redeemed : 0,
                	earned : 0
                }

                $scope.redeem = {
                	ratio : -1
                };

                $scope.getRedeemRatio = function() {

                    return LoyaltySvc.getRedeemRatio().then(

                        function (redeemRatio) {
                            $scope.redeem.ratio = redeemRatio;
                        }
                    );  
                };

                var unbindOrderEvent =  $rootScope.$on('loyalty:orderId',function(eve,orderId){     	

                	LoyaltySvc.getMemberActivitiesForOrder(orderId).then(
                       
                        function (data) {

							for( var temp = 0; temp < data.length; temp++ ){
								if(data[temp].activityType === "REDEEM"){
									$scope.amounts.redeemed = data[temp].transactionPoints * $scope.redeem.ratio ;
								}
								else if(data[temp].activityType === "ORDER"){
									$scope.amounts.earned = data[temp].transactionPoints * $scope.redeem.ratio ;
								}
							};
                        }
                    ); 
            	});

                $scope.$on('$destroy', unbindOrderEvent)

            	$scope.init = function() {
			        $scope.getRedeemRatio();
			    };

        		$scope.init();


            }
        ]);

    angular.module('ds.loyalty')

        .controller('SignupCheckoutCtrl', ['$rootScope', '$scope', 'LoyaltySvc', '$injector','GlobalData',

            function ($rootScope, $scope, LoyaltySvc, $injector,GlobalData) {

                var $state = $injector.get('$state');
                var CartSvc = $injector.get('CartSvc');

                $scope.thisUser = $rootScope.thisUser;
                $scope.wrongReferral = false;
                $scope.configData = $rootScope.loyaltyConfig;
                $scope.user = {};
                $scope.myUser = {};
                $scope.disableSave = false; 
                var $modal = $injector.get('$modal');
                $scope.thisUser.cart = {

                }
                
                var unBindUserEvent = '';


                $scope.getUser = function () {

                    $scope.thisUser = $rootScope.thisUser;
                    unBindUserEvent = $scope.$broadcast('user:gotInfo', $scope.thisUser);
                };

                var unBindGotuserInfo = $scope.$on('user:gotInfo', function(event, userData) {
                    if( !$scope.thisUser.isMember ){
                        $scope.getLoyaltyPrograms();
                    }
                });


                $scope.wantLoyaltyProgram = false;

                var unBindUserEvent = $rootScope.$on('loyaltyInformation:updated', function (event, eveObj) {
                    $scope.thisUser = $rootScope.thisUser;
                    $scope.getLoyaltyPrograms();
                });

                $scope.getLoyaltyPrograms = function () {
                    
                    LoyaltySvc.getLoyaltyPrograms().then(

                        function(loyaltyProgramdata) {
                          
                            $scope.loyaltyProgram = loyaltyProgramdata[0];
                            $scope.userProgramName = $scope.loyaltyProgram.loyaltyProgramName;
                        }
                    );
                 };

                $scope.getLoyaltyProgramMembership = function() {
                    $scope.wrongReferral = false;

                    if($scope.configData.enableTellAFriend){
                         modalInstance = $modal.open({
                        templateUrl: 'js/app/loyalty/templates/signup_for_loyalty_program_modal.html',
                        scope: $scope
                    });
                    }
                    else
                    {
                        $scope.registerCustomerForProgram();
                    }                   
                };

                $scope.init = function () {
                   /* $scope.thisUser.cart = CartSvc.getLocalCart();
                    if ( $scope.thisUser.cart.items instanceof Array ) {*/
                        $scope.getUser();
                   /* }*/
                };

                $scope.init();

               /* var unBindOrderPlaced = $rootScope.$on('order:placed', function (eve, orderData) {
                    if ( ! $scope.thisUser.isMember ) {
                        $scope.register();
                        $scope.thisUser.isMember = false;
                    }
                });

               $scope.$on('$destroy', unBindOrderPlaced);*/
                var modalInstance = {

                };

                $scope.closeModal = function() {
                    modalInstance.close();
                };




                var loyaltyProgramRegistration = function (user) {
                    LoyaltySvc.registerForMembership(user).then(function (response) {
                        $scope.wrongReferral = false;
                        $scope.disableSave = false; 
                        LoyaltySvc.getMemberData(user.customerId);
                        if ( $scope.configData.enableTellAFriend ) {
                            $scope.closeModal();
                        }
                    }, function (error) {
                        $scope.wrongReferral = true;
                        $scope.disableSave = false; 
                        $scope.myUser.referraledCode = "";
                    });
                };

                $scope.registerCustomerForProgram = function () {   

                    $scope.disableSave = true;     
                    var user = {
                        email: $scope.thisUser.hybrisUser.contactEmail,
                        customerId: $scope.thisUser.hybrisUser.id,
                        loyaltyProgramId: $scope.loyaltyProgram.programId,
                        firstName: $scope.thisUser.hybrisUser.firstName,
                        lastName: $scope.thisUser.hybrisUser.lastName,
                        referralCode: $scope.myUser.referraledCode
                    };

                    LoyaltySvc.checkForHybrisProfileSubscription().then(function (subscriptionData) {
                        try {
                            return ( subscriptionData.status === 'ACTIVE' );
                        } catch ( exception ) {
                            return false;
                        }
                    }).then(function (subscriptionStatus) {
                        if ( subscriptionStatus ) {
                            LoyaltySvc.getHybrisProfileConsentReference().then(function (consentReferenceData) {
                                user = angular.extend(user, {
                                    customAttributes: [{
                                        cname: 'consentReference',
                                        cvalue: consentReferenceData.id
                                    }]
                                });
                                loyaltyProgramRegistration(user);
                            });
                        } else {
                            loyaltyProgramRegistration(user);
                        }
                    }, function (response) {
                        loyaltyProgramRegistration(user);
                    });
                };
            }
        ])
    ;


    angular.module('ds.loyalty')

        .controller('LoyaltyCheckoutCartCtrl', ['$rootScope', '$scope', '$injector',

            function ($rootScope, $scope, $injector) {

                var LoyaltySvc = $injector.get('LoyaltySvc');

                $scope.thisUser = $rootScope.thisUser;

                $scope.getUser = function () {

                    $scope.thisUser = $rootScope.thisUser;

                    if ( ! $scope.thisUser ) {
                        LoyaltySvc.getUser();
                    } else {
                        $rootScope.calculatePoints();
                    }
                };

                var unBindUserEvent = $rootScope.$on('loyaltyInformation:updated', function (event, eveObj) {
                    $scope.thisUser = $rootScope.thisUser;
                });

                $scope.$on('$destroy', unBindUserEvent);
                
                $scope.earning = {

                    ratio: 0,
                    points: 0,
                    cash: 0
                };

                $scope.getEarningRatio = function(pointsOb) {
                    //changed to getRedeemRatio
                    LoyaltySvc.getRedeemRatio().then(

                        function (earningRatio) {

                            $scope.earning.ratio = earningRatio;

                            $scope.earning.points = pointsOb.redeemablePointsEarned;
                            $scope.earning.cash = ( $scope.earning.points * $scope.earning.ratio );
                        }
                    );  
                };

                var unBindPointsEvent =  $rootScope.$on('rewardPoints:calculated', function (event, pointsOb) {
                    $scope.getEarningRatio(pointsOb);
                });

                $scope.$on('$destroy', unBindPointsEvent);


                $scope.init = function () {
                    $scope.getUser();
                };

                $scope.init();
            }
        ]);

/*

	angular.module('ds.loyalty')

		.controller('LoyaltyCheckoutCartCtrl', ['$rootScope', '$scope', '$injector','GlobalData',

			function ($rootScope, $scope, $injector,GlobalData) {

               var LoyaltySvc = $injector.get('LoyaltySvc');


                $scope.thisUser = $rootScope.thisUser;

                $scope.getUser = function () {

                    $scope.thisUser = $rootScope.thisUser;

                    if ( $scope.thisUser ) {

                        if ( ! $rootScope.calculatedPointsData ) {
                            //$rootScope.calculatePoints();
                        }                        
                    }
                };

                var unBindUserEvent = $rootScope.$on('loyaltyInformation:updated', function (event, eveObj) {
                    $scope.thisUser = $rootScope.thisUser;
                });

                $scope.$on('$destroy', unBindUserEvent);


                
                $scope.earning = {

                    ratio: 0,
                    points: 0,
                    cash: 0
                };

                $scope.getEarningRatio = function(pointsOb) {

                    LoyaltySvc.getEarningRatio().then(

                        function (earningRatio) {

                            $scope.earning.ratio = earningRatio;

                            $scope.earning.points = pointsOb.redeemablePointsEarned;
                            $scope.earning.cash = ( $scope.earning.points * $scope.earning.ratio );
                        }
                    );  
                };

                $rootScope.$on('rewardPoints:calculated', function (event, pointsOb) {
                    $scope.getEarningRatio(pointsOb);
                });



                $scope.init = function () {
                    console.dir('init');
                    $scope.getUser();
                };

                $scope.init();
			}
		]);*/
angular.module('ds.loyalty')

.controller('RatingReviewCtrl', ['$rootScope', '$scope', '$injector',

    function($rootScope, $scope, $injector) {

        var $modal = $injector.get('$modal');
        var LoyaltySvc = $injector.get('LoyaltySvc');


        var productId = $injector.get('$stateParams').productId;


        $scope.thisUser = $rootScope.thisUser;




        $scope.pageNumber = 1;
        $scope.pageSize = 10;


        var modalInstance = '';

        $scope.reviewRatingData = [];
        $scope.avgRating = 0;
        $scope.ratingArray = [];

        $scope.customerExist = true;
        $scope.errorRating = false;
        $scope.isAddReview = false;
        $scope.disabledSave = false;
        $scope.showRatingPoint = false;
        $scope.showReviewPoint = false;

        $scope.ratingData = {
                                
            ratings: []
        };


        /*$scope.getDate = function(input) {
            return new Date(input);
        };*/

        $scope.getRatingPoints = function(){
            var fireRuleObject = LoyaltySvc.getFireRuleOjbect();
            fireRuleObject.member = $scope.thisUser.loyaltyUser;

                delete fireRuleObject.member.id;
                delete fireRuleObject.member.metadata;
                delete fireRuleObject.member.referralCode;
                delete fireRuleObject.member.customAttributes;

            fireRuleObject.memberActivity.memberId = $scope.thisUser.loyaltyUser.memberId;
            fireRuleObject.ruleType = 'ACTIVITY';
            fireRuleObject.memberActivity.activityType = 'RATING';
            LoyaltySvc.fireDummyRule(fireRuleObject).then(

                function(fireRuleData) {
                    $scope.showRatingPoint = true;
                    $scope.ratingPoint = fireRuleData.qualifyingPointsEarned;

                },
                function (error){
                    $scope.showRatingPoint = false;
                });


        };

        $scope.getReviewPoints = function(){
            var fireRuleObject = LoyaltySvc.getFireRuleOjbect();
            fireRuleObject.member = $scope.thisUser.loyaltyUser;

                delete fireRuleObject.member.id;
                delete fireRuleObject.member.metadata;
                delete fireRuleObject.member.referralCode;
                delete fireRuleObject.member.customAttributes;

            fireRuleObject.memberActivity.memberId = $rootScope.thisUser.loyaltyUser.memberId;
            fireRuleObject.ruleType = 'ACTIVITY';
            fireRuleObject.memberActivity.activityType = 'REVIEW';
            LoyaltySvc.fireDummyRule(fireRuleObject).then(

                function(fireRuleData) {
                    $scope.showReviewPoint = true;
                    $scope.reviewPoint = fireRuleData.qualifyingPointsEarned;

                },
                function (error){
                    $scope.showReviewPoint = false;
                });


        };


        $scope.getReviewerExist = function(isAddReview,rating) {

            var user = 'customerId:' + $scope.thisUser.hybrisUser.id;

            if(isAddReview === true){
                $scope.customerExist = true;
                $scope.myRating = rating.toFixed(1);

            }

            else{
                LoyaltySvc.getProductReviewer(productId, user).then(

                function (reviewerData) {

                    if (reviewerData.length === 0) {
                        $scope.customerExist = false;
                    }
                    else {
                        $scope.customerExist = true;
                        $scope.myRating = (reviewerData[0].rating).toFixed(1);
                    }
                }
            );
            }

            
        };


        $scope.getUser = function() {

            LoyaltySvc.getUser().then(

                function(userData) {
                    if($scope.thisUser.loyaltyUser.memberId){
                        $scope.getRatingPoints();
                        $scope.getReviewPoints();
                    }
                    $scope.getProductDetails();
                    $scope.getReviewerExist();
                }
            );
        };

        $scope.getProductDetails = function() {

            LoyaltySvc.getProductDetails(productId).then(

                function(productData) {

                    $scope.product = productData;
                    $scope.$emit('product:updated', productData);
                }
            );
        };


        $scope.totalRatingReviews = 0;
        $scope.totalReviewsToShow = 0;

        $scope.getProductAvgRating = function () {

            $scope.totalRatingReviews = 0;
            $scope.totalReviewsToShow = 0;

            LoyaltySvc.getProductAvgRating(productId).then(

                function(productAvgRatingData) {

                    if (productAvgRatingData.avg) {

                        $scope.avgRatingModel = (productAvgRatingData.avg.rating).toFixed(1);

                        $scope.avgRating = Math.round( productAvgRatingData.avg.rating );
                        $scope.floorRating = Math.floor(productAvgRatingData.avg.rating);
                        $scope.avgRatingView = Math.floor( ( ( productAvgRatingData.avg.rating - $scope.floorRating ) * 100 ) ) - 10;

                        $scope.totalRatingReviews = productAvgRatingData.count;
                        $scope.totalReviewsToShow = productAvgRatingData.reviewCount;


                        //$scope.getProductReviewCount();

                        /*if(isAddReview)
                        $scope.getProductReviewRating(isAddReview);

                        else
                        $scope.getProductReviewRating();   */ 
                    }
                }
            );
        };
       /* $scope.getProductReviewCount = function(){
            $scope.totalReviewsToShow = 0;
            LoyaltySvc.getProductReviewCount(productId).then(

                function(productReviewData) {
                   
                        $scope.totalReviewsToShow = $scope.totalRatingReviews - productReviewData.count;
                                           
                }
            );
        };*/

        $scope.ratingArray = [];

        $scope.getProductRatingCounts = function() {

            $scope.ratingArray = [];

            LoyaltySvc.getProductRatingCounts(productId).then(

                function(productRatingCountData) {

                    if (productRatingCountData) {

                        angular.forEach(productRatingCountData, function (ratingOb) {
                            $scope.ratingArray.push(ratingOb);
                        });
                    }
                }
            );
        };

        $scope.$on('product:updated', function (event, data) {

            //$scope.thisUser.isUser

           
                $scope.isAddReview = true;
                $scope.getProductAvgRating();
                $scope.getProductRatingCounts();
                $scope.getProductReviewRating($scope.isAddReview);

                   
        });




        $scope.processing = false;
        $scope.reviewRatingData = [];

        $scope.getProductReviewRating = function(isAddReview) {

            if(isAddReview){
                $scope.pageNumber = 1;
                $scope.reviewRatingData = [];
            }
            else{
                 $scope.reviewRatingData = $scope.reviewRatingData || [];
            }

           

            var query = 'pageSize=' + $scope.pageSize + '&pageNumber=' + $scope.pageNumber + '&sort=metadata:desc';

            if ( ! $scope.processing && ( $scope.reviewRatingData.length < $scope.totalRatingReviews ) ||  ! $scope.processing && isAddReview) {

                $scope.processing = true;

                LoyaltySvc.getProductReviewRating(productId, query).then(

                    function(reviewRatingData) {

                        $scope.processing = false;

                        if (reviewRatingData.length > 0) {
                            $scope.isAddReview = false;

                            reviewRatingData.forEach(function (ratingOb) {

                                var ratingObject = angular.copy(ratingOb);

                                LoyaltySvc.getFormattedDate(ratingObject.metadata.createdAt).then(

                                    function (translatedDate) {

                                        ratingObject.createdDate = translatedDate;
                                         $scope.reviewRatingData.push(ratingObject);
                                        /* if ( ratingObject.reviewTitle === '' && ratingObject.reviewComment === '' ) {
                                            $scope.totalReviewsToShow -= 1;
                                        }
*/
                                    });
                                
                            });

                            $scope.pageNumber += 1;
                        }
                    }
                );
            }
        };



        $scope.reviewProductCtrl = function($scope) {


            $scope.productName = $scope.product.name;

            if ($scope.thisUser.hybrisUser.firstName === undefined) {
                $scope.thisUser.hybrisUser.firstName = '';
            }

            if ($scope.thisUser.hybrisUser.lastName === undefined) {
                $scope.thisUser.hybrisUser.lastName = '';
            }

            var userFullname = $scope.thisUser.hybrisUser.firstName + ' ' + $scope.thisUser.hybrisUser.lastName;

            $scope.review = {
                ratingId: '',
                sku: productId,
                rating: 0,
                reviewerName: userFullname,
                customerId: $scope.thisUser.hybrisUser.id,
                reviewTitle: '',
                reviewComment: '',
                reviewStatus: 'PUBLISHED'
            };

            $scope.ratingText = [
                'RATING_TEXT0',
                'RATING_TEXT1',
                'RATING_TEXT2',
                'RATING_TEXT3',
                'RATING_TEXT4',
                'RATING_TEXT5'
            ];

            $scope.closeModal = function() {
                modalInstance.close();
            };

            $scope.postReviewRating = function(reviewModel) {

                

                if ( reviewModel.rating === 0 ) {
                    $scope.errorRating = true;
                } 

                else {
                    $scope.disabledSave = true;

                    LoyaltySvc.postProductReviewRating(reviewModel).then(

                        function (response) {
                            $scope.isAddReview = true;
                            $scope.disabledSave = false;
                            $scope.closeModal();
                            $scope.getReviewerExist($scope.isAddReview,reviewModel.rating);
                            $scope.getProductAvgRating();
                            $scope.getProductRatingCounts();
                            $scope.getProductReviewRating($scope.isAddReview);
                            


                        },

                        function (error){
                            $scope.closeModal();
                            $scope.disabledSave = false;
                        }
                    );
                }
            };
        };

        var modalInstance = {

        };

        $scope.openWriteReviewModal = function() {

            modalInstance = $injector.get('$modal').open({
                templateUrl: 'js/app/loyalty/templates/write_product_review.html',
                controller: 'reviewProductCtrl',
                scope: $scope
            });
        };


        $scope.ratingToPercentage = function(val, maxVal) {
            return parseFloat(100 * (val / maxVal));
        };

        $scope.gotoProductSpecificPage = function (pageType) {

            $injector.get('$state').go('base.product.' + pageType, {
                productId: productId
            });
        };

        $scope.getProductReviews = function() {

            if ( $scope.totalRatingReviews > 0 ) {
                $scope.gotoProductSpecificPage('review');               
            }
        };

        $scope.gotoProductDetailPage = function() {
            $scope.gotoProductSpecificPage('detail');
        };


        var unBindUserEvent = $rootScope.$on('loyaltyInformation:updated', function(event, eveObj) {
            $scope.thisUser = $rootScope.thisUser;
        });

        $scope.$on('$destroy', unBindUserEvent);

        $rootScope.$on('user:signedin', function(event, data) {
            $scope.init();
        });

        $rootScope.$on('user:signedout', function(event, data) {
            $scope.init();
        });


        $scope.init = function() {
            $scope.getUser();
        };

        $scope.init();
    }
]);


	angular.module('ds.loyalty')

        .controller('OrderDetailCtrl', ['$rootScope', '$scope', 'LoyaltySvc',

            function ($rootScope, $scope, LoyaltySvc ) {

                $scope.amounts = {
                	redeemed : 0,
                	earned : 0
                }

                $scope.redeem = {
                	ratio : -1
                };

                $scope.points = {
                    redeemed : 0,
                    earned : 0
                }

                $scope.getRedeemRatio = function() {

                    return LoyaltySvc.getRedeemRatio().then(

                        function (redeemRatio) {
                            $scope.redeem.ratio = redeemRatio;
                        }
                    );  
                };

                var unbindOrderEvent =  $rootScope.$on('loyalty:orderId',function(eve,orderId){     	

                	LoyaltySvc.getMemberActivitiesForOrder(orderId).then(
                       
                        function (data) {

							for( var temp = 0; temp < data.length; temp++ ){
								if(data[temp].activityType === "REDEEM"){
                                    $scope.points.redeemed = data[temp].transactionPoints;
									$scope.amounts.redeemed = data[temp].transactionPoints * $scope.redeem.ratio ;
								}
								else if(data[temp].activityType === "ORDER"){
                                    $scope.points.earned = data[temp].transactionPoints;
									$scope.amounts.earned = data[temp].transactionPoints * $scope.redeem.ratio ;
								}
							};
                        }
                    ); 
            	});

                $scope.$on('$destroy', unbindOrderEvent)

            	$scope.init = function() {
			        $scope.getRedeemRatio();
			    };

        		$scope.init();


            }
        ]);


	angular.module('ds.loyalty')

		.controller('GoogleWalletCtrl', ['$rootScope', '$scope', '$injector','$stateParams','LoyaltySvc',

			function ($rootScope, $scope, $injector, $stateParams, LoyaltySvc) {

                $scope.customerId = $stateParams.customerId;

                $scope.getJwtToken = function(){
                    LoyaltySvc.getJWTForGoogleWallet($scope.customerId).then(

                        function(walletData) {
                            
                            gapi.savetowallet.render('saveToWallet', {
                                'jwt': walletData.tokenString
                            });
                        }
                    );
                };

                 $scope.getJwtToken();


			}
		]);
/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

(function () {

    try {
        angular.element( document ).ready( function () {
            angular.bootstrap( document, ['ds.app'] );
        });

    } catch (exception) {
        console.error('Unable to invoke angular.bootstrap:');
        console.error(exception);
    }

})();

/**
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2015 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 */

'use strict';

/**  Initializes and configures the application. */
window.app = angular.module('ds.app', [
    'restangular',
    'ds.i18n',
    'ui.router',   
    'ds.shared',
    'ds.security',
    'ds.home',
    'ds.products',
    'ds.cart',
    'ds.checkout',
    'ds.confirmation',
    'ds.coupon',
    'ds.account',
    'ds.addresses',
    'ds.auth',
    'ds.orders',
    'ds.queue',
    'ds.router',
    'ds.httpproxy',
    'ds.errors',
    'ds.backendMock',
    'xeditable',
    'ngSanitize',
    'ui.select',
    'ui-notification',
    'ds.ybreadcrumb',
    'ds.ytracking',
    'ds.localstorage',
    'ds.appconfig',
    'ds.searchlist',
    'ds.ysearch',
    'angular-flash.service',
    'angular-flash.flash-alert-directive',
    'ds.loyalty'

])
    .constant('_', window._)

    // Configure HTTP and Restangular Providers - default headers, CORS
    .config(['$httpProvider', 'RestangularProvider', 'settings', 'appConfig',
        function ($httpProvider, RestangularProvider, settings, appConfig) {
        $httpProvider.interceptors.push('interceptor');

        // enable CORS
        $httpProvider.defaults.useXDomain = true;
        RestangularProvider.addFullRequestInterceptor( function(element, operation, route, url, headers, params, httpConfig) {

            var oldHeaders = {};
            if(url.indexOf('yaas') < 0) {
                delete $httpProvider.defaults.headers.common[settings.headers.hybrisAuthorization];
                //work around if not going through Apigee proxy for a particular URL, such as while testing new services
                oldHeaders [settings.headers.hybrisTenant] = appConfig.storeTenant();
                oldHeaders [settings.headers.hybrisRoles] = settings.roleSeller;
                oldHeaders [settings.headers.hybrisUser] = settings.hybrisUser;
                oldHeaders [settings.headers.hybrisApp] = settings.hybrisApp;
            }
            return {
                element: element,
                params: params,
                headers: _.extend(headers, oldHeaders),
                httpConfig: httpConfig
            };
        });
    }])

    .run(['$rootScope', '$injector','ConfigSvc', 'AuthDialogManager', '$location', 'settings', 'TokenSvc',
       'AuthSvc', 'GlobalData', '$state', 'httpQueue', 'editableOptions', 'editableThemes', 'CartSvc', 'EventSvc',
        function ($rootScope, $injector, ConfigSvc, AuthDialogManager, $location, settings, TokenSvc,
                 AuthSvc, GlobalData, $state, httpQueue, editableOptions, editableThemes, CartSvc, EventSvc) {

            //closeOffcanvas func for mask
            $rootScope.closeOffcanvas = function(){
                $rootScope.showMobileNav = false;
                $rootScope.showCart = false;
            };

            editableOptions.theme = 'bs3';
            editableThemes.bs3.submitTpl = '<button type="submit" class="btn btn-primary">{{\'SAVE\' | translate}}</button>';

            $rootScope.$on('authtoken:obtained', function(event, token){
                httpQueue.retryAll(token);
            });

            $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState){
                AuthDialogManager.close();
                var needsAuthentication = toState.data && toState.data.auth && toState.data.auth === 'authenticated';
                toState.repeat = false;

                if ( needsAuthentication && !AuthSvc.isAuthenticated() ) {
                    // block immediate state transition
                    event.preventDefault();
                    if(!fromState.name){
                        $state.go(settings.homeState);
                    }

                   var dlg = $injector.get('AuthDialogManager').open({windowClass:'mobileLoginModal'}, {}, {}, false);
                   dlg.then(function(){
                            $state.go(toState, toParams);
                        },
                        function(){
                            $state.go(settings.homeState);
                    });
                }
            });

            $rootScope.$on('$stateChangeSuccess', function(){
                $rootScope.$emit('cart:closeNow');
            });

            // Implemented as watch, since client-side determination of "logged" in depends on presence of token in cookie,
            //   which may be removed by browser/user
            $rootScope.$watch(function () {
                return AuthSvc.isAuthenticated();
            }, function (isAuthenticated, wasAuthenticated) {
                $rootScope.$broadcast(isAuthenticated ? 'user:signedin' : 'user:signedout', {new: isAuthenticated, old: wasAuthenticated});
                GlobalData.user.isAuthenticated = isAuthenticated;
            });

            $rootScope.$on('site:updated', function () {
                EventSvc.onSiteChange();
            });

            $rootScope.$on('language:updated', function (event, eveObj) {
                EventSvc.onLanguageChange(event, eveObj);
            });

            // setting root scope variables that drive class attributes in the BODY tag
            $rootScope.showCart =false;
            $rootScope.showMobileNav=false;
        


            $rootScope.thisUser = '';

            $rootScope.$on('user:signedout', function (event, eveObj) {
                $rootScope.thisUser = '';
                $rootScope.$broadcast('user:updated', false);
                $rootScope.$broadcast('loyaltyInformation:updated', $rootScope.thisUser);
            });

            $rootScope.$on('user:signedin', function (event, eveObj) {
                $rootScope.thisUser = '';
                $rootScope.$broadcast('user:updated', true);
                $rootScope.$broadcast('loyaltyInformation:updated', $rootScope.thisUser);
            });





            $rootScope.loyaltyConfig = {

                showReward: false,
                showCashBal: false,
                enableTellAFriend : false
            };

            var LoyaltySvc = $injector.get('LoyaltySvc');

            LoyaltySvc.getConfigData().then(

                function (configData) {

                    LoyaltySvc.getSilentGratification();
                    LoyaltySvc.getShowCash();
                    LoyaltySvc.getEnableTellAFriend();
                    LoyaltySvc.getUser();
                }
            );


            $rootScope.isConfigMaintained = false;

            $rootScope.dummyFireProcessing = false;

            $rootScope.calculatePoints = function (cartOb) {

                var cart = {

                };

                if (cartOb) {
                    cart = cartOb.cart;
                } 

                else {
                    cart = CartSvc.getLocalCart();
                }
                
                if ( cart && angular.isArray( cart.items ) ) {

                    if ( $rootScope.thisUser === '' ) {
                        LoyaltySvc.getUser();
                    }

                    else {

                        if ( $rootScope.thisUser.isMember ) {

                            $rootScope.dummyFireProcessing = true;

                            var fireRuleObject = LoyaltySvc.getFireRuleOjbect();

                            LoyaltySvc.getProductAttributes(cart).then(function(productAttributes){

                                fireRuleObject.productAttributes = productAttributes;
                            
                                fireRuleObject.member = $rootScope.thisUser.loyaltyUser;

                                delete fireRuleObject.member.id;
                                delete fireRuleObject.member.metadata;
                                delete fireRuleObject.member.referralCode;
                                delete fireRuleObject.member.customAttributes;

                            fireRuleObject.orderAttributes.total = cart.totalPrice.amount;
                            fireRuleObject.orderAttributes.subTotal = cart.subTotalPrice.amount;
                            fireRuleObject.orderAttributes.shippingAmount = cart.shipping.fee.amount;
                            
                            fireRuleObject.memberActivity.memberId = $rootScope.thisUser.loyaltyUser.memberId;
                            fireRuleObject.memberActivity.transactionAmount = cart.subTotalPrice.amount || 0;
                            LoyaltySvc.fireDummyRule(fireRuleObject).then(

                                function(fireRuleData) {

                                    $rootScope.dummyFireProcessing = false;

                                    $rootScope.calculatedPointsData = fireRuleData;
                                    $rootScope.$emit('rewardPoints:calculated', fireRuleData);
                                }
                            );
                            });
                            
                        }
                    }
                }
            };


            $rootScope.$on('cart:updated', function (event, cartOb) {
                if(cartOb.cart.items &&  cartOb.cart.items.length>0 ) {
                    $rootScope.calculatePoints(cartOb);
                }
            });

            $rootScope.$on('loyaltyInformation:updated', function (event, eveObj) {
                $rootScope.calculatePoints();
            });







        }

    ]);



angular.module('ds.app').run(['$templateCache', function($templateCache) {
  'use strict';

  $templateCache.put('js/app/account/directives/customer-details/customer-details.html',
    "<section class=\"white\" ng-cloak>\n" +
    "    <div class=\"container-fluid\">\n" +
    "        <div class=\"row\">\n" +
    "            <div class=\"page-headline hidden-xs\">\n" +
    "                <h1>\n" +
    "                    <small>{{'MY_ACCOUNT' | translate}}</small>\n" +
    "                    <span class=\"welcomeTxt pull-left\">{{'WELCOME' | translate}} <span ng-if=\"account.firstName\" id=\"accountFirstName\">{{account.firstName}}</span></span>\n" +
    "                    <img src=\"./img/user-icon_big.png\" class=\"img-circle pull-left \" />\n" +
    "                </h1>\n" +
    "            </div>\n" +
    "            <div class=\"page-headline mobile hidden-sm hidden-md hidden-lg\">\n" +
    "                <h1>\n" +
    "                    <small>{{'MY_ACCOUNT' | translate}}</small>\n" +
    "                    <div>\n" +
    "                        <img src=\"./img/user-icon_big.png\" class=\"img-circle\" />\n" +
    "                    </div>\n" +
    "                    <span class=\"welcomeTxt pull-left\">{{'WELCOME' | translate}} <span ng-if=\"account.firstName\">{{account.firstName}}</span></span>\n" +
    "\n" +
    "                </h1>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- desktop display -->\n" +
    "        <div class=\"row userInfoRow hidden-xs desktopUserInfo\" ng-if=\"account\">\n" +
    "\n" +
    "            <div class=\"col-sm-1 editLinkContainer\">\n" +
    "                <a ng-click=\"editUserName(account)\"><span id=\"edit-user-info\" class=\"glyphicon glyphicon-pencil\"></span></a>\n" +
    "            </div>\n" +
    "            <div class=\"col-sm-3 col-md-3\">\n" +
    "                <span class=\"dataLabel\">{{'NAME' | translate}}</span>\n" +
    "                {{account.title|translate}} {{account.firstName}} {{account.middleName}} {{account.lastName}}\n" +
    "            </div>\n" +
    "            <div class=\"col-sm-1 editLinkContainer\">\n" +
    "                <a ng-click=\"editUserEmail(account)\"><span id=\"update-email\" class=\"glyphicon glyphicon-pencil\"></span></a>\n" +
    "            </div>\n" +
    "            <div class=\"col-sm-3\">\n" +
    "                <span class=\"dataLabel\">{{'EMAIL' | translate}}</span>\n" +
    "                {{account.contactEmail}}\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"col-sm-1 editLinkContainer\">\n" +
    "                <a ng-click=\"updatePassword()\"><span id=\"update-password\" class=\"glyphicon glyphicon-pencil\"></span></a>\n" +
    "            </div>\n" +
    "            <div class=\"col-sm-3\">\n" +
    "                <span class=\"dataLabel\">{{'PASSWORD' | translate}}</span>\n" +
    "                &#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <!-- /desktop -->\n" +
    "\n" +
    "        <!-- mobile display -->\n" +
    "        <div class=\"row userInfoRow mobile hidden-sm hidden-md hidden-lg\" ng-if=\"account\">\n" +
    "\n" +
    "            <div class=\"col-xs-8\">\n" +
    "                <div class=\"mobileDataSection\">\n" +
    "                    <span class=\"dataLabel locale\">{{'NAME' | translate}}</span>\n" +
    "                    {{account.title|translate}} {{account.firstName}} {{account.middleName}} {{account.lastName}}\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"col-xs-4\">\n" +
    "                <button class=\"btn btn-secondary btn-md pull-right\" ng-click=\"editUserName(account)\">{{'EDIT' | translate}}</button>\n" +
    "            </div>\n" +
    "            <div class=\"col-xs-8\">\n" +
    "                <div class=\"mobileDataSection\">\n" +
    "                    <span class=\"dataLabel locale\">{{'EMAIL' | translate}}</span>\n" +
    "                    {{account.contactEmail}}\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"col-xs-4\">\n" +
    "                <button class=\"btn btn-secondary btn-md pull-right\" ng-click=\"editUserEmail(account)\">{{'EDIT' | translate}}</button>\n" +
    "            </div>\n" +
    "            <div class=\"col-xs-8\">\n" +
    "                <div class=\"mobileDataSection\">\n" +
    "                    <span class=\"dataLabel\">{{'PASSWORD' | translate}}</span>\n" +
    "                    &#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"col-xs-4\">\n" +
    "                <button class=\"btn btn-secondary btn-md pull-right\" ng-click=\"updatePassword()\">{{'EDIT' | translate}}</button>\n" +
    "            </div>\n" +
    "\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"row\" ng-if=\"account\">\n" +
    "            <div class=\"col-sm-12\" ng-include src=\"'js/app/loyalty/templates/user_reward_program.html'\"></div>\n" +
    "        </div>\n" +
    "\n" +
    "\n" +
    "        <!-- /mobile display -->\n" +
    "\n" +
    "        <div>\n" +
    "            <p ng-if=\"!account\">{{'FAIL_CUSTOMER_DETAILS' | translate}}</p>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "</section>"
  );


  $templateCache.put('js/app/account/templates/account.html',
    "<!--\n" +
    "~ [y] hybris Platform\n" +
    "~\n" +
    "~ Copyright (c) 2000-2015 hybris AG\n" +
    "~ All rights reserved.\n" +
    "~\n" +
    "~ This software is the confidential and proprietary information of hybris\n" +
    "~ (\"Confidential Information\"). You shall not disclose such Confidential\n" +
    "~ Information and shall use it only in accordance with the terms of the\n" +
    "~ license agreement you entered into with hybris.\n" +
    "-->\n" +
    "<div class=\"account\">\n" +
    "\n" +
    "    <customer-details account=\"account\"></customer-details>\n" +
    "\n" +
    "\n" +
    "\r" +
    "\n" +
    "  <section class=\"lightgray\" ng-cloak>\n" +
    "    <div class=\"container-fluid\">\n" +
    "      <div class=\"row\">\n" +
    "          <div class=\"col-xs-12\">\n" +
    "            <div class=\"section-headline clearfix\">\n" +
    "              <h2 class=\"pull-left\">{{'ADDRESSBOOK' | translate}}</h2>\n" +
    "              <button id=\"add-address-btn\" class=\"btn btn-secondary btn-md pull-right\" ng-click=\"openAddressModal()\">\n" +
    "              {{'ADD' | translate}}\n" +
    "              </button>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"row\">\n" +
    "        <div ng-include=\"'js/app/account/templates/addresses.html'\"></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"text-center\" ng-if=\"showAddressButtons\">\n" +
    "        <button class=\"btn btn-link\" ng-show=\"showAllAddressButton\" ng-click=\"showAllAddresses()\">{{'SHOW_ALL' | translate}} <span class=\"glyphicon glyphicon-chevron-down\"/></button>\n" +
    "        <button class=\"btn btn-link\" ng-show=\"!showAllAddressButton\" ng-click=\"showAllAddresses()\">{{'SHOW_LESS' | translate}} <span class=\"glyphicon glyphicon-chevron-up\"/></button>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </section>\n" +
    "  <section class=\"mediumgray\" ng-cloak>\n" +
    "    <div class=\"container-fluid\">\n" +
    "      <div class=\"section-headline clearfix\">\n" +
    "        <h2>{{'ORDER_HISTORY' | translate}}</h2>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"hidden-md hidden-lg row\">\n" +
    "        <div ng-repeat=\"m_order in orders | limitTo: showOrdersFilter\" class=\"col-sm-4 col-xs-12 orderHistoryCard\" ng-class=\"{'green': order.status == 'CREATED' || order.status == 'CONFIRMED' || order.status == 'SHIPPED', 'red':  order.status == 'DECLINED', 'blue': order.status == 'COMPLETED' }\">\n" +
    "            <div class=\"cardStatusIdentifier pull-left\" ></div>\n" +
    "            <div class=\"panel\">\n" +
    "                <div class=\"panel-body \" >\n" +
    "                    <div class=\"row\">\n" +
    "                        <div class=\"col-sm-8 col-xs-8 leftCol\">\n" +
    "                            <p>\n" +
    "                              <strong>{{'PLACED_AT'|translate}}</strong><br/>\n" +
    "                              {{m_order.created | date: 'medium'}}\n" +
    "                            </p>\n" +
    "                            <p>\n" +
    "                                <strong>{{'ORDER_NUMBER'|translate}}</strong><br/>\n" +
    "                                <a ui-sref=\"base.orderDetail({orderId: m_order.id})\">{{m_order.id}}</a>\n" +
    "                            </p>\n" +
    "                            <p>\n" +
    "                                <strong>{{'ITEMS_IN_ORDER'|translate}}</strong><br/>\n" +
    "                                {{m_order.entries|sumByKey:'amount'|showNoOfItems}}\n" +
    "                            </p>\n" +
    "                            <p>{{m_order.totalPrice | currency: m_order.currencySymbol}}</p>\n" +
    "                        </div>\n" +
    "                        <div class=\"col-sm-4 col-xs-4\">\n" +
    "                          <p><strong>{{m_order.status}}</strong></p>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\n" +
    "      <div ng-if=\"orders.length\"  class=\"table-responsive hidden-sm hidden-xs\">\n" +
    "        <table class=\"table\">\n" +
    "          <thead>\n" +
    "            <tr>\n" +
    "              <th>{{'DATE' | translate}}</th>\n" +
    "              <th>{{'ORDER_NUMBER' | translate}}</th>\n" +
    "              <th>{{'ITEMS_IN_ORDER' | translate}}</ht>\n" +
    "              <th>{{'ORDER_TOTAL' | translate}}</th>\n" +
    "              <th>{{'ORDER_STATUS' | translate}}</th>\n" +
    "            </tr>\n" +
    "          </thead>\n" +
    "          <tbody>\n" +
    "              <tr ng-repeat=\"xrder in orders | limitTo: showOrdersFilter \">\n" +
    "                  <td>{{xrder.created | date: 'medium'}}</td>\n" +
    "                  <td><a ui-sref=\"base.orderDetail({orderId: xrder.id})\">{{xrder.id}}</a></td>\n" +
    "                  <td>{{xrder.entries|sumByKey:'amount'|showNoOfItems}}</td>\n" +
    "                  <td>{{xrder.totalPrice | currency: xrder.currencySymbol}}</td>\n" +
    "                  <td><strong>{{xrder.status}}</strong></td>\n" +
    "              </tr>\n" +
    "          </tbody>\n" +
    "        </table>\n" +
    "      </div>\n" +
    "\n" +
    "      <p ng-if=\"!orders.length && orders.headers\">{{'NO_ORDERS' | translate}}</p>\n" +
    "      <p ng-if=\"!orders.length && !orders.headers\">{{'FAIL_ORDER' | translate}}</p>\n" +
    "\n" +
    "      <div class=\"text-center\" ng-if=\"showOrderButtons\">\n" +
    "        <button class=\"btn btn-link\" ng-show=\"showAllOrdersButton\" ng-click=\"showAllOrders()\">{{'SHOW_ALL' | translate}} <span class=\"glyphicon glyphicon-chevron-down\"/></button>\n" +
    "        <button class=\"btn btn-link\" ng-show=\"!showAllOrdersButton\" ng-click=\"showAllOrders()\">{{'SHOW_LESS' | translate}} <span class=\"glyphicon glyphicon-chevron-up\"/></button>\n" +
    "      </div>\n" +
    "\n" +
    "      \n" +
    "    </div>\r" +
    "\n" +
    "    <div class=\"mediumgray\" style=\"padding-left:10px\" match-background>\n" +
    "       <div ng-include src=\"'js/app/loyalty/templates/reward_history.html'\"></div>\n" +
    "    </div>\n" +
    "  </section>\n" +
    "\n" +
    "\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/account/templates/address-form.html',
    "<!-- Modal -->\n" +
    "<form name=\"addressForm\" novalidate ng-cloak>\n" +
    "  <div class=\"modal-header\">\n" +
    "    <button class=\"close\" ng-click=\"closeAddressModal()\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">{{'CLOSE' | translate}}</span></button>\n" +
    "    <h4 class=\"modal-title\" id=\"myModalLabel\">{{'ADD_ADDRESS' | translate}}</h4>\n" +
    "  </div>\n" +
    "  <div class=\"modal-body\" stop-event=\"touchend\">\n" +
    "\n" +
    "      <input type=\"hidden\" name=\"id\" ng-model=\"address.id\">\n" +
    "      <input type=\"hidden\" name=\"account\" ng-model=\"address.account\">\n" +
    "\n" +
    "      <localized-addresses type=\"addAddress\"></localized-addresses>\n" +
    "\n" +
    "    <!-- Errors -->\n" +
    "    <ul ng-if=\"errors && errors.length\" class=\"list-unstyled text-danger\">\n" +
    "      <li ng-repeat=\"error in errors\">{{error.message}}</li>\n" +
    "    </ul>\n" +
    "\n" +
    "  </div>\n" +
    "\n" +
    "  <div class=\"modal-footer\">\n" +
    "    <a id=\"save-address-btn\" class=\"btn btn-primary btn-lg btn-block\" ng-click=\"save(address, addressForm.$valid, addressForm.$name, addressForm)\">{{'SAVE' | translate}}</a>\n" +
    "  </div>\n" +
    "</form>"
  );


  $templateCache.put('js/app/account/templates/addresses-dialog.html',
    "<div class=\"modal-header\" ng-cloak>\n" +
    "  <button type=\"button\" class=\"close\" ng-click=\"closeAddressDialog()\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">{{'CLOSE' | translate}}</span></button>\n" +
    "  <h4 class=\"modal-title\" id=\"myModalLabel\">{{'ADDRESS_BOOK' | translate}}</h4>\n" +
    "</div>\n" +
    "<div class=\"modal-body\" stop-event=\"touchend\">\n" +
    "  <div class=\"row\">\n" +
    "    <div ng-include=\"'./js/app/account/templates/addresses.html'\"></div>\n" +
    "  </div>\n" +
    "  <div class=\"text-center row\" ng-show=\"showAllAddressButton\">\n" +
    "    <button class=\"btn btn-link\" ng-show=\"!showAllAddresses\" ng-click=\"toggleAddresses()\">\n" +
    "        {{'SHOW_ALL' | translate}}\n" +
    "        <span class=\"glyphicon glyphicon-chevron-down\"/>\n" +
    "    </button>\n" +
    "    <button class=\"btn btn-link\" ng-show=\"showAllAddresses\" ng-click=\"toggleAddresses()\">\n" +
    "        {{'SHOW_LESS' | translate}}\n" +
    "        <span class=\"glyphicon glyphicon-chevron-up\"/>\n" +
    "    </button>  \n" +
    "  </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/account/templates/addresses.html',
    "<div address-decorator ng-class=\"{ 'col-sm-6 col-md-4 col-lg-4': !isDialog, 'col-xs-12 col-sm-6 col-lg-4': isDialog }\" ng-repeat=\"address in addresses | limitTo: showAddressFilter \" ng-cloak>\n" +
    "  <div class=\"panel\" ng-class=\"{'defaultAddress': address.isDefault, disableAddress: disableAddress(address.country)}\">\n" +
    "    <div class=\"panel-body\" ng-if=\"!isDialog\">\n" +
    "      <div class=\"btn-group-vertical pull-right states-toolbar\">\n" +
    "        <button id=\"set-default-btn\" class=\"btn btn-link btn-lg\"  ng-if=\"addresses.length > 1 && !address.isDefault\" ng-class=\"{ active: address.isDefault }\" ng-click=\"setAddressAsDefault(address)\"><span class=\"glyphicon glyphicon-star\"></span></button>\n" +
    "        <button class=\"btn btn-link btn-lg\" ng-click=\"openAddressModal(address, target)\"><span class=\"glyphicon glyphicon-pencil\"></span></button>\n" +
    "        <button id=\"delete-address-btn\" class=\"btn btn-link btn-lg delete\" ng-if=\"!address.isDefault || addresses.length === 1\" ng-click=\"removeAddress(address)\"><span class=\"glyphicon glyphicon-remove\"></span></button>\n" +
    "      </div>\n" +
    "      <div class=\"\">\n" +
    "        <address ng-class=\"{ 'default-address': (address.isDefault && !isDialog) || (address.selected && isDialog) }\">\n" +
    "          <span class=\"contactName\">{{address.contactName}}</span> <span ng-if=\"address.isDefault && addresses.length > 1\" class=\"defaultLabel\">(default)</span><br>\n" +
    "	  <span class=\"addressInfo\">\n" +
    "            <span ng-if=\"address.companyName\">{{address.companyName}}<br></span>\n" +
    "            <span>{{address.streetNumber}} {{address.street}}<span ng-if=\"address.streetAppendix\">, {{address.streetAppendix}}</span></span><br>\n" +
    "            <span>{{address.city}}, {{address.state}} {{address.zipCode}}</span><br>\n" +
    "            <span>{{address.country}}</span><br>\n" +
    "            <span>{{address.contactPhone}}</span><br>\n" +
    "	  </span>\n" +
    "        </address>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <div class=\"panel-body\" ng-click=\"ifShipAddressApplicable(address, target)\" ng-if=\"isDialog\">\n" +
    "      <div class=\"btn-group-vertical pull-right states-toolbar\">\n" +
    "        <button class=\"btn btn-link btn-lg\" ng-class=\"{ 'active': address.selected, 'defaultAddress': address.isDefault }\" ng-if=\"address.selected\"><span class=\"glyphicon glyphicon-check\"></span></button>\n" +
    "      </div>\n" +
    "      <div class=\"\">\n" +
    "        <address ng-class=\"{ 'default-address': (address.isDefault && !isDialog) || (address.selected && isDialog) }\">\n" +
    "          <span>{{address.contactName}}</span> <em ng-if=\"address.isDefault\">(default)</em><br>\n" +
    "          <span ng-if=\"address.companyName\">{{address.companyName}}<br></span>\n" +
    "          <span>{{address.streetNumber}} {{address.street}}<span ng-if=\"address.streetAppendix\">, {{address.streetAppendix}}</span></span><br>\n" +
    "          <span>{{address.city}}, {{address.state}} {{address.zipCode}}</span><br>\n" +
    "          <span>{{address.country}}</span><br>\n" +
    "          <span>{{address.contactPhone}}</span><br>\n" +
    "          <span ng-show=\"disableAddress(address.country)\" class=\"list-unstyled text-danger\">{{'CANT_BE_SHIPPED' | translate}}</span><br>\n" +
    "        </address>\n" +
    "    </div>\n" +
    "\n" +
    "  </div>\n" +
    "  </div>\n" +
    "  <ul ng-if=\"errors && errors.length && errorAddressId && address.id == errorAddressId\" class=\"list-unstyled text-danger\">\n" +
    "    <li ng-repeat=\"error in errors\">{{error.message}}</li>\n" +
    "  </ul>\n" +
    "</div>\n" +
    "<div class=\"col-sm-12\" ng-if=\"!addresses.length && addresses.headers\">\n" +
    "  <p>{{'NO_ADDRESSES' | translate}}</p>\n" +
    "</div>\n" +
    "<div class=\"col-sm-12\" ng-if=\"!addresses.length && !addresses.headers\">\n" +
    "  <p>{{'FAIL_ADDRESSES' | translate}}</p>\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/account/templates/change-email-confirmation.html',
    "<div ng-if=\"!error\">\n" +
    "    <div ng-if=\"!confirmed\" class=\"text-center\">\n" +
    "        <h1>{{'EDIT_EMAIL_UPDATED'|translate}}</h1>\n" +
    "    </div>\n" +
    "\n" +
    "    <div ng-if=\"confirmed\">\n" +
    "        <section class=\"white text-center\" match-background ng-cloak>\n" +
    "            <h2>{{'EDIT_EMAIL_SUCESSFULLY_UPDATED'|translate}}</h2>\n" +
    "            <p>{{'EDIT_EMAIL_CHANGED_MSG'|translate}}</p>\n" +
    "\n" +
    "            <div class=\"actionButton clearfix emailChangeButton\">\n" +
    "                <button class=\"btn btn-secondary btn-lg\" ui-sref=\"base.home\">\n" +
    "                    {{'CONTINUE_SHOPPING'|translate}}\n" +
    "                </button>\n" +
    "            </div>\n" +
    "\n" +
    "        </section>\n" +
    "    </div>\n" +
    "\n" +
    "</div>\n" +
    "\n" +
    "<div ng-if=\"error\">\n" +
    "    <section class=\"white text-center\" match-background ng-cloak>\n" +
    "        <h2>{{'OOPS_MSG'|translate}}</h2>\n" +
    "        <p>\n" +
    "            {{'EDIT_EMAIL_CHANGE_FAILED'|translate}}\n" +
    "        </p>\n" +
    "        <div class=\"actionButton clearfix emailChangeButton\">\n" +
    "            <button class=\"btn btn-secondary btn-lg\" ui-sref=\"base.account\">\n" +
    "                {{'RESET_EMAIL'|translate}}\n" +
    "            </button>\n" +
    "        </div>\n" +
    "    </section>\n" +
    "</div>"
  );


  $templateCache.put('js/app/account/templates/dialogs/address-remove-dialog.html',
    "<div class=\"modal-header\" ng-cloak>\n" +
    "    <button type=\"button\" class=\"close\" ng-click=\"close()\" data-dismiss=\"modal\">\n" +
    "        <span aria-hidden=\"true\">&times;</span>\n" +
    "        <span class=\"sr-only\">{{'CLOSE' | translate}}</span>\n" +
    "    </button>\n" +
    "    <h4 class=\"modal-title\" id=\"myModalLabel\">{{'CONFIRM_DELETE_ADDRESS_TITLE' | translate}}</h4>\n" +
    "</div>\n" +
    "<div class=\"modal-body\" stop-event=\"touchend\">\n" +
    "    <div class=\"row\">\n" +
    "        <div class=\"col-xs-12\">\n" +
    "            {{'CONFIRM_ADDRESS_REMOVAL'|translate}}\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>\n" +
    "<div class=\"modal-footer\">\n" +
    "    <button type=\"button\" ng-click=\"close()\" id=\"cancel-delete-address-btn\" class=\"btn btn-secondary btn-lg\">{{'CANCEL' | translate}}</button>\n" +
    "    <button type=\"button\" ng-click=\"delete()\" id=\"confirm-delete-address-btn\" class=\"btn btn-primary btn-lg\">{{'DELETE' | translate}}</button>\n" +
    "</div>"
  );


  $templateCache.put('js/app/account/templates/modals/edit-user-email-dialog.html',
    "<!--Step 1-->\n" +
    "<div ng-if=\"step === 1\">\n" +
    "    <div class=\"modal-header\" ng-cloak>\n" +
    "        <button type=\"button\" class=\"close\" ng-click=\"closeEditUserDialog()\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n" +
    "        <h4 class=\"modal-title\">\n" +
    "            {{'UPDATE_EMAIL' | translate}}\n" +
    "        </h4>\n" +
    "    </div>\n" +
    "\n" +
    "    <form name=\"updateUserInfoForm\" ng-submit=\"updateUserInfo()\" novalidate stop-event=\"touchend\">\n" +
    "        <div class=\"modal-body\">\n" +
    "            <div class=\"row\">\n" +
    "                <div class=\"col-lg-12 col\">\n" +
    "                    <div class=\"form-group input-group\">\n" +
    "                        <label class=\"input-group-addon control-label\" for=\"email\">{{'CURRENT_EMAIL' | translate}}</label>\n" +
    "                        <input type=\"email\" class=\"form-control ui-autocomplete\" id=\"email\" name=\"email\"\n" +
    "                               ng-model=\"account.email\" disabled reqired>\n" +
    "                    </div>\n" +
    "                    <div class=\"form-group input-group\"\n" +
    "                         ng-class=\"{'has-error': updateUserInfoForm.newEmail.$invalid && (updateUserInfoForm.newEmail.$dirty  || showPristineErrors)}\">\n" +
    "                        <label class=\"input-group-addon control-label\" for=\"newEmail\">{{'NEW_EMAIL' | translate}}</label>\n" +
    "                        <input inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                               type=\"email\" class=\"form-control ui-autocomplete\" id=\"newEmail\" name=\"newEmail\"\n" +
    "                               ng-model=\"account.newEmail\" required autocomplete=\"on\">\n" +
    "                    </div>\n" +
    "                    <div class=\"form-group input-group\"\n" +
    "                         ng-class=\"{'has-error': updateUserInfoForm.password.$invalid && (updateUserInfoForm.password.$dirty  || showPristineErrors)}\">\n" +
    "                        <label class=\"input-group-addon control-label\" for=\"password\">{{'PASSWORD' | translate}}</label>\n" +
    "                        <input inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                               type=\"password\" class=\"form-control ui-autocomplete\" id=\"password\" name=\"password\"\n" +
    "                               ng-model=\"account.password\" required autocomplete=\"on\">\n" +
    "                    </div>\n" +
    "\n" +
    "                    <div class=\"error\" ng-if=\"error\">\n" +
    "                        {{error}}\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"modal-footer\">\n" +
    "                <button type=\"button\" ng-click=\"closeEditUserDialog()\" id=\"cancel-btn\" class=\"btn btn-secondary btn-lg\">{{'CANCEL' | translate}}</button>\n" +
    "                <button type=\"submit\" id=\"save-btn\" class=\"btn btn-primary btn-lg\" ng-disabled=\"updateUserInfoForm.$invalid\">{{'SAVE' | translate}}</button>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </form>\n" +
    "</div>\n" +
    "\n" +
    "<!--Step 2-->\n" +
    "<div ng-if=\"step === 2\">\n" +
    "    <section>\n" +
    "        <div class=\"page-header\">\n" +
    "            <h2>{{'CHECK_EMAIL' | translate }}</h2>\n" +
    "            <p>{{'CHECK_EMAIL_INSTRUCT_CHANGE_EMAIL' | translate }}</p>\n" +
    "        </div>\n" +
    "    </section>\n" +
    "</div>"
  );


  $templateCache.put('js/app/account/templates/modals/edit-user-name-dialog.html',
    "<div class=\"modal-header\" ng-cloak>\n" +
    "    <button type=\"button\" class=\"close\" ng-click=\"closeEditUserDialog()\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n" +
    "    <h4 class=\"modal-title\">\n" +
    "        {{'UPDATE_ACCOUNT_DETAILS' | translate}}\n" +
    "    </h4>\n" +
    "</div>\n" +
    "<form name=\"updateUserInfoForm\" ng-submit=\"updateUserInfo()\" novalidate stop-event=\"touchend\">\n" +
    "    <div class=\"modal-body\">\n" +
    "        <div class=\"row\">\n" +
    "\n" +
    "            <div class=\"col-lg-12 custom-select-container checkout-selector\">\n" +
    "                <div class=\"form-group input-group\">\n" +
    "                    <label class=\"input-group-addon control-label\" for=\"titleAccount\">{{'TITLE' | translate}}</label>\n" +
    "                    <ui-select ng-model=\"account.title\">\n" +
    "                      <ui-select-match>\n" +
    "                        {{$select.selected}}\n" +
    "                      </ui-select-match>\n" +
    "                      <ui-select-choices repeat=\"title in titles | filter: $select.search\">\n" +
    "                        {{title}}\n" +
    "                      </ui-select-choices>\n" +
    "                    </ui-select>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"col-lg-12 col\">\n" +
    "                <div class=\"form-group input-group\"\n" +
    "                     ng-class=\"{'has-error': updateUserInfoForm.firstNameAccount.$invalid && (updateUserInfoForm.firstNameAccount.$dirty  || showPristineErrors)}\">\n" +
    "                    <label class=\"input-group-addon control-label\" for=\"firstNameAccount\">{{'FIRST_NAME' | translate}}</label>\n" +
    "                    <input inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                           type=\"text\" class=\"form-control ui-autocomplete\" id=\"firstNameAccount\" name=\"firstNameAccount\"\n" +
    "                           ng-model=\"account.firstName\" required autocomplete=\"on\">\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"col-lg-12 col\">\n" +
    "                <div class=\"form-group input-group\"\n" +
    "                     ng-class=\"{'has-error': updateUserInfoForm.middleNameAccount.$invalid && (updateUserInfoForm.middleNameAccount.$dirty  || showPristineErrors)}\">\n" +
    "                    <label class=\"input-group-addon control-label\" for=\"middleNameAccount\">{{'MIDDLE_NAME' | translate}}</label>\n" +
    "                    <input type=\"text\" class=\"form-control ui-autocomplete\" id=\"middleNameAccount\" name=\"middleNameAccount\"\n" +
    "                           ng-model=\"account.middleName\" autocomplete=\"on\" placeholder=\"(Optional)\">\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"col-lg-12\">\n" +
    "                <div class=\"form-group input-group\"\n" +
    "                     ng-class=\"{'has-error': updateUserInfoForm.lastNameAccount.$invalid && (updateUserInfoForm.lastNameAccount.$dirty  || showPristineErrors)}\">\n" +
    "                    <label class=\"input-group-addon control-label\" for=\"lastNameAccount\">{{'LAST_NAME' | translate}}</label>\n" +
    "                    <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                           class=\"form-control\" id=\"lastNameAccount\" name=\"lastNameAccount\" ng-model=\"account.lastName\"\n" +
    "                           required autocomplete=\"on\">\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"modal-footer\">\n" +
    "            <button type=\"button\" ng-click=\"closeEditUserDialog()\" id=\"cancel-btn\" class=\"btn btn-secondary btn-lg\">{{'CANCEL' | translate}}</button>\n" +
    "            <button type=\"submit\" id=\"save-btn\" class=\"btn btn-primary btn-lg\">{{'SAVE' | translate}}</button>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</form>\n"
  );


  $templateCache.put('js/app/account/templates/order-detail.html',
    "<!--\n" +
    "  ~ [y] hybris Platform\n" +
    "  ~\n" +
    "  ~ Copyright (c) 2000-2014 hybris AG\n" +
    "  ~ All rights reserved.\n" +
    "  ~\n" +
    "  ~ This software is the confidential and proprietary information of hybris\n" +
    "  ~ (\"Confidential Information\"). You shall not disclose such Confidential\n" +
    "  ~ Information and shall use it only in accordance with the terms of the\n" +
    "  ~ license agreement you entered into with hybris.\n" +
    "  -->\n" +
    "\n" +
    "<div class=\"account\">\n" +
    "    <section class=\"white orderHeaderContainer\" ng-cloak>\n" +
    "        <div class=\"page-headline\">\n" +
    "            <div class=\"breadCrumb\">\n" +
    "                <a data-ui-sref=\"base.account\">{{'MY_ACCOUNT' | translate}}</a> / {{'ORDER_DETAILS' | translate}}\n" +
    "            </div>\n" +
    "            <h1>{{'ORDER' | translate}} {{order.id}}</h1>\n" +
    "        </div>\n" +
    "        <div class=\"section-headline\">\n" +
    "            <h2>{{'ORDER_DETAILS' | translate}}</h2>\n" +
    "            <span class=\"area-headline date\">{{'ORDER_DATE' | translate}} <span class=\"orderDate\">{{orderDate}}</span></span>\n" +
    "        </div>\n" +
    "        <div class=\"row\">\n" +
    "            <!-- AREA -->\n" +
    "            <div class=\"col-md-4 col-sm-12 col-xs-12\">\n" +
    "                <div class=\"\">\n" +
    "                    <span class=\"area-headline\">\n" +
    "                        {{'SHIPPING_ADDRESS' | translate}}\n" +
    "                    </span>\n" +
    "                    <address>\n" +
    "                        {{order.shippingAddress.contactName}}<br>\n" +
    "                        <div ng-if=\"order.shippingAddress.companyName\">{{order.shippingAddress.companyName}}<br></div>\n" +
    "                        {{order.shippingAddress.street}}<div ng-if=\"order.shippingAddress.streetAppendix\">, {{order.shippingAddress.streetAppendix}}</div><br>\n" +
    "                        {{order.shippingAddress.city}}, {{order.shippingAddress.state}} {{order.shippingAddress.zipCode}}<br>\n" +
    "                        {{order.shippingAddress.country}}<br>\n" +
    "                        {{order.shippingAddress.contactPhone}}<br>\n" +
    "                    </address>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <!-- AREA -->\n" +
    "            <div class=\"col-md-4 col-sm-12 col-xs-12\">\n" +
    "                <div class=\"\">\n" +
    "  		<span class=\"area-headline\">\n" +
    "  			{{'BILLING_ADDRESS' | translate}}\n" +
    "  		</span>\n" +
    "                    <address>\n" +
    "                        {{order.billingAddress.contactName}}<br>\n" +
    "                        <div ng-if=\"order.billingAddress.companyName\">{{order.billingAddress.companyName}}<br></div>\n" +
    "                        {{order.billingAddress.street}}<div ng-if=\"order.billingAddress.streetAppendix\">, {{order.billingAddress.streetAppendix}}</div><br>\n" +
    "                        {{order.billingAddress.city}}, {{order.billingAddress.state}} {{order.billingAddress.zipCode}}<br>\n" +
    "                        {{order.billingAddress.country}}<br>\n" +
    "                        {{order.billingAddress.contactPhone}}\n" +
    "                    </address>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <!-- AREA -->\n" +
    "            <div class=\"col-md-4 col-sm-12 col-xs-12\">\n" +
    "                <div class=\"\">\n" +
    "  		<span class=\"area-headline\">\n" +
    "  			{{'PAYMENT' | translate}}\n" +
    "  		</span>\n" +
    "                    <p>{{'CREDIT_CARD' | translate}}, {{payment.paidAmount}} {{payment.currency}}, {{payment.status | translate}}</p>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "        </div>\n" +
    "    </section>\n" +
    "    <section class=\"mediumgray orderStatusContainer\" ng-cloak>\n" +
    "        <div class=\"section-headline\">\n" +
    "            <h2>{{'ORDER_STATUS' | translate}} <span class=\"order-status\">- {{order.status | translate}}</span></h2>\n" +
    "        </div>\n" +
    "        <div ng-repeat=\"shipment in order.shipments\">\n" +
    "            <div translate=\"SHIPPED_BY_ON\" translate-compile\n" +
    "                 translate-values=\"{carrier: '{{shipment.carrier}}', shippedDate: '{{shipment.shippedDate}}'}\"></div>\n" +
    "            <br>\n" +
    "            <div ng-if=\"shipment.trackingNumber\" translate=\"TRACKING_NUMBER\" translate-compile\n" +
    "                 translate-values=\"{trackingNumber: '{{shipment.trackingNumber}}'}\"></div>\n" +
    "        </div>\n" +
    "    </section>\n" +
    "    <section class=\"white clearfix orderItemsContainer\" ng-cloak>\n" +
    "        <div class=\"section-headline\">\n" +
    "            <h2>{{'ITEMS_IN_YOUR_ORDER' | translate}}</h2>\n" +
    "        </div>\n" +
    "        <div class=\"table-responsive order-tabel hidden-xs hidden-sm hidden-md\">\n" +
    "            <table class=\"table\">\n" +
    "                <thead>\n" +
    "                <tr>\n" +
    "                    <th>{{'ITEM' | translate}}</th>\n" +
    "                    <th>{{'ITEM_PRICE' | translate}}</th>\n" +
    "                    <th>{{'QUANTITY' | translate}}</th>\n" +
    "                    <th class=\"priceColumn\">{{'TOTAL_PRICE' | translate}}</th>\n" +
    "                </tr>\n" +
    "                </thead>\n" +
    "                <tbody>\n" +
    "                    <tr ng-repeat=\"entry in order.entries\">\n" +
    "                        <td class=\"col-lg-7 col-md-7 col-sm-5 col-xs-5\">\n" +
    "                            <div class=\"cart-item row\">\n" +
    "                                <div class=\"img-col col-xs-4 col-sm-4 col-lg-4\">\n" +
    "                                    <a ui-sref=\"base.product.detail( {productId: entry.id} )\">\n" +
    "                                        <img class=\"img-responsive\" ng-src=\"{{ entry && entry.product.images[0].url || PLACEHOLDER_IMAGE}}\">\n" +
    "                                    </a>\n" +
    "                                </div>\n" +
    "                                <div class=\"detail-col col-xs-8 col-sm-8 col-lg-8\">\n" +
    "                                    <div class=\"name \"><a ui-sref=\"base.product.detail( {productId: entry.id} )\">{{entry.product.name}}</a></div>\n" +
    "                                    <div class=\"price item-attr \">{{'SKU' | translate}}: <span> {{entry.product.sku}}</span></div>\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                        </td>\n" +
    "                        <td class=\"col-lg-2 col-md-2 col-sm-3 col-xs-3\">{{entry.unitPrice | currency: currencySymbol}}</td>\n" +
    "                        <td class=\"col-lg-1 col-md-1 col-sm-2 col-xs-3\">{{entry.amount}}</td>\n" +
    "                        <td class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 priceColumn\">{{entry.totalPrice | currency: currencySymbol}}</td>\n" +
    "                    </tr>\n" +
    "                </tbody>\n" +
    "            </table>\n" +
    "        </div>\n" +
    "        <div class=\"hidden-lg\">\n" +
    "            <div class=\"summary\" ng-repeat=\"entry in order.entries\">\n" +
    "                <div class=\"cart-item row\">\n" +
    "                    <div class=\"col-xs-4 col-md-4 text-center img-col\">\n" +
    "                        <a ui-sref=\"base.product.detail( {productId: entry.product.id} )\">\n" +
    "                            <img class=\"img-responsive\" ng-src=\"{{ entry && entry.product.images[0].url || PLACEHOLDER_IMAGE}}\">\n" +
    "                        </a>\n" +
    "\n" +
    "                    </div>\n" +
    "                    <div class=\"col-xs-8 col-md-8  detail-col\">\n" +
    "\n" +
    "                        <div class=\"name\"><a ui-sref=\"base.product.detail( {productId: entry.product.id} )\">{{entry.product.name}}</a></div>\n" +
    "                        <div class=\"price item-attr\">{{'ITEM_PRICE' | translate}}: <span> {{entry.unitPrice | currency: currencySymbol}}</span></div>\n" +
    "                        <div class=\"variants row item-attr\">\n" +
    "                            <div class=\"variant col-md-6 \">{{'QTY' | translate}}: <span>{{entry.amount}}</span></div>\n" +
    "                        </div>\n" +
    "                        <div class=\"price-total item-attr\">{{'TOTAL_PRICE' | translate}}: <span>{{entry.totalPrice | currency: currencySymbol}}</span>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "        </div>\n" +
    "        <div class=\"summary row\">\n" +
    "            <div class=\"col-md-offset-7 col-lg-offset-7 col-xs-12 col-sm-12 col-md-5 col-lg-5\">\n" +
    "                <!-- ORDER-DETAIL -->\n" +
    "                <table class=\"table\">\n" +
    "                    <tbody>\n" +
    "                    <tr>\n" +
    "                        <td >{{'SUBTOTAL' | translate}}</td>\n" +
    "\n" +
    "                        <td class=\"text-right\">\n" +
    "                            {{order.totalPrice - order.tax.total.amount - order.shipping.total.amount + (order.discounts[0].amount || 0 ) | currency: currencySymbol}}\n" +
    "                        </td>\n" +
    "                    </tr>\n" +
    "                    <tr>\n" +
    "                        <td>{{'SHIPPING' | translate}}</td>\n" +
    "                        <td class=\"text-right\">\n" +
    "                            {{order.shipping.total.amount | currency: currencySymbol}}\n" +
    "                        </td>\n" +
    "                    </tr>\n" +
    "                    <tr ng-if=\"order.discounts && order.discounts[0].amount != 0\">\n" +
    "                        <td>{{'DISCOUNT' | translate}}</td>\n" +
    "                        <td class=\"text-right\">\n" +
    "                            <span class=\"error\">-{{ order.discounts[0].amount || 0 | currency: currencySymbol}}</span>\n" +
    "                        </td>\n" +
    "                    </tr>\n" +
    "                    <tr ng-repeat=\"taxLine in order.tax.lines\" ng-if=\"!!order.tax && !order.tax.total.inclusive\">\n" +
    "                        <td ng-if=\"taxLine.name\">{{taxLine.name}}</td>\n" +
    "                        <td ng-if=\"!taxLine.name\">{{'TAX' | translate}}</td>\n" +
    "                        <td class=\"text-right\">\n" +
    "                            {{taxLine.amount | currency: currencySymbol}}\n" +
    "                        </td>\n" +
    "                    </tr>\n" +
    "                    </tbody>\n" +
    "                    <tfoot>\n" +
    "                    <tr>\n" +
    "                        <td>{{'ORDER_TOTAL' | translate}}</td>\n" +
    "                        <td class=\"text-right\">{{order.totalPrice | currency: currencySymbol}}</td>\n" +
    "                    </tr>\n" +
    "                    </tfoot>\n" +
    "                </table>\n" +
    "                \n" +
    "                <div ng-include src=\"'js/app/loyalty/templates/order-detail.html'\" class=\"orderDetailPoints\"></div>\n" +
    "\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </section>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/addAddressCA.html',
    "<div>\n" +
    "\n" +
    "      <div class=\"checkout-selector\">\n" +
    "        <div class=\"form-group input-group custom-select-container\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "            <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\">\n" +
    "                <ui-select-match>\n" +
    "                    {{$select.selected.name}}\n" +
    "                </ui-select-match>\n" +
    "                <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                    {{item.name}}\n" +
    "                </ui-select-choices>\n" +
    "            </ui-select>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.contactName.$invalid && (addressForm.contactName.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactName\">{{'FULL_NAME' | translate}}</label>\n" +
    "        <input inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" type=\"text\" class=\"form-control ui-autocomplete\" id=\"contactName\" name=\"contactName\" ng-model=\"address.contactName\" required autocomplete=\"on\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'CA'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"companyName\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "          <input type=\"text\" class=\"form-control\" id=\"companyName\" name=\"companyName\" ng-model=\"address.companyName\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.street.$invalid && (addressForm.street.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"street\">{{'ADDRESS_LINE_1' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"street\" name=\"street\" ng-required=\"addressForm.country.$viewValue.id === 'CA'\"\n" +
    "        ng-model=\"address.street\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.streetAppendix.$invalid && (addressForm.streetAppendix.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"streetAppendix\">{{'ADDRESS_LINE_2' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input class=\"form-control\" id=\"streetAppendix\" name=\"streetAppendix\" placeholder=\"(Optional)\"\n" +
    "        ng-model=\"address.streetAppendix\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.city.$invalid && (addressForm.city.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"city\">{{'CITY' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"city\" name=\"city\" required autocomplete=\"on\"\n" +
    "        ng-model=\"address.city\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'CA'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"checkout-selector\">\n" +
    "        <div class=\"form-group input-group custom-select-container checkout-selector\"\n" +
    "            ng-class=\"{'has-error': addressForm.state.$invalid && (addressForm.state.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"state\">{{'PROVINCE' | translate}}</label>\n" +
    "            <ui-select ng-model=\"address.state\" id=\"state\" name=\"state\" ng-required=\"addressForm.country.$viewValue.id === 'CA'\">\n" +
    "                  <ui-select-match>\n" +
    "                      {{$select.selected.name}}\n" +
    "                  </ui-select-match>\n" +
    "                  <ui-select-choices repeat=\"item.id as item in (caProvinces | filter: $select.search)\">\n" +
    "                      {{item.name}}\n" +
    "                  </ui-select-choices>\n" +
    "              </ui-select>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.zipCode.$invalid && (addressForm.zipCode.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"zipCode\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"zipCode\" name=\"zipCode\" required autocomplete=\"on\"\n" +
    "        ng-model=\"address.zipCode\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'CA'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactPhone\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "        <input type=\"text\" class=\"form-control\" id=\"contactPhone\" name=\"contactPhone\" ng-model=\"address.contactPhone\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/addAddressCN.html',
    "<div>\n" +
    "\n" +
    "      <div class=\"form-group input-group custom-select-container\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "          <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\">\n" +
    "              <ui-select-match>\n" +
    "                  {{$select.selected.name}}\n" +
    "              </ui-select-match>\n" +
    "              <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                  {{item.name}}\n" +
    "              </ui-select-choices>\n" +
    "          </ui-select>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "          ng-class=\"{'has-error': addressForm.zip.$invalid && (addressForm.zip.$dirty || showPristineErrors) }\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"zipCodeAdd\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "          <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "          class=\"form-control\" id=\"zipCodeAdd\" name=\"zip\" required autocomplete=\"on\" ng-model=\"address.zipCode\"\n" +
    "          ng-required=\"addressForm.country.$viewValue.id === 'CN'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "          ng-class=\"{'has-error': addressForm.state.$invalid && (addressForm.state.$dirty || showPristineErrors) }\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"provinceAdd\">{{'PROVINCE' | translate}}</label>\n" +
    "          <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "          class=\"form-control\" id=\"provinceAdd\" name=\"state\" required autocomplete=\"on\" ng-model=\"address.state\"\n" +
    "          ng-required=\"addressForm.country.$viewValue.id === 'CN'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "          ng-class=\"{'has-error': addressForm.city.$invalid && (addressForm.city.$dirty || showPristineErrors) }\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"cityAdd\">{{'CITY' | translate}}</label>\n" +
    "          <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "          class=\"form-control\" id=\"cityAdd\" name=\"city\" required autocomplete=\"on\" ng-model=\"address.city\"\n" +
    "          ng-required=\"addressForm.country.$viewValue.id === 'CN'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "          ng-class=\"{'has-error': addressForm.street.$invalid && (addressForm.street.$dirty || showPristineErrors) }\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"streetAdd\">{{'STREET_NAME' | translate}}</label>\n" +
    "          <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "          class=\"form-control\" id=\"streetAdd\" name=\"street\" autocomplete=\"on\" ng-model=\"address.street\"\n" +
    "          ng-required=\"addressForm.country.$viewValue.id === 'CN'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"address2Add\">{{'BUILDING_NAME' | translate}}</label>\n" +
    "          <input type=\"text\" class=\"form-control\" placeholder=\"(Optional)\" id=\"address2Add\" name=\"address2\"\n" +
    "          ng-model=\"address.streetAppendix\">\n" +
    "      </div>\n" +
    "\n" +
    "      <!-- <div class=\"form-group input-group\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"address1Add\">{{'ROOM_NUMBER' | translate}}</label>\n" +
    "          <input type=\"text\" class=\"form-control\" name=\"address1\" placeholder=\"(Optional)\" id=\"address1Add\" ng-model=\"address.address1\">\n" +
    "      </div> -->\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "           ng-class=\"{'has-error': addressForm.contactName.$invalid && (addressForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"contactNameAdd\">{{'FULL_NAME' | translate}}</label>\n" +
    "          <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                  class=\"form-control\" id=\"contactNameAdd\" name=\"contactName\" ng-model=\"address.contactName\"\n" +
    "                 required autocomplete=\"on\" ng-required=\"addressForm.country.$viewValue.id === 'CN'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"companyNameAdd\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "          <input type=\"text\" class=\"form-control\" id=\"companyNameAdd\"  placeholder=\"(Optional)\" name=\"companyName\" ng-model=\"address.companyName\" autocomplete=\"on\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactPhone\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "        <input type=\"text\" class=\"form-control\" id=\"contactPhone\" placeholder=\"(Optional)\" name=\"contactPhone\" ng-model=\"address.contactPhone\" autocomplete=\"on\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "\n" +
    "      </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/addAddressDE.html',
    "<div>\n" +
    "\n" +
    "      <div class=\"form-group input-group custom-select-container\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "          <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\">\n" +
    "              <ui-select-match>\n" +
    "                  {{$select.selected.name}}\n" +
    "              </ui-select-match>\n" +
    "              <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                  {{item.name}}\n" +
    "              </ui-select-choices>\n" +
    "          </ui-select>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.contactName.$invalid && (addressForm.contactName.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactName\">{{'FULL_NAME' | translate}}</label>\n" +
    "        <input inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" type=\"text\" class=\"form-control ui-autocomplete\" id=\"contactName\" name=\"contactName\" ng-model=\"address.contactName\" required autocomplete=\"on\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'DE'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"companyName\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "          <input type=\"text\" placeholder=\"(Optional)\" class=\"form-control\" id=\"companyName\" name=\"companyName\" ng-model=\"address.companyName\" autocomplete=\"on\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.street.$invalid && (addressForm.street.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"street\">{{'ADDRESS_LINE_1' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"street\" name=\"street\" ng-required=\"addressForm.country.$viewValue.id === 'DE'\"\n" +
    "        ng-model=\"address.street\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.streetAppendix.$invalid && (addressForm.streetAppendix.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"streetAppendix\">{{'ADDRESS_LINE_2' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input class=\"form-control\" id=\"streetAppendix\" name=\"streetAppendix\" placeholder=\"(Optional)\"\n" +
    "        ng-model=\"address.streetAppendix\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.city.$invalid && (addressForm.city.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"city\">{{'CITY' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"city\" name=\"city\" required autocomplete=\"on\"\n" +
    "        ng-model=\"address.city\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'DE'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "          ng-class=\"{'has-error': addressForm.zip.$invalid && (addressForm.zip.$dirty || showPristineErrors) }\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"zipCodeBill\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "          <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "          class=\"form-control\" id=\"zipCodeBill\" name=\"zip\" required autocomplete=\"on\" ng-model=\"address.zipCode\"\n" +
    "          ng-required=\"addressForm.country.$viewValue.id === 'DE'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactPhone\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "        <input type=\"text\" class=\"form-control\" id=\"contactPhone\" name=\"contactPhone\" ng-model=\"address.contactPhone\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "\n" +
    "      </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/addAddressDefault.html',
    "<!-- address default -->\n" +
    "<div> \n" +
    "      \n" +
    "      <!-- country -->\n" +
    "      <div class=\"checkout-selector\">\n" +
    "        <div class=\"form-group input-group custom-select-container\"\n" +
    "          ng-class=\"{'has-error': !addressForm.country.$viewValue.id && ( addressForm.country.$dirty || showPristineErrors) }\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"country\">{{'COUNTRY' | translate}}</label>\n" +
    "          <ui-select ng-model=\"address.country\" on-select=\"setLocale($item)\" ng-required=\"isDefaultForm\" id=\"country\" name=\"country\" >\n" +
    "              <ui-select-match>\n" +
    "                  {{$select.selected.name}}\n" +
    "              </ui-select-match>\n" +
    "              <ui-select-choices repeat=\"item.id as item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                  {{item.name}}\n" +
    "              </ui-select-choices>\n" +
    "          </ui-select>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\n" +
    "      <!-- full name  -->\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.contactName.$invalid && (addressForm.contactName.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactName\">{{'FULL_NAME' | translate}}</label>\n" +
    "        <input inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" type=\"text\" class=\"form-control ui-autocomplete\" id=\"contactName\" name=\"contactName\" ng-model=\"address.contactName\" required autocomplete=\"on\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$invalid || addressForm.country.$viewValue.id === 'US'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <!-- company name -->\n" +
    "      <div class=\"form-group input-group\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"companyName\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "          <input type=\"text\" class=\"form-control\" id=\"companyName\" name=\"companyName\" ng-model=\"address.companyName\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <!-- address 1 -->\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.street.$invalid && (addressForm.street.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"street\">{{'ADDRESS_LINE_1' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"street\" name=\"street\" required\n" +
    "        ng-model=\"address.street\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <!-- address 2 -->\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.streetAppendix.$invalid && (addressForm.streetAppendix.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"streetAppendix\">{{'ADDRESS_LINE_2' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input class=\"form-control\" id=\"streetAppendix\" name=\"streetAppendix\" placeholder=\"(Optional)\"\n" +
    "        ng-model=\"address.streetAppendix\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "      \n" +
    "      <!-- city -->\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.city.$invalid && (addressForm.city.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"city\">{{'CITY' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"city\" name=\"city\" autocomplete=\"on\"\n" +
    "        ng-model=\"address.city\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        required>\n" +
    "      </div>\n" +
    "\n" +
    "      <!-- state -->\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.state.$invalid && (addressForm.state.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"state\">{{'STATE' | translate}}</label>\n" +
    "        <input type=\"text\" class=\"form-control\" id=\"state\" name=\"state\" autocomplete=\"on\"\n" +
    "        ng-model=\"address.state\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <!-- zip code  -->\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.zipCodeUS.$invalid && (addressForm.zipCodeUS.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"zipCode\">{{'ZIP' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"zipCode\" name=\"zipCodeUS\" autocomplete=\"on\"\n" +
    "        ng-model=\"address.zipCode\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        required>\n" +
    "      </div>\n" +
    "\n" +
    "      <!-- contact phone  -->\n" +
    "      <div class=\"form-group input-group\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactPhone\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "        <input type=\"text\" class=\"form-control\" id=\"contactPhone\" name=\"contactPhone\" ng-model=\"address.contactPhone\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/addAddressGB.html',
    "<div>\n" +
    "\n" +
    "      <div class=\"form-group input-group custom-select-container\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "          <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\">\n" +
    "              <ui-select-match>\n" +
    "                  {{$select.selected.name}}\n" +
    "              </ui-select-match>\n" +
    "              <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                  {{item.name}}\n" +
    "              </ui-select-choices>\n" +
    "          </ui-select>\n" +
    "      </div>\n" +
    "      \n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.contactName.$invalid && (addressForm.contactName.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactName\">{{'FULL_NAME' | translate}}</label>\n" +
    "        <input inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" type=\"text\" class=\"form-control ui-autocomplete\" id=\"contactName\" name=\"contactName\" ng-model=\"address.contactName\" required autocomplete=\"on\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'GB'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"companyName\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "          <input type=\"text\" class=\"form-control\" id=\"companyName\" name=\"companyName\" ng-model=\"address.companyName\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.street.$invalid && (addressForm.street.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"street\">{{'ADDRESS_LINE_1' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"street\" name=\"street\" ng-required=\"addressForm.country.$viewValue.id === 'GB'\"\n" +
    "        ng-model=\"address.street\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.streetAppendix.$invalid && (addressForm.streetAppendix.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"streetAppendix\">{{'ADDRESS_LINE_2' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input class=\"form-control\" id=\"streetAppendix\" name=\"streetAppendix\"\n" +
    "        ng-model=\"address.streetAppendix\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.city.$invalid && (addressForm.city.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"city\">{{'CITY' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"city\" name=\"city\" required autocomplete=\"on\"\n" +
    "        ng-model=\"address.city\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'GB'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.zipCode.$invalid && (addressForm.zipCode.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"zipCode\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"zipCode\" name=\"zipCode\" required autocomplete=\"on\"\n" +
    "        ng-model=\"address.zipCode\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'GB'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactPhone\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "        <input type=\"text\" class=\"form-control\" id=\"contactPhone\" name=\"contactPhone\" ng-model=\"address.contactPhone\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "\n" +
    "      </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/addAddressJP.html',
    "<div>\n" +
    "\n" +
    "      <div class=\"form-group input-group custom-select-container\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "          <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\">\n" +
    "              <ui-select-match>\n" +
    "                  {{$select.selected.name}}\n" +
    "              </ui-select-match>\n" +
    "              <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                  {{item.name}}\n" +
    "              </ui-select-choices>\n" +
    "          </ui-select>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.contactName.$invalid && (addressForm.contactName.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactName\">{{'FULL_NAME' | translate}}</label>\n" +
    "        <input inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" type=\"text\" class=\"form-control ui-autocomplete\" id=\"contactName\" name=\"contactName\" ng-model=\"address.contactName\" required autocomplete=\"on\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'JP'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"companyName\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "          <input type=\"text\" class=\"form-control\" id=\"companyName\" name=\"companyName\" ng-model=\"address.companyName\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.street.$invalid && (addressForm.street.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"street\">{{'ADDRESS_LINE_1' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"street\" name=\"street\" ng-required=\"addressForm.country.$viewValue.id === 'JP'\"\n" +
    "        ng-model=\"address.street\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.streetAppendix.$invalid && (addressForm.streetAppendix.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"streetAppendix\">{{'ADDRESS_LINE_2' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input class=\"form-control\" id=\"streetAppendix\" name=\"streetAppendix\"\n" +
    "        ng-model=\"address.streetAppendix\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.city.$invalid && (addressForm.city.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"city\">{{'CITY' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"city\" name=\"city\" required autocomplete=\"on\"\n" +
    "        ng-model=\"address.city\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'JP'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "          ng-class=\"{'has-error': addressForm.state.$invalid && (addressForm.state.$dirty || showPristineErrors) }\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"state\">{{'PREFECTURE' | translate}}</label>\n" +
    "          <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "          class=\"form-control\" id=\"state\" name=\"state\" required autocomplete=\"on\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\" ng-model=\"address.state\"\n" +
    "          ng-required=\"addressForm.country.$viewValue.id === 'JP'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.zipCode.$invalid && (addressForm.zipCode.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"zipCode\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"zipCode\" name=\"zipCode\" required autocomplete=\"on\"\n" +
    "        ng-model=\"address.zipCode\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'JP'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactPhone\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "        <input type=\"text\" class=\"form-control\" id=\"contactPhone\" name=\"contactPhone\" ng-model=\"address.contactPhone\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "\n" +
    "      </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/addAddressUS.html',
    "<div>\n" +
    "\n" +
    "      <div class=\"checkout-selector\">\n" +
    "        <div class=\"form-group input-group custom-select-container\"\n" +
    "          ng-class=\"{'has-error': addressForm.country.$invalid && ( addressForm.country.$dirty || showPristineErrors) }\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"country\">{{'COUNTRY' | translate}}</label>\n" +
    "          <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\">\n" +
    "              <ui-select-match>\n" +
    "                  {{$select.selected.name}}\n" +
    "              </ui-select-match>\n" +
    "              <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                  {{item.name}}\n" +
    "              </ui-select-choices>\n" +
    "          </ui-select>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.contactName.$invalid && (addressForm.contactName.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactName\">{{'FULL_NAME' | translate}}</label>\n" +
    "        <input inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" type=\"text\" class=\"form-control ui-autocomplete\" id=\"contactName\" name=\"contactName\" ng-model=\"address.contactName\" required autocomplete=\"on\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$invalid || addressForm.country.$viewValue.id === 'US'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"companyName\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "          <input type=\"text\" class=\"form-control\" id=\"companyName\" name=\"companyName\" ng-model=\"address.companyName\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.street.$invalid && (addressForm.street.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"street\">{{'ADDRESS_LINE_1' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"street\" name=\"street\" ng-required=\"addressForm.country.$viewValue.id === 'US'\"\n" +
    "        ng-model=\"address.street\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\" ng-class=\"{'has-error': addressForm.streetAppendix.$invalid && (addressForm.streetAppendix.$dirty  || showPristineErrors)}\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"streetAppendix\">{{'ADDRESS_LINE_2' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input class=\"form-control\" id=\"streetAppendix\" name=\"streetAppendix\" placeholder=\"(Optional)\"\n" +
    "        ng-model=\"address.streetAppendix\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.city.$invalid && (addressForm.city.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"city\">{{'CITY' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"city\" name=\"city\" autocomplete=\"on\"\n" +
    "        ng-model=\"address.city\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'US'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"checkout-selector\">\n" +
    "        <div class=\"form-group input-group custom-select-container\"\n" +
    "          ng-class=\"{'has-error': addressForm.state.$invalid && (addressForm.stateUS.$dirty || showPristineErrors) }\">\n" +
    "          <label class=\"input-group-addon control-label\" for=\"state\">{{'STATE' | translate}}</label>\n" +
    "          <ui-select ng-model=\"address.state\" id=\"state\" name=\"state\" ng-required=\"addressForm.country.$viewValue.id === 'US'\">\n" +
    "              <ui-select-match>\n" +
    "                  {{$select.selected.name}}\n" +
    "              </ui-select-match>\n" +
    "              <ui-select-choices repeat=\"item.id as item in (usStates | filter: $select.search)\">\n" +
    "                  {{item.name}}\n" +
    "              </ui-select-choices>\n" +
    "          </ui-select>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\"\n" +
    "        ng-class=\"{'has-error': addressForm.zipCodeUS.$invalid && (addressForm.zipCodeUS.$dirty || showPristineErrors) }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"zipCode\">{{'ZIP' | translate}}</label>\n" +
    "        <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "        class=\"form-control\" id=\"zipCode\" name=\"zipCodeUS\" autocomplete=\"on\"\n" +
    "        ng-model=\"address.zipCode\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\"\n" +
    "        ng-required=\"addressForm.country.$viewValue.id === 'US'\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"form-group input-group\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"contactPhone\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "        <input type=\"text\" class=\"form-control\" id=\"contactPhone\" name=\"contactPhone\" ng-model=\"address.contactPhone\" autocomplete=\"on\" placeholder=\"(Optional)\" ng-keydown=\"saveOnEnter($event, address, addressForm.$valid, addressForm.$name)\">\n" +
    "      </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/billingCA.html',
    "<!-- billing ca -->\n" +
    "<div>\n" +
    "\n" +
    "    <div ng-hide=\"shipToSameAsBillTo\">\n" +
    "\n" +
    "\n" +
    "    <!-- country -->\n" +
    "    <div class=\"col-md-4 custom-select-container checkout-selector\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.country.$invalid && ( billToForm.country.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"countryBill\">{{'COUNTRY' | translate}}</label>\n" +
    "            <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" id=\"countryBill\" name=\"country\" ng-required=\"!shipToSameAsBillTo\">\n" +
    "                <ui-select-match>\n" +
    "                    {{$select.selected.name}}\n" +
    "                </ui-select-match>\n" +
    "                <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                    {{item.name}}\n" +
    "                </ui-select-choices>\n" +
    "            </ui-select>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- name -->\n" +
    "    <div class=\"col-md-8\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "             ng-class=\"{'has-error': billToForm.contactName.$invalid && (billToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactNameBill\">{{'NAME' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                   class=\"form-control\" id=\"contactNameBill\" name=\"contactName\" ng-model=\"order.billTo.contactName\"\n" +
    "                   ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- comany name -->\n" +
    "    <!-- <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"companyNameBill\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"companyNameBill\" name=\"companyName\" ng-model=\"order.billTo.companyName\"\n" +
    "                   autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div> -->\n" +
    "\n" +
    "    <!-- address 1 -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.address1.$invalid && (billToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address1Bill\">{{'ADDRESS' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                    class=\"form-control\" name=\"address1\" id=\"address1Bill\" ng-model=\"order.billTo.address1\"\n" +
    "                    ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- addresss 2 -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address2Bill\">{{'ADDRESS' | translate}} 2</label>\n" +
    "            <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Bill\" name=\"address2\"\n" +
    "            ng-model=\"order.billTo.address2\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- city -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.city.$invalid && (billToForm.city.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"cityBill\">{{'CITY' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"cityBill\" name=\"city\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.city\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- province -->\n" +
    "    <div class=\"col-md-4 custom-select-container checkout-selector\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.state.$invalid && (billToForm.state.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"state\">{{'PROVINCE' | translate}}</label>\n" +
    "            <ui-select ng-model=\"order.billTo.state\" id=\"stateBill\" name=\"state\" ng-required=\"billToForm.country.$invalid || (!shipToSameAsBillTo && billToForm.country.$viewValue.id === 'CA')\">\n" +
    "                <ui-select-match>\n" +
    "                    {{$select.selected.name}}\n" +
    "                </ui-select-match>\n" +
    "                <ui-select-choices repeat=\"item.id as item in (caProvinces | filter: $select.search)\">\n" +
    "                    {{item.name}}\n" +
    "                </ui-select-choices>\n" +
    "            </ui-select>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- postal code -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.postal.$invalid && (billToForm.postal.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"zipCodeBill\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"zipCodeBill\" name=\"postal\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.zipCode\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- contact phone -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactPhoneBill\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"contactPhoneBill\" name=\"contactPhone\" ng-model=\"order.billTo.contactPhone\"\n" +
    "                   autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/billingCN.html',
    "<!-- billing cn -->\n" +
    "<div>\n" +
    "\n" +
    "    <div ng-hide=\"shipToSameAsBillTo\">\n" +
    "\n" +
    "    <!-- country -->\n" +
    "    <div class=\"col-md-4 custom-select-container\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.country.$invalid && ( billToForm.country.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"countryBill\">{{'COUNTRY' | translate}}</label>\n" +
    "            <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" ng-required=\"!shipToSameAsBillTo\">\n" +
    "                <ui-select-match>\n" +
    "                    {{$select.selected.name}}\n" +
    "                </ui-select-match>\n" +
    "                <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                    {{item.name}}\n" +
    "                </ui-select-choices>\n" +
    "            </ui-select>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- postal code -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.postal.$invalid && (billToForm.postal.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"zipCodeBill\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"zipCodeBill\" name=\"postal\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.zipCode\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- province -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.province.$invalid && (billToForm.province.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"provinceBill\">{{'PROVINCE' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"provinceBill\" name=\"province\" ng-required=\"billToForm.country.$invalid || (!shipToSameAsBillTo && billToForm.country.$viewValue.id === 'CN')\" autocomplete=\"on\" ng-model=\"order.billTo.state\" \n" +
    "            ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- city -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.city.$invalid && (billToForm.city.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"cityBill\">{{'CITY' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"cityBill\" name=\"city\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.city\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- street name -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.streetBill.$invalid && (billToForm.streetBill.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address3Bill\">{{'STREET_NAME' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                class=\"form-control\" id=\"address3Bill\" name=\"streetBill\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "                ng-model=\"order.billTo.address1\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- building name -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address2Bill\">{{'BUILDING_NAME' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Bill\" name=\"address2\"\n" +
    "            ng-model=\"order.billTo.address2\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- name -->\n" +
    "    <div class=\"col-md-8\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "             ng-class=\"{'has-error': billToForm.contactName.$invalid && (billToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactNameBill\">{{'NAME' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                   class=\"form-control\" id=\"contactNameBill\" name=\"contactName\" ng-model=\"order.billTo.contactName\"\n" +
    "                   ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- company name -->\n" +
    "    <!-- <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"companyNameBill\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"companyNameBill\" name=\"companyName\" ng-model=\"order.billTo.companyName\"\n" +
    "                   autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div> -->\n" +
    "\n" +
    "    <!-- contact phone -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactPhoneBill\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"contactPhoneBill\" name=\"contactPhone\" ng-model=\"order.billTo.contactPhone\"\n" +
    "                   autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/billingDE.html',
    "<!-- billing DE -->\n" +
    "<div>\n" +
    "\n" +
    "    <div ng-hide=\"shipToSameAsBillTo\">\n" +
    "\n" +
    "    <!-- country -->\n" +
    "    <div class=\"col-md-4 custom-select-container\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.country.$invalid && ( billToForm.country.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"countryBill\">{{'COUNTRY' | translate}}</label>\n" +
    "            <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" ng-required=\"!shipToSameAsBillTo\">\n" +
    "                <ui-select-match>\n" +
    "                    {{$select.selected.name}}\n" +
    "                </ui-select-match>\n" +
    "                <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                    {{item.name}}\n" +
    "                </ui-select-choices>\n" +
    "            </ui-select>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "    \n" +
    "    <!-- name -->\n" +
    "    <div class=\"col-md-8\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "             ng-class=\"{'has-error': billToForm.contactName.$invalid && (billToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactNameBill\">{{'NAME' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                   class=\"form-control\" id=\"contactNameBill\" name=\"contactName\" ng-model=\"order.billTo.contactName\"\n" +
    "                   ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- company name -->\n" +
    "    <!-- <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"companyNameBill\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"companyNameBill\" name=\"companyName\" ng-model=\"order.billTo.companyName\"\n" +
    "                   autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div> -->\n" +
    "\n" +
    "    <!-- address 1 -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.address1.$invalid && (billToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address1Bill\">{{'ADDRESS' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                   class=\"form-control\" name=\"address1\" id=\"address1Bill\" ng-model=\"order.billTo.address1\"\n" +
    "            ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- address 2 -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address2Bill\">{{'ADDRESS' | translate}} 2</label>\n" +
    "            <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Bill\" name=\"address2\"\n" +
    "            ng-model=\"order.billTo.address2\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- city -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.city.$invalid && (billToForm.city.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"cityBill\">{{'CITY' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"cityBill\" name=\"city\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.city\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- postal code  -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.postal.$invalid && (billToForm.postal.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"zipCodeBill\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"zipCodeBill\" name=\"postal\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.zipCode\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- contact phone  -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactPhoneBill\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"contactPhoneBill\" name=\"contactPhone\" ng-model=\"order.billTo.contactPhone\"\n" +
    "                   autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/billingDefault.html',
    "<!-- billing default -->\n" +
    "<div>\n" +
    "\n" +
    "    <div ng-hide=\"shipToSameAsBillTo\">\n" +
    "\n" +
    "    <!-- country -->\n" +
    "    <div class=\"col-md-4 custom-select-container checkout-selector\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': !billToForm.country.$viewValue.id && ( billToForm.country.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"countryBill\">{{'COUNTRY' | translate}}</label>\n" +
    "            <ui-select ng-model=\"order.billTo.country\" on-select=\"setLocale($item)\" ng-required=\"!shipToSameAsBillTo\" id=\"countryBill\" name=\"country\">\n" +
    "                <ui-select-match>\n" +
    "                    {{$select.selected.name}}\n" +
    "                </ui-select-match>\n" +
    "                <ui-select-choices repeat=\"item.id as item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                    {{item.name}}\n" +
    "                </ui-select-choices>\n" +
    "            </ui-select>\n" +
    "        </div>\n" +
    "    </div>    \n" +
    "\n" +
    "    <!-- name -->\n" +
    "    <div class=\"col-md-8\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "             ng-class=\"{'has-error': billToForm.contactName.$invalid && (billToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactNameBill\">{{'NAME' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                   class=\"form-control\" id=\"contactNameBill\" name=\"contactName\" ng-model=\"order.billTo.contactName\"\n" +
    "                   ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- company -->\n" +
    "    <!-- <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"companyNameBill\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"companyNameBill\" name=\"companyName\" ng-model=\"order.billTo.companyName\"\n" +
    "            autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div> -->\n" +
    "\n" +
    "    <!-- address 1 -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.address1.$invalid && (billToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address1Bill\">{{'ADDRESS' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "            class=\"form-control\" name=\"address1\" id=\"address1Bill\" ng-model=\"order.billTo.address1\"\n" +
    "            ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- address 2 -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address2Bill\">{{'ADDRESS' | translate}} 2</label>\n" +
    "            <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Bill\" name=\"address2\"\n" +
    "            ng-model=\"order.billTo.address2\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- city -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.city.$invalid && (billToForm.city.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"cityBill\">{{'CITY' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"cityBill\" name=\"city\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.city\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- state -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "    	<div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.state.$invalid && (billToForm.state.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"stateBill\">{{'STATE' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"stateBill\" name=\"state\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.state\" ng-change=\"$root.closeCartOnCheckout()\" placeholder=\"({{'OPTIONAL' | translate}})\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- zip code  -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.postal.$invalid && (billToForm.postal.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"zipCodeBill\">{{'ZIP' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"zipCodeBill\" name=\"postal\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.zipCode\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- contact phone -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactPhoneBill\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"contactPhoneBill\" name=\"contactPhone\" ng-model=\"order.billTo.contactPhone\"\n" +
    "                   autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/billingGB.html',
    "<!-- billing bg -->\n" +
    "<div>\n" +
    "\n" +
    "    <div ng-hide=\"shipToSameAsBillTo\">\n" +
    "\n" +
    "    <!-- country -->\n" +
    "    <div class=\"col-md-4 custom-select-container\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.country.$invalid && ( billToForm.country.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"countryBill\">{{'COUNTRY' | translate}}</label>\n" +
    "            <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" ng-required=\"!shipToSameAsBillTo\">\n" +
    "                <ui-select-match>\n" +
    "                    {{$select.selected.name}}\n" +
    "                </ui-select-match>\n" +
    "                <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                    {{item.name}}\n" +
    "                </ui-select-choices>\n" +
    "            </ui-select>\n" +
    "        </div>\n" +
    "    </div>    \n" +
    "\n" +
    "    <!-- name -->\n" +
    "    <div class=\"col-md-8\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "             ng-class=\"{'has-error': billToForm.contactName.$invalid && (billToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactNameBill\">{{'NAME' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                   class=\"form-control\" id=\"contactNameBill\" name=\"contactName\" ng-model=\"order.billTo.contactName\"\n" +
    "                   ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- company name -->\n" +
    "    <!-- <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"companyNameBill\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"companyNameBill\" name=\"companyName\" ng-model=\"order.billTo.companyName\"\n" +
    "                   autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div> -->\n" +
    "\n" +
    "    <!-- address 1 -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.address1.$invalid && (billToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address1Bill\">{{'ADDRESS' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                   class=\"form-control\" name=\"address1\" id=\"address1Bill\" ng-model=\"order.billTo.address1\"\n" +
    "            ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- address 2 -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address2Bill\">{{'ADDRESS' | translate}} 2</label>\n" +
    "            <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Bill\" name=\"address2\"\n" +
    "            ng-model=\"order.billTo.address2\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- city -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.city.$invalid && (billToForm.city.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"cityBill\">{{'CITY' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"cityBill\" name=\"city\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.city\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- postal code -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.postal.$invalid && (billToForm.postal.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"zipCodeBill\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"zipCodeBill\" name=\"postal\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.zipCode\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- contact phone -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactPhoneBill\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"contactPhoneBill\" name=\"contactPhone\" ng-model=\"order.billTo.contactPhone\"\n" +
    "                   autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/billingJP.html',
    "<!-- billing jp -->\n" +
    "<div>\n" +
    "\n" +
    "    <div ng-hide=\"shipToSameAsBillTo\">\n" +
    "\n" +
    "    <!-- country -->\n" +
    "    <div class=\"col-md-4 custom-select-container\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.country.$invalid && ( billToForm.country.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"countryBill\">{{'COUNTRY' | translate}}</label>\n" +
    "            <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" ng-required=\"!shipToSameAsBillTo\">\n" +
    "                <ui-select-match>\n" +
    "                    {{$select.selected.name}}\n" +
    "                </ui-select-match>\n" +
    "                <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                    {{item.name}}\n" +
    "                </ui-select-choices>\n" +
    "            </ui-select>\n" +
    "        </div>\n" +
    "    </div>    \n" +
    "    \n" +
    "    <!-- name -->\n" +
    "    <div class=\"col-md-8\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "             ng-class=\"{'has-error': billToForm.contactName.$invalid && (billToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactNameBill\">{{'NAME' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                   class=\"form-control\" id=\"contactNameBill\" name=\"contactName\" ng-model=\"order.billTo.contactName\"\n" +
    "                   ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- company name -->\n" +
    "    <!-- <div class=\"col-md-8\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"companyNameBill\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"companyNameBill\" name=\"companyName\" ng-model=\"order.billTo.companyName\" autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" \n" +
    "            ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div> -->\n" +
    "\n" +
    "    <!-- postal code  -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.postal.$invalid && (billToForm.postal.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"zipCodeBill\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"zipCodeBill\" name=\"postal\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.zipCode\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- prefecture -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.province.$invalid && (billToForm.province.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"provinceBill\">{{'PREFECTURE' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"provinceBill\" name=\"province\" ng-required=\"billToForm.country.$invalid || (!shipToSameAsBillTo && billToForm.country.$viewValue.id === 'JP')\" autocomplete=\"on\" ng-model=\"order.billTo.state\" \n" +
    "            ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- city village -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.city.$invalid && (billToForm.city.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"cityBill\">{{'CITY_VILLAGE' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"cityBill\" name=\"city\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.city\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- subarea -->\n" +
    "    <div class=\"col-md-4\"\n" +
    "        ng-class=\"{'has-error': billToForm.address2.$invalid && (billToForm.address2.$dirty || showPristineErrors) }\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address2Bill\">{{'SUBAREA' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "            class=\"form-control\" id=\"address2Bill\" name=\"address2\"\n" +
    "            ng-model=\"order.billTo.address2\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- further subarea -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.address1.$invalid && (billToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address1Bill\">{{'FURTHER_SUBAREA' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "            class=\"form-control\" name=\"address1\" id=\"address1Bill\" ng-model=\"order.billTo.address1\"\n" +
    "            ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- contact phone -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactPhoneBill\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"contactPhoneBill\" name=\"contactPhone\" ng-model=\"order.billTo.contactPhone\" autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" \n" +
    "            ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/billingUS.html',
    "<!-- billing us -->\n" +
    "<div>\n" +
    "\n" +
    "    <div ng-hide=\"shipToSameAsBillTo\">\n" +
    "\n" +
    "    <!-- country -->\n" +
    "    <div class=\"col-md-4 custom-select-container checkout-selector\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.country.$invalid && ( billToForm.country.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"countryBill\">{{'COUNTRY' | translate}}</label>\n" +
    "            <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" id=\"countryBill\" name=\"country\" ng-required=\"!shipToSameAsBillTo\">\n" +
    "                <ui-select-match>\n" +
    "                    {{$select.selected.name}}\n" +
    "                </ui-select-match>\n" +
    "                <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                    {{item.name}}\n" +
    "                </ui-select-choices>\n" +
    "            </ui-select>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- name -->\n" +
    "    <div class=\"col-md-8\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "             ng-class=\"{'has-error': billToForm.contactName.$invalid && (billToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactNameBill\">{{'NAME' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                   class=\"form-control\" id=\"contactNameBill\" name=\"contactName\" ng-model=\"order.billTo.contactName\"\n" +
    "                   ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>    \n" +
    "\n" +
    "    <!-- company name -->\n" +
    "    <!-- <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"companyNameBill\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"companyNameBill\" name=\"companyName\" ng-model=\"order.billTo.companyName\"\n" +
    "            autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div> -->\n" +
    "\n" +
    "    <!-- addrss 1 -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.address1.$invalid && (billToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address1Bill\">{{'ADDRESS' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "            class=\"form-control\" name=\"address1\" id=\"address1Bill\" ng-model=\"order.billTo.address1\"\n" +
    "            ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- address 2 -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"address2Bill\">{{'ADDRESS' | translate}} 2</label>\n" +
    "            <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Bill\" name=\"address2\"\n" +
    "            ng-model=\"order.billTo.address2\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- city -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.city.$invalid && (billToForm.city.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"cityBill\">{{'CITY' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"cityBill\" name=\"city\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.city\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- state -->\n" +
    "    <div class=\"col-md-4 custom-select-container checkout-selector\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.state.$invalid && (billToForm.state.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"stateBill\">{{'STATE' | translate}}</label>\n" +
    "            <ui-select ng-model=\"order.billTo.state\" id=\"stateBill\" name=\"state\" ng-required=\"billToForm.country.$invalid || (!shipToSameAsBillTo && billToForm.country.$viewValue.id === 'US')\">\n" +
    "                <ui-select-match>\n" +
    "                    {{$select.selected.name}}\n" +
    "                </ui-select-match>\n" +
    "                <ui-select-choices repeat=\"item.id as item in (usStates | filter: $select.search)\">\n" +
    "                    {{item.name}}\n" +
    "                </ui-select-choices>\n" +
    "            </ui-select>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- zip code  -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\"\n" +
    "            ng-class=\"{'has-error': billToForm.postal.$invalid && (billToForm.postal.$dirty || showPristineErrors) }\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"zipCodeBill\">{{'ZIP' | translate}}</label>\n" +
    "            <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "            class=\"form-control\" id=\"zipCodeBill\" name=\"postal\" ng-required=\"!shipToSameAsBillTo\" autocomplete=\"on\"\n" +
    "            ng-model=\"order.billTo.zipCode\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- contact phone -->\n" +
    "    <div class=\"col-md-4\">\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" for=\"contactPhoneBill\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "            <input type=\"text\" class=\"form-control\" id=\"contactPhoneBill\" name=\"contactPhone\" ng-model=\"order.billTo.contactPhone\"\n" +
    "                   autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/shippingCA.html',
    "<!-- shipping ca -->\n" +
    "<div>\n" +
    "\n" +
    "    <div id=\"ship-to-fields\">\n" +
    "\n" +
    "        <!-- country -->\n" +
    "        <div class=\"col-md-4 custom-select-container checkout-selector\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "                <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" ng-required=\"true\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected.name}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                        {{item.name}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- full name  -->\n" +
    "        <div class=\"col-md-8\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                 ng-class=\"{'has-error': shipToForm.contactName.$invalid && (shipToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactNameShip\">{{'FULL_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                class=\"form-control\" id=\"contactNameShip\" name=\"contactName\" ng-model=\"order.shipTo.contactName\"\n" +
    "                ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>        \n" +
    "\n" +
    "        <!-- company name -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"companyNameShip\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" id=\"companyNameShip\" name=\"companyName\" ng-model=\"order.shipTo.companyName\"\n" +
    "                       autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- address 1 -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.address1.$invalid && (shipToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address1Ship\">{{'ADDRESS' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                    class=\"form-control\" name=\"address1\" id=\"address1Ship\" ng-model=\"order.shipTo.address1\"\n" +
    "                    ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- address 2 -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address2Ship\">{{'ADDRESS' | translate}} 2</label>\n" +
    "                <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Ship\" name=\"address2\"\n" +
    "                ng-model=\"order.shipTo.address2\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- city -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.city.$invalid && (shipToForm.city.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"cityShip\">{{'CITY' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"cityShip\" name=\"city\" ng-required=\"true\" ng-model=\"order.shipTo.city\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- province -->\n" +
    "        <div class=\"col-md-4 custom-select-container checkout-selector\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.state.$invalid && (shipToForm.state.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"stateShip\">{{'PROVINCE' | translate}}</label>\n" +
    "                <ui-select ng-model=\"order.shipTo.state\" id=\"stateShip\" name=\"state\" ng-required=\"shipToForm.country.$viewValue.id === 'CA'\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected.name}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"item.id as item in (caProvinces | filter: $select.search)\">\n" +
    "                        {{item.name}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- postal code -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.zip.$invalid && ( shipToForm.zip.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"zipCodeShip\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" ng-model=\"order.shipTo.zipCode\" name=\"zip\" id=\"zipCodeShip\" autocomplete=\"on\" ng-required=\"true\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- contact phone -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactPhoneShip\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" ng-model=\"order.shipTo.contactPhone\" name=\"postal\" id=\"contactPhoneShip\" autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/shippingCN.html',
    "<!-- shipping cn -->\n" +
    "<div>\n" +
    "\n" +
    "    <div id=\"ship-to-fields\">\n" +
    "\n" +
    "        <!-- country -->\n" +
    "        <div class=\"col-md-4 custom-select-container\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "                <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" ng-required=\"true\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected.name}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                        {{item.name}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- postal code -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.zip.$invalid && ( shipToForm.zip.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"zipCodeShip\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" ng-model=\"order.shipTo.zipCode\" name=\"zip\" id=\"zipCodeShip\" autocomplete=\"on\" ng-required=\"true\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        \n" +
    "        <!-- province -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.state.$invalid && (shipToForm.state.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"stateShip\">{{'PROVINCE' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\"\n" +
    "                        id=\"stateShip\" name=\"state\" ng-required=\"true\" ng-model=\"order.shipTo.state\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- city -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.city.$invalid && (shipToForm.city.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"cityShip\">{{'CITY' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\"\n" +
    "                        id=\"cityShip\" name=\"city\" ng-required=\"true\" ng-model=\"order.shipTo.city\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- street name -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.streetShip.$invalid && (shipToForm.streetShip$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address3Ship\">{{'STREET_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                    class=\"form-control\" id=\"address3Ship\" name=\"streetShip\" autocomplete=\"on\" \n" +
    "                    ng-model=\"order.shipTo.address1\" ng-required=\"true\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- building name -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address2Ship\">{{'BUILDING_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Ship\" name=\"address2\"\n" +
    "                ng-model=\"order.shipTo.address2\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- full name  -->\n" +
    "        <div class=\"col-md-8\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                 ng-class=\"{'has-error': shipToForm.contactName.$invalid && (shipToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactNameShip\">{{'FULL_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                class=\"form-control\" id=\"contactNameShip\" name=\"contactName\" ng-model=\"order.shipTo.contactName\"\n" +
    "                ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- company name -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"companyNameShip\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" id=\"companyNameShip\" name=\"companyName\" ng-model=\"order.shipTo.companyName\"\n" +
    "                       autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- contact phone -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactPhoneShip\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" ng-model=\"order.shipTo.contactPhone\" name=\"postal\" id=\"contactPhoneShip\" autocomplete=\"on\"\n" +
    "                        placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/shippingDE.html',
    "<!-- shipping de -->\n" +
    "<div>\n" +
    "\n" +
    "    <div id=\"ship-to-fields\">\n" +
    "\n" +
    "        <!-- country -->\n" +
    "        <div class=\"col-md-4 custom-select-container\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "                <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" ng-required=\"true\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected.name}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                        {{item.name}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        \n" +
    "        <!-- full name  -->\n" +
    "        <div class=\"col-md-8\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                 ng-class=\"{'has-error': shipToForm.contactName.$invalid && (shipToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactNameShip\">{{'FULL_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                class=\"form-control\" id=\"contactNameShip\" name=\"contactName\" ng-model=\"order.shipTo.contactName\"\n" +
    "                ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- company name -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"companyNameShip\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" id=\"companyNameShip\" name=\"companyName\" ng-model=\"order.shipTo.companyName\"\n" +
    "                       autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- address 1 -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.address1.$invalid && (shipToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address1Ship\">{{'ADDRESS' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                    class=\"form-control\" name=\"address1\" id=\"address1Ship\" ng-model=\"order.shipTo.address1\"\n" +
    "                    ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- address 2 -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address2Ship\">{{'ADDRESS' | translate}} 2</label>\n" +
    "                <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Ship\" name=\"address2\"\n" +
    "                ng-model=\"order.shipTo.address2\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- city -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.city.$invalid && (shipToForm.city.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"cityShip\">{{'CITY' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"cityShip\" name=\"city\" ng-required=\"true\" ng-model=\"order.shipTo.city\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- postal code -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.zip.$invalid && ( shipToForm.zip.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"zipCodeShip\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" ng-model=\"order.shipTo.zipCode\" name=\"zip\" id=\"zipCodeShip\" autocomplete=\"on\" ng-required=\"true\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- contact phone  -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactPhoneShip\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" ng-model=\"order.shipTo.contactPhone\" name=\"postal\" id=\"contactPhoneShip\" autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\"\n" +
    "                ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/shippingDefault.html',
    "<!-- shipping default -->\n" +
    "<div>\n" +
    "\n" +
    "    <div id=\"ship-to-fields\">\n" +
    "\n" +
    "        <!-- country -->\n" +
    "        <div class=\"col-md-4 custom-select-container checkout-selector\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': !shipToForm.country.$viewValue.id && ( shipToForm.country.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"countryShip\">{{'COUNTRY' | translate}}</label>\n" +
    "                <ui-select ng-model=\"order.shipTo.country\" on-select=\"setLocale($item)\" ng-required=\"true\" id=\"countryShip\" name=\"country\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected.name}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"item.id as item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                        {{item.name}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- full name  -->\n" +
    "        <div class=\"col-md-8\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                 ng-class=\"{'has-error': shipToForm.contactName.$invalid && (shipToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactNameShip\">{{'FULL_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                class=\"form-control\" id=\"contactNameShip\" name=\"contactName\" ng-model=\"order.shipTo.contactName\"\n" +
    "                ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- company name -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"companyNameShip\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" id=\"companyNameShip\" name=\"companyName\" ng-model=\"order.shipTo.companyName\"\n" +
    "                       autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- address 1 -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.address1.$invalid && (shipToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address1Ship\">{{'ADDRESS' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                    class=\"form-control\" name=\"address1\" id=\"address1Ship\" ng-model=\"order.shipTo.address1\"\n" +
    "                    ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- address 2 -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address2Ship\">{{'ADDRESS' | translate}} 2</label>\n" +
    "                <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Ship\" name=\"address2\"\n" +
    "                    ng-model=\"order.shipTo.address2\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- city -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.city.$invalid && (shipToForm.city.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"cityShip\">{{'CITY' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"cityShip\" name=\"city\" ng-required=\"true\" ng-model=\"order.shipTo.city\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- state -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"stateShip\">{{'STATE' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" id=\"stateShip\" name=\"state\" ng-model=\"order.shipTo.state\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\" placeholder=\"({{'OPTIONAL' | translate}})\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- zip code  -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.zip.$invalid && ( shipToForm.zip.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"zipCodeShip\">{{'ZIP' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                class=\"form-control\" id=\"zipCodeShip\" name=\"zip\" ng-required=\"true\" autocomplete=\"on\"\n" +
    "                ng-model=\"order.shipTo.zipCode\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- contact phone -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactPhoneShip\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" ng-model=\"order.shipTo.contactPhone\" name=\"postal\" id=\"contactPhoneShip\" autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" \n" +
    "                ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/shippingGB.html',
    "<!-- shipping gb -->\n" +
    "<div>\n" +
    "\n" +
    "    <div id=\"ship-to-fields\">\n" +
    "        \n" +
    "        <!-- country -->\n" +
    "        <div class=\"col-md-4 custom-select-container\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "                <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" ng-required=\"true\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected.name}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                        {{item.name}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- full name  -->\n" +
    "        <div class=\"col-md-8\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                 ng-class=\"{'has-error': shipToForm.contactName.$invalid && (shipToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactNameShip\">{{'FULL_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                class=\"form-control\" id=\"contactNameShip\" name=\"contactName\" ng-model=\"order.shipTo.contactName\"\n" +
    "                ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>        \n" +
    "\n" +
    "        <!-- comapny name -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"companyNameShip\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" id=\"companyNameShip\" name=\"companyName\" ng-model=\"order.shipTo.companyName\"\n" +
    "                       autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- address 1 -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.address1.$invalid && (shipToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address1Ship\">{{'ADDRESS' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                       class=\"form-control\" name=\"address1\" id=\"address1Ship\" ng-model=\"order.shipTo.address1\"\n" +
    "                ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- address 2 -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address2Ship\">{{'ADDRESS' | translate}} 2</label>\n" +
    "                <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Ship\" name=\"address2\"\n" +
    "                ng-model=\"order.shipTo.address2\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- city -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.city.$invalid && (shipToForm.city.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"cityShip\">{{'CITY' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\"\n" +
    "                        id=\"cityShip\" name=\"city\" ng-required=\"true\" ng-model=\"order.shipTo.city\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- postal code -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.zip.$invalid && (shipToForm.zip.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"zipCodeShip\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                class=\"form-control\" id=\"zipCodeShip\" name=\"zip\" ng-required=\"true\" autocomplete=\"on\"\n" +
    "                ng-model=\"order.shipTo.zipCode\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- contact phone  -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactPhoneShip\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" ng-model=\"order.shipTo.contactPhone\" name=\"postal\" id=\"contactPhoneShip\" autocomplete=\"on\"\n" +
    "                        placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/shippingJP.html',
    "<!-- shipping jp -->\n" +
    "<div>\n" +
    "\n" +
    "    <div id=\"ship-to-fields\">\n" +
    "\n" +
    "                <!-- country -->\n" +
    "        <div class=\"col-md-4 custom-select-container\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "                <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" ng-required=\"true\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected.name}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                        {{item.name}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- full name  -->\n" +
    "        <div class=\"col-md-8\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                 ng-class=\"{'has-error': shipToForm.contactName.$invalid && (shipToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactNameShip\">{{'FULL_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                class=\"form-control\" id=\"contactNameShip\" name=\"contactName\" ng-model=\"order.shipTo.contactName\"\n" +
    "                ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- company name -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"companyNameShip\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" id=\"companyNameShip\" name=\"companyName\" ng-model=\"order.shipTo.companyName\"\n" +
    "                    autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- postal code -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.zip.$invalid && ( shipToForm.zip.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"zipCodeShip\">{{'POSTAL_CODE' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" ng-model=\"order.shipTo.zipCode\" name=\"zip\" id=\"zipCodeShip\" autocomplete=\"on\" ng-required=\"true\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- prefecture -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.state.$invalid && (shipToForm.state.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"stateShip\">{{'PREFECTURE' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"stateShip\" name=\"state\" ng-required=\"true\" ng-model=\"order.shipTo.state\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- city village -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.city.$invalid && (shipToForm.city.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"cityShip\">{{'CITY_VILLAGE' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"cityShip\" name=\"city\" ng-required=\"true\" ng-model=\"order.shipTo.city\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- subarea -->\n" +
    "        <div class=\"col-md-4\"\n" +
    "            ng-class=\"{'has-error': shipToForm.address2.$invalid && (shipToForm.address2.$dirty || showPristineErrors) }\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address2Ship\">{{'SUBAREA' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                    class=\"form-control\" id=\"address2Ship\" name=\"address2\"\n" +
    "                    ng-model=\"order.shipTo.address2\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- further subarea -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.address1.$invalid && (shipToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address1Ship\">{{'FURTHER_SUBAREA' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                    class=\"form-control\" name=\"address1\" id=\"address1Ship\" ng-model=\"order.shipTo.address1\"\n" +
    "                    autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- contact phone  -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactPhoneShip\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" ng-model=\"order.shipTo.contactPhone\" name=\"phoneShip\" id=\"contactPhoneShip\" autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" \n" +
    "                ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/addresses/templates/shippingUS.html',
    "<!-- shipping us -->\n" +
    "<div>\n" +
    "\n" +
    "    <div id=\"ship-to-fields\">\n" +
    "\n" +
    "        <!-- country -->\n" +
    "        <div class=\"col-md-4 custom-select-container checkout-selector\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.country.$invalid && ( shipToForm.country.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"addressLocale\">{{'COUNTRY' | translate}}</label>\n" +
    "                <ui-select ng-model=\"localeSelection.selected\" on-select=\"changeLocale($item)\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" ng-required=\"true\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected.name}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"item in (localeSelections | filter: $select.search) track by item.id\">\n" +
    "                        {{item.name}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- full name  -->\n" +
    "        <div class=\"col-md-8\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                 ng-class=\"{'has-error': shipToForm.contactName.$invalid && (shipToForm.contactName.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactNameShip\">{{'FULL_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                class=\"form-control\" id=\"contactNameShip\" name=\"contactName\" ng-model=\"order.shipTo.contactName\"\n" +
    "                ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- company name -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"companyNameShip\">{{'COMPANY_NAME' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" id=\"companyNameShip\" name=\"companyName\" ng-model=\"order.shipTo.companyName\"\n" +
    "                       autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- address 1 -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.address1.$invalid && (shipToForm.address1.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address1Ship\">{{'ADDRESS' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                    class=\"form-control\" name=\"address1\" id=\"address1Ship\" ng-model=\"order.shipTo.address1\"\n" +
    "                    ng-required=\"true\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- address 2 -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"address2Ship\">{{'ADDRESS' | translate}} 2</label>\n" +
    "                <input type=\"text\" class=\"form-control\" placeholder=\"({{'OPTIONAL' | translate}})\" id=\"address2Ship\" name=\"address2\"\n" +
    "                    ng-model=\"order.shipTo.address2\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- city -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.city.$invalid && (shipToForm.city.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"cityShip\">{{'CITY' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" class=\"form-control\" id=\"cityShip\" name=\"city\" ng-required=\"true\" ng-model=\"order.shipTo.city\" autocomplete=\"on\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- state -->\n" +
    "        <div class=\"col-md-4 custom-select-container checkout-selector\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.state.$invalid && (shipToForm.state.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"stateShip\">{{'STATE' | translate}}</label>\n" +
    "                <ui-select ng-model=\"order.shipTo.state\" id=\"stateShip\" name=\"state\" ng-required=\"shipToForm.country.$invalid || shipToForm.country.$viewValue.id === 'US'\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected.name}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"item.id as item in (usStates | filter: $select.search)\">\n" +
    "                        {{item.name}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- zip code -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.zip.$invalid && ( shipToForm.zip.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"zipCodeShip\">{{'ZIP' | translate}}</label>\n" +
    "                <input type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                class=\"form-control\" id=\"zipCodeShip\" name=\"zip\" ng-required=\"true\" autocomplete=\"on\"\n" +
    "                ng-model=\"order.shipTo.zipCode\" ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- contact phone -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"contactPhoneShip\">{{'CONTACT_PHONE' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" ng-model=\"order.shipTo.contactPhone\" name=\"postal\" id=\"contactPhoneShip\" autocomplete=\"on\" placeholder=\"({{'OPTIONAL' | translate}})\" \n" +
    "                ng-change=\"$root.closeCartOnCheckout()\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/auth/templates/auth.html',
    "<!-- close modal -->\n" +
    "<div class=\"closeModalButton\">\n" +
    "    <div class=\"glyphicon glyphicon-remove popoverCloseBtn pull-right\" aria-hidden=\"true\" ng-click=\"closeDialog()\"></div>\n" +
    "</div>\n" +
    "\n" +
    "<section stop-event=\"touchend\">\n" +
    "\n" +
    "    <!-- Nav tabs -->\n" +
    "    <ul class=\"nav nav-tabs signInTabs text-center\" role=\"tablist\">\n" +
    "      <li class=\"active signInButton\"><a href=\"#signin\" role=\"tab\" data-toggle=\"tab\">{{'SIGN_IN' | translate}}</a></li>\n" +
    "      <li><a href=\"#signup\" role=\"tab\" data-toggle=\"tab\">{{'CREATE_ACCOUNT' | translate}}</a></li>\n" +
    "    </ul>\n" +
    "\n" +
    "    <!-- clear row -->\n" +
    "    <div class=\"clr\"><!-- --></div>\n" +
    "\n" +
    "    <!-- tab content -->\n" +
    "    <div class=\"tab-content\">\n" +
    "\n" +
    "      <div class=\"tab-pane active\" id=\"signin\" >\n" +
    "\n" +
    "        <p class=\"error\" ng-show=\"!cookiesEnabled\">{{'COOKIES_ENABLED_ERROR' | translate}}</p>\n" +
    "\n" +
    "        <!-- sign in form -->\n" +
    "        <div ng-include=\"'js/app/auth/templates/signin.html'\" ></div>\n" +
    "\n" +
    "        <!-- fb and google login opions -->\n" +
    "        <div ng-if=\"(fbAppId || googleClientId) && cookiesEnabled\">\n" +
    "\n" +
    "          <div class=\"row\">\n" +
    "\n" +
    "            <!-- fb login button -->\n" +
    "            <div class=\"col-md-6 col-xs-6\">\n" +
    "              <div class=\"socialMediaSigninContainer \">\n" +
    "                <div ng-if=\"fbAppId\" ng-click=\"fbLogin()\">\n" +
    "                    <div class=\"fbLogin\">\n" +
    "                      <div class=\"fbsignInLabel\">{{'SIGN_IN_WITH_FACEBOOK' | translate}}</div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "              </div>              \n" +
    "            </div>\n" +
    "\n" +
    "            <!-- google login button -->\n" +
    "            <div class=\"col-md-6 col-xs-6\">\n" +
    "              <div class=\"socialMediaSigninContainer\">\n" +
    "                <div ng-if=\"googleClientId\"  class=\"googlePlusLogin\">\n" +
    "                  <div class=\"googleSignIn\" ng-click=\"googleLogin()\">\n" +
    "                    <div class=\"googleSignInLabel\">{{'LOG_IN_WITH_GOOGLE' | translate}}</div>\n" +
    "                  </div>\n" +
    "                </div>\n" +
    "              </div>\n" +
    "            </div>\n" +
    "\n" +
    "          </div>\n" +
    "\n" +
    "        </div>\n" +
    "\n" +
    "      </div>\n" +
    "      \n" +
    "      <!-- sign up form -->\n" +
    "      <div class=\"tab-pane\" id=\"signup\" >\n" +
    "        <p class=\"error\" ng-show=\"showCreateAccountErrMsg\">{{'CREATE_ACCOUNT_ERROR' | translate}}</p>\n" +
    "        <div ng-include=\"'js/app/auth/templates/signup.html'\"></div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- checkout as guest -->\n" +
    "    <div class=\"continue-as-guest-section\" ng-if=\"showAsGuest\">\n" +
    "\n" +
    "      <!-- seperator -->\n" +
    "      <div class=\"seperatorLine\">\n" +
    "        <p class=\"subtitle lineContainer\"><span>Or</span></p>\n" +
    "      </div>\n" +
    "\n" +
    "      <!-- button -->\n" +
    "      <a href=\"\" ng-click=\"continueAsGuest()\" class=\"btn btn-primary btn-lg btn-block\">{{'CONTINUE_AS_GUEST' | translate}}</a>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "</section>\n"
  );


  $templateCache.put('js/app/auth/templates/check-email.html',
    "<section>\n" +
    "\n" +
    "	<div class=\"page-header\">\n" +
    "	<h2>{{'CHECK_EMAIL' | translate }}</h2>\n" +
    "	<p>{{'CHECK_EMAIL_INSTRUCT' | translate }}</p>\n" +
    "	</div>\n" +
    "\n" +
    "</section>\n"
  );


  $templateCache.put('js/app/auth/templates/create-account.html',
    "<div ng-if=\"!isAuthenticated\">\n" +
    "\n" +
    "    {{'ONE_MORE_STEP' | translate}} <br>\n" +
    "    {{'ONE_MORE_STEP_MESSAGE' | translate}} <br>\n" +
    "\n" +
    "        <div ng-if=\"fbAppId || googleClientId\" class=\"socialMediaSigninContainer row\">\n" +
    "            <div ng-if=\"fbAppId\" class=\"fbLogin col-sm-6 col-xs-12\" ng-click=\"fbLogin()\">\n" +
    "                <div class=\"fbLoginButton\">\n" +
    "                    <div class=\"fbsignInLabel\">{{'SIGN_IN_WITH_FACEBOOK' | translate}}</div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div ng-if=\"googleClientId\"  class=\"googlePlusLogin col-sm-6 col-xs-12\">\n" +
    "                <div class=\"googleSignIn\">\n" +
    "                    <div class=\"googleSignInLabel\">{{'LOG_IN_WITH_GOOGLE_PLUS' | translate}}</div>\n" +
    "                    <google-plus-signin clientid=\"{{googleClientId}}\" approvalprompt=\"force\"></google-plus-signin>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "      <div class=\"tab-pane\" id=\"signup\" >\n" +
    "        <form name=\"signupForm\" ng-submit=\"signup(user.signup.password, confirmationDetails.emailAddress, signupForm)\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <span class=\"input-group-addon\"><label class=\"control-label\" for=\"emailInput\">{{'EMAIL' | translate}}</label></span>\n" +
    "                <input builder-input=\"email\" type=\"email\" class=\"form-control\" id=\"emailInput\" name=\"email\"\n" +
    "                       ng-model=\"confirmationDetails.emailAddress\" required ng-focus=\"clearErrors()\">\n" +
    "            </div>\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <span class=\"input-group-addon\"><label class=\"control-label\" for=\"newPasswordInput\">{{'PASSWORD' | translate}}</label></span>\n" +
    "                <input builder-input=\"password\" type=\"password\" class=\"form-control\" id=\"newPasswordInput\" placeholder=\"{{'PASSWORD_MINCHAR'| translate}}\" name=\"password\"\n" +
    "                       ng-model=\"user.signup.password\" required ng-focus=\"clearErrors()\">\n" +
    "            </div>\n" +
    "            <ul ng-if=\"errors && errors.signup.length\" class=\"text-danger list-unstyled\">\n" +
    "                <li ng-repeat=\"error in errors.signup\">{{error.message | translate}}</li>\n" +
    "            </ul>\n" +
    "          <button type=\"submit\" id=\"create-acct-btn\" class=\"btn btn-primary btn-lg btn-block\">{{'CREATE_ACCOUNT' | translate}}</button>\n" +
    "        </form>\n" +
    "      </div>\n" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/auth/templates/password-request-reset.html',
    "<section class=\"resetPasswordModal\" stop-event=\"touchend\">\n" +
    "	<div class=\"page-header\">\n" +
    "        <div class=\"glyphicon glyphicon-remove pull-right hidden-lg hidden-md\" aria-hidden=\"true\" ng-click=\"closeDialog()\"></div>\n" +
    "        <h3>{{ title | translate}}</h3>\n" +
    "        <p>{{ instructions | translate}}</p>\n" +
    "	</div>\n" +
    "	<form name=\"resetPwForm\" novalidate>\n" +
    "	    <div class=\"form-group input-group\" ng-class=\"{'has-error': resetPwForm.password.$invalid &&  resetPwForm.password.$dirty}\">\n" +
    "          <span class=\"input-group-addon\"><label class=\"control-label\" for=\"usernameInput\">{{'ACCOUNT_EMAIL' | translate}}</label></span>\n" +
    "            <input builder-input=\"email\" type=\"email\" class=\"form-control\" id=\"usernameInput\" ng-model=\"email\"\n" +
    "                   name=\"username\" required ng-keydown=\"clearErrors()\">\n" +
    "	    </div>\n" +
    "        <div class=\"error\" ng-show=\"message\" >\n" +
    "            <small class=\"help-inline has-error\">\n" +
    "                <span class=\"error\">{{ message | translate }}</span>\n" +
    "            </small>\n" +
    "        </div>\n" +
    "	  <button ng-click=\"requestPasswordReset(email)\" type=\"submit\" class=\"btn btn-primary btn-lg btn-block\" ng-disabled=\"resetPwForm.$invalid\">\n" +
    "          {{'RESET_PASSWORD' | translate}}</button>\n" +
    "	</form>\n" +
    "</section>\n"
  );


  $templateCache.put('js/app/auth/templates/password-reset.html',
    "<section>\n" +
    "    <div class=\"row\">\n" +
    "        <div class=\"col-sm-push-3 col-sm-5\">\n" +
    "            <div class=\"page-header\">\n" +
    "                <h1>{{'RESET_PW_TITLE' | translate}}</h1>\n" +
    "            </div>\n" +
    "            <form name=\"changePwForm\" novalidate>\n" +
    "                <div class=\"form-group input-group\"\n" +
    "                     ng-class=\"{'has-error': changePwForm.password.$touched && changePwForm.password.$invalid &&  changePwForm.password.$dirty}\">\n" +
    "\n" +
    "                    <span class=\"input-group-addon\">\n" +
    "                        <label class=\"control-label\" for=\"passwordInput\">\n" +
    "                            {{'NEW_PASSWORD' | translate}}\n" +
    "                        </label>\n" +
    "                    </span>\n" +
    "                    <input builder-input=\"password\" type=\"password\" class=\"form-control\" id=\"passwordInput\" name=\"password\" placeholder=\"{{'PASSWORD_MINCHAR'| translate}}\"\n" +
    "                           ng-model=\"password\" required min=\"6\" ng-minlength=\"6\">\n" +
    "                </div>\n" +
    "                <div class=\"text-danger list-unstyled\" ng-show=\"changePwForm.password.$touched && changePwForm.password.$invalid && changePwForm.password.$dirty\">\n" +
    "                    <small class=\"help-inline has-error\">\n" +
    "                        <span class=\"error\">{{'PASSWORD_REQUIRED' | translate}}</span>\n" +
    "                    </small>\n" +
    "                </div>\n" +
    "\n" +
    "                <div class=\"form-group input-group\"\n" +
    "                     ng-class=\"{'has-error': changePwForm.confirmPassword.$touched && changePwForm.confirmPassword.$invalid &&  changePwForm.confirmPassword.$dirty}\">\n" +
    "\n" +
    "                    <span class=\"input-group-addon\">\n" +
    "                        <label class=\"control-label\" for=\"passwordInputRepeat\">\n" +
    "                            {{'CONFIRM_NEW_PASSWORD' | translate}}\n" +
    "                        </label>\n" +
    "                    </span>\n" +
    "                    <input builder-input=\"password\" type=\"password\" class=\"form-control\" id=\"passwordInputRepeat\" name=\"confirmPassword\"\n" +
    "                           ng-model=\"passwordRepeat\" confirm-input=\"passwordInput\" required>\n" +
    "                </div>\n" +
    "                <div class=\"text-danger list-unstyled\" ng-show=\"changePwForm.confirmPassword.$touched && changePwForm.confirmPassword.$invalid && changePwForm.confirmPassword.$dirty\">\n" +
    "                    <small class=\"help-inline has-error\">\n" +
    "                        {{'PASSWORDS_MUST_MATCH' | translate}}\n" +
    "                    </small>\n" +
    "                </div>\n" +
    "\n" +
    "\n" +
    "                <div class=\"text-danger list-unstyled\" ng-show=\"error.message\">\n" +
    "\n" +
    "                    <small class=\"help-inline has-error\">\n" +
    "                        {{ error.message | translate}}  {{error.details || ''}}\n" +
    "                    </small>\n" +
    "                </div>\n" +
    "                <button ng-click=\"showAllErrors() && changePwForm.$valid && changePassword(token, password)\" type=\"submit\"\n" +
    "                        class=\"btn btn-primary btn-lg btn-block\" ng-disabled=\"submitDisabled || changePwForm.$invalid\">\n" +
    "                    {{'RESET_PASSWORD' | translate }}\n" +
    "                </button>\n" +
    "                <br>\n" +
    "                <a ng-show=\"showRetryLink\" ng-click=\"showRequestPasswordReset()\" class=\"forgot-password-btn\">{{'RESET_PW_REPEAT' | translate }}</a>\n" +
    "            </form>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</section>\n" +
    "\n" +
    "\n"
  );


  $templateCache.put('js/app/auth/templates/password-update.html',
    "<!-- Modal -->\n" +
    "<form name=\"passwordUpdateForm\" novalidate>\n" +
    "    <div class=\"modal-header\">\n" +
    "        <a class=\"close\" ng-click=\"close()\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></a>\n" +
    "        <h4 class=\"modal-title\" id=\"myModalLabel\">{{'UPDATE_PASSWORD' | translate}}</h4>\n" +
    "    </div>\n" +
    "    <div class=\"modal-body\" stop-event=\"touchend\">\n" +
    "        <!-- Errors -->\n" +
    "        <ul ng-if=\"errors && errors.length\" class=\"list-unstyled text-danger\">\n" +
    "            <li ng-repeat=\"error in errors\">{{error.message | translate}}</li>\n" +
    "        </ul>\n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <span class=\"input-group-addon\"><label class=\"control-label\" for=\"currentPassword\">{{'CURRENT_PASSWORD' | translate}}</label></span>\n" +
    "            <input builder-input=\"password\" type=\"password\" class=\"form-control ui-autocomplete\" id=\"currentPassword\" name=\"currentPassword\"\n" +
    "                   ng-model=\"passwordModel.currentPassword\" />\n" +
    "        </div>\n" +
    "        \n" +
    "        \n" +
    "        <ul class=\"list-unstyled text-danger\" ng-show=\"passwordUpdateForm.newPassword.$touched &&  passwordUpdateForm.newPassword.$invalid && passwordUpdateForm.newPassword.$dirty\">\n" +
    "            <li ng-if=\"!passwordModel.newPassword || passwordModel.newPassword == ''\" class=\"has-error\">\n" +
    "                {{'FIELD_REQUIRED' | translate}}\n" +
    "            </li>\n" +
    "            <li ng-if=\"!passwordModel.newPassword || passwordModel.newPassword.length < 6\" class=\"has-error\">\n" +
    "                {{'PASSWORD_TOO_SHORT' | translate}}\n" +
    "            </li>\n" +
    "        </ul>\n" +
    "        <div class=\"form-group input-group\"\n" +
    "             ng-class=\"{'has-error': passwordUpdateForm.newPassword.$touched &&  passwordUpdateForm.newPassword.$invalid && passwordUpdateForm.newPassword.$dirty}\">\n" +
    "            <span class=\"input-group-addon\"><label class=\"control-label\" for=\"newPassword\">{{'NEW_PASSWORD' | translate}}</label></span>\n" +
    "            <input builder-input=\"password\" type=\"password\" class=\"form-control ui-autocomplete\" id=\"newPassword\" name=\"newPassword\"\n" +
    "                   ng-model=\"passwordModel.newPassword\" required ng-minlength=\"6\"\n" +
    "                   placeholder=\"{{'PASSWORD_MINCHAR'| translate}}\" />\n" +
    "        </div>\n" +
    "\n" +
    "\n" +
    "        <ul class=\"list-unstyled text-danger\" ng-show=\"(passwordUpdateForm.confirmNewPassword.$touched  && passwordModel.newPassword != passwordModel.confirmNewPassword) ||\n" +
    "             (passwordUpdateForm.confirmNewPassword.$touched && passwordUpdateForm.confirmNewPassword.$invalid && passwordUpdateForm.confirmNewPassword.$dirty)\">\n" +
    "            <li ng-if=\"passwordModel.newPassword != passwordModel.confirmNewPassword\" class=\"has-error\"> {{'PASSWORDS_NO_MATCH' | translate}}</li>\n" +
    "            <li ng-if=\"passwordModel.confirmNewPassword || passwordModel.confirmNewPassword.length < 6\" class=\"has-error\">{{'PASSWORD_TOO_SHORT' | translate}}</li>\n" +
    "        </ul>\n" +
    "        <div class=\"form-group input-group\"\n" +
    "             ng-class=\"{'has-error': passwordUpdateForm.confirmNewPassword.$touched && passwordUpdateForm.confirmNewPassword.$invalid && passwordUpdateForm.confirmNewPassword.$dirty}\">\n" +
    "            <span class=\"input-group-addon\"><label class=\"control-label\" for=\"confirmNewPassword\">{{'CONFIRM_NEW_PASSWORD' | translate}}</label></span>\n" +
    "            <input builder-input=\"password\" type=\"password\" class=\"form-control ui-autocomplete\" id=\"confirmNewPassword\" name=\"confirmNewPassword\" ng-model=\"passwordModel.confirmNewPassword\" required ng-minlength=\"6\" />\n" +
    "        </div>\n" +
    "\n" +
    "      \n" +
    "    </div>\n" +
    "    <div class=\"modal-footer\">\n" +
    "        <button type=\"submit\" ng-click=\"updatePassword(passwordModel.currentPassword, passwordModel.newPassword)\" id=\"update-password-btn\"\n" +
    "                class=\"btn btn-warning btn-lg btn-block\" ng-disabled=\"passwordUpdateForm.$invalid || submitDisabled || passwordModel.newPassword != passwordModel.confirmNewPassword\">\n" +
    "            {{'SAVE'|translate}}\n" +
    "        </button>\n" +
    "    </div>\n" +
    "</form>"
  );


  $templateCache.put('js/app/auth/templates/pw-change-success.html',
    "<section>\n" +
    "\n" +
    "	<div class=\"page-header\">\n" +
    "	<h2>{{'PW_SUCCESS' | translate}}</h2>\n" +
    "	<p>{{'PW_CHANGED_MSG' | translate}}</p>\n" +
    "	</div>\n" +
    "\n" +
    "</section>\n"
  );


  $templateCache.put('js/app/auth/templates/signin.html',
    "<!-- signin form -->\n" +
    "<form name=\"singinForm\" ng-submit=\"signin(user.signin, singinForm)\">\n" +
    "    \n" +
    "    <!-- email address -->\n" +
    "    <div class=\"form-group input-group\" ng-class=\"{ 'has-error': singinForm.username.$invalid && singinForm.username.$dirty }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"usernameInput\">{{'EMAIL' | translate}}</label>\n" +
    "        <input builder-input=\"email\" type=\"email\" class=\"form-control\" id=\"usernameInput\" name=\"username\"\n" +
    "               ng-model=\"user.signin.email\" required ng-focus=\"clearErrors()\">\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- password -->\n" +
    "    <div class=\"form-group input-group\" ng-class=\"{ 'has-error': singinForm.password.$invalid && singinForm.password.$dirty }\">\n" +
    "        <label class=\"input-group-addon control-label\" for=\"passwordInput\">{{'PASSWORD' | translate}}</label>\n" +
    "        <input builder-input=\"password\" type=\"password\" class=\"form-control\" id=\"passwordInput\" name=\"password\"\n" +
    "               ng-model=\"user.signin.password\" required ng-focus=\"clearErrors()\">\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- error message -->\n" +
    "    <ul ng-if=\"errors && errors.signin.length\" class=\"list-unstyled text-danger\">\n" +
    "        <li ng-repeat=\"error in errors.signin\">{{error.message | translate}}</li>\n" +
    "    </ul>\n" +
    "\n" +
    "    <!-- sign in button -->\n" +
    "    <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block\" id=\"sign-in-button\" ng-disabled=\"!cookiesEnabled\">{{'SIGN_IN' | translate}}</button>\n" +
    "    <a ng-click=\"showResetPassword()\" class=\"forgot-password-btn pull-right\">{{'FORGOT_PASSWORD' | translate }}</a>\n" +
    "\n" +
    "    <!-- clear row -->\n" +
    "    <div class=\"clr\"><!-- --></div>\n" +
    "\n" +
    "</form>\n"
  );


  $templateCache.put('js/app/auth/templates/signup.html',
    "<form name=\"singupForm\" ng-submit=\"signup(user.signup, singupForm)\">\n" +
    "  <div class=\"form-group input-group\">\n" +
    "    <label class=\"input-group-addon control-label\" for=\"emailInput\">{{'EMAIL' | translate}}</label>\n" +
    "      <input builder-input=\"email\" type=\"email\" class=\"form-control\" id=\"emailInput\" name=\"email\"\n" +
    "             ng-model=\"user.signup.email\" required ng-focus=\"clearErrors()\">\n" +
    "  </div>\n" +
    "  <div class=\"form-group input-group\">\n" +
    "    <label class=\"input-group-addon control-label\" for=\"newPasswordInput\">{{'PASSWORD' | translate}}</label>\n" +
    "      <input builder-input=\"password\" type=\"password\" class=\"form-control\" id=\"newPasswordInput\" placeholder=\"{{'PASSWORD_MINCHAR'| translate}}\" name=\"password\"\n" +
    "             ng-model=\"user.signup.password\" required ng-focus=\"clearErrors()\">\n" +
    "  </div>\n" +
    "  \n" +
    "   <div ng-include class=\"padding-none\" src=\"'js/app/loyalty/templates/signup_for_loyalty_program.html'\"></div>\n" +
    "  \n" +
    "    <ul ng-if=\"errors && errors.signup.length\" class=\"text-danger list-unstyled\">\n" +
    "        <li ng-repeat=\"error in errors.signup\">{{error.message | translate}}</li>\n" +
    "    </ul>\n" +
    "  <button type=\"submit\" id=\"create-acct-btn\" ng-disabled=\"submitDisabled\" class=\"btn btn-primary btn-lg btn-block\">{{'CREATE_ACCOUNT' | translate}}</button>\n" +
    "</form>"
  );


  $templateCache.put('js/app/cart/templates/cart-costs.html',
    "<table class=\"table\">\n" +
    "    <thead>\n" +
    "        <!-- cart header -->\n" +
    "        <tr class=\"cart-header\">\n" +
    "            <th>{{'EST_ORDER_TOTAL' | translate}}</th>\n" +
    "            <th class=\"text-right\">{{cart.totalPrice.amount | currency: currencySymbol}}</th>\n" +
    "        <tr>\n" +
    "    </thead>\n" +
    "    <tbody class=\"cart-cost\">\n" +
    "        <!-- cart costs -->\n" +
    "        <tr>\n" +
    "            <td colspan=\"2\">\n" +
    "                <!-- empty row for padding -->\n" +
    "            </td>\n" +
    "        </tr>\n" +
    "\n" +
    "        <!-- sub total -->\n" +
    "        <tr >\n" +
    "            <td>\n" +
    "                {{'SUBTOTAL' | translate}} ( {{cart.totalUnitsCount || 0}} {{'ITEM' | translate}}{{cart.totalUnitsCount == 1 ? '' :'s'}} )\n" +
    "            </td>\n" +
    "            <td class=\"text-right\">\n" +
    "                {{cart.subTotalPrice.amount | currency: currencySymbol}}\n" +
    "            </td>\n" +
    "        </tr>\n" +
    "        \n" +
    "        <!-- discount -->\n" +
    "        <tr ng-if=\"cart.discounts.length\" >\n" +
    "            <td>{{'DISCOUNT' | translate}}</td>\n" +
    "            <td class=\"text-right\">\n" +
    "                <span class=\"error\">-{{cart.totalDiscount.amount | currency: currencySymbol}}</span>\n" +
    "            </td>\n" +
    "        </tr>\n" +
    "\n" +
    "        <!-- shipping -->\n" +
    "        <tr >\n" +
    "            <td>{{'SHIPPING' | translate}}</td>\n" +
    "            <td class=\"text-right\">{{ cart.shipping.fee.amount | currency: currencySymbol }}</td>\n" +
    "        </tr>\n" +
    "\n" +
    "        <!-- additional shipping -->\n" +
    "        <tr >\n" +
    "            <td class=\"additionalshipinfo\" colspan=\"2\">{{'ADDITIONAL_SHIPPING_OPTIONS' | translate}}</td>\n" +
    "        </tr>\n" +
    "\n" +
    "        <!-- tax estimator -->\n" +
    "        <tr ng-show=\"!!taxType && taxType !== 'FLATRATE'\" >\n" +
    "            <td class=\"estimate-tax-link\" colspan=\"2\">\n" +
    "                <a href=\"\" ng-click=\"showTaxEstimation=!showTaxEstimation\">\n" +
    "                    {{'ESTIMATE_TAX'|translate}}\n" +
    "                    <span ng-show=\"!showTaxEstimation\" class=\"glyphicon glyphicon-chevron-down\" aria-hidden=\"true\"></span>\n" +
    "                    <span ng-show=\"showTaxEstimation\" class=\"glyphicon glyphicon-chevron-up\" aria-hidden=\"true\"></span>\n" +
    "                </a>\n" +
    "\n" +
    "                <!-- tax estimator -->\n" +
    "                <div class=\"row cartTaxConfiguration\" ng-show=\"!!taxType && taxType !== 'FLATRATE' && showTaxEstimation\">\n" +
    "                    <div class=\"col-xs-5\">\n" +
    "                        <input id=\"zipCode\" type=\"text\" class=\"zip-input form-control\" ng-model=\"calculateTax.zipCode\" placeholder=\"Zip/Postal Code\" />\n" +
    "                    </div>\n" +
    "                    <div class=\"col-xs-5 custom-select-container\">\n" +
    "                        <!--<select id=\"country\" class=\"zip-input form-control\" ng-model=\"calculateTax.countryCode\" ng-options=\"countryCodeOption.text for countryCodeOption in countryCodeOptions track by countryCodeOption.value\"></select>-->\n" +
    "                        <!--<p>{{calculateTax.countryCode}}</p>-->\n" +
    "                        <ui-select ng-model=\"calculateTax.countryCode\">\n" +
    "                            <ui-select-match>\n" +
    "                                {{$select.selected.name}}\n" +
    "                            </ui-select-match>\n" +
    "                            <ui-select-choices repeat=\"taxCountry.id as taxCountry in (taxableCountries | filter: $select.search)\">\n" +
    "                                {{taxCountry.name}}\n" +
    "                            </ui-select-choices>\n" +
    "                        </ui-select>\n" +
    "                    </div>\n" +
    "                    <div class=\"col-xs-2\">\n" +
    "                        <button id=\"apply-btn\" class=\"apply-tax btn btn-link\" ng-click=\"applyTax()\">{{'APPLY'|translate}}</button>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "                \n" +
    "                <!-- tax error -->\n" +
    "                <div class=\"row\" ng-show=\"!!taxType && taxType !== 'FLATRATE' && taxEstimationError\">\n" +
    "                    <div class=\"col-xs-12\">\n" +
    "                        {{'ESTIMATE_TAX_ERROR'|translate}}\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "                \n" +
    "                <!-- /tax estimator -->\n" +
    "            </td>\n" +
    "        </tr>\n" +
    "\n" +
    "        <!-- tax display -->\n" +
    "        <tr ng-repeat=\"taxLine in cart.taxAggregate.lines\" ng-show=\"!!taxConfiguration && !taxConfiguration.included && !!cart.totalTax && taxType === 'FLATRATE'\" >\n" +
    "            <td ng-if=\"taxLine.name\">{{taxLine.name}}</td>\n" +
    "            <td ng-if=\"!taxLine.name\">{{'TAX' | translate}}</td>\n" +
    "            <td class=\"text-right\">\n" +
    "                {{taxLine.amount | currency: currencySymbol}}\n" +
    "            </td>\n" +
    "        </tr>\n" +
    "        \n" +
    "\n" +
    "        <tr ng-show=\"calculateTax.taxCalculationApplied && taxType !== 'FLATRATE'\" >\n" +
    "            <td>{{'TAX' | translate}}</td>\n" +
    "            <td class=\"text-right\">\n" +
    "                {{cart.totalTax.amount | currency: currencySymbol}}\n" +
    "            </td>\n" +
    "        </tr>\n" +
    "        <tr>\n" +
    "            <td colspan=\"2\">\n" +
    "                <!-- empty row for padding -->\n" +
    "            </td>\n" +
    "        </tr>\n" +
    "    </tbody>\n" +
    "</table>\n" +
    "        \n" +
    "\n"
  );


  $templateCache.put('js/app/cart/templates/cart.html',
    "<!--\n" +
    "  ~ [y] hybris Platform\n" +
    "  ~\n" +
    "  ~ Copyright (c) 2000-2014 hybris AG\n" +
    "  ~ All rights reserved.\n" +
    "  ~\n" +
    "  ~ This software is the confidential and proprietary information of hybris\n" +
    "  ~ (\"Confidential Information\"). You shall not disclose such Confidential\n" +
    "  ~ Information and shall use it only in accordance with the terms of the\n" +
    "  ~ license agreement you entered into with hybris.\n" +
    "  -->\n" +
    "<div cart-auto-toggle class=\"cartContainer\" ng-mouseenter=\"cartHover()\" ng-mouseleave=\"cartUnHover()\">\n" +
    "\n" +
    "    <!-- shop or checkout -->\n" +
    "    <div class=\"btn-group btn-group-justified\">\n" +
    "\n" +
    "        <!-- continue shopping button -->\n" +
    "        <div class=\"btn-group continue\">\n" +
    "            <button id=\"continue-shopping\" ng-click=\"toggleCart()\" class=\"btn  btn-default continue\">\n" +
    "                <span class=\"hyicon hyicon-chevron-thin-left\"></span>\n" +
    "                <span class=\"hidden-xs\">{{'CONTINUE_SHOPPING' | translate}}</span>\n" +
    "                <span class=\"hidden-sm hidden-md hidden-lg\">{{'SHOP' | translate}}</span>\n" +
    "            </button>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- checkout button -->\n" +
    "        <div class=\"btn-group checkout\">\n" +
    "            <button ng-if=\"cart.items.length\" ng-click=\"toCheckoutDetails()\" class=\"btn  btn-primary \">{{'CHECKOUT' | translate}} <span class=\"hyicon hyicon-chevron-thin-right\"></span>\n" +
    "            </button>\n" +
    "            <button ng-if=\"!cart.items.length\" ng-class=\"{ disabled: !cart.items.length }\" class=\"btn\">{{'CHECKOUT' | translate}}\n" +
    "            </button>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- empty cart message -->\n" +
    "    <div ng-if=\"!cart.error && !cart.items.length\" class=\"empty-cart-text text-center\">\n" +
    "        {{'CART_EMPTY' | translate}}\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- cart unavialable message  -->\n" +
    "    <div ng-if=\"cart.error\" class=\"error text-center\">\n" +
    "        {{'CART_UNAVAILABLE' | translate}}\n" +
    "    </div>\n" +
    "\n" +
    "    <div ng-if=\"cart.items.length\">\n" +
    "\n" +
    "        <section class=\"summary\">\n" +
    "\n" +
    "            <!-- cart cost -->\n" +
    "            <div ng-include=\"'js/app/cart/templates/cart-costs.html'\"></div>\n" +
    "\n" +
    "            <!-- Apply Coupon -->\n" +
    "            <div ng-include=\"'js/app/coupons/templates/coupon-apply.html'\" ng-controller=\"CouponCtrl\" class=\"couponWrapper\"></div>\n" +
    "\n" +
    "      <section class=\"reward-points-earned\" >\n" +
    "        <div class=\"reward-on-cart\" ng-include src=\"'js/app/loyalty/templates/cart_details.html'\"></div>  \n" +
    "        </section>\n" +
    "\n" +
    "        <section>\n" +
    "\n" +
    "            <!-- Cart Item -->\n" +
    "            <div \n" +
    "            ng-repeat=\"item in cart.items\"\n" +
    "            ng-controller=\"CartNoteMixinCtrl\">\n" +
    "\n" +
    "                <!-- error message -->\n" +
    "                <div ng-if=\"item.error\" class=\"error col-xs-12 col-md-12\">\n" +
    "                    <span class=\"error\">{{'CART_ITEM_UPDATE_ERROR' | translate}}</span>\n" +
    "                </div>\n" +
    "\n" +
    "                <div class=\"cart-item row\">\n" +
    "\n" +
    "                    <!-- product img -->\n" +
    "                    <div class=\"col-xs-3 col-md-4 text-center img-col\">\n" +
    "                        <img ng-src=\"{{ item && item.product.images[0].url || ''}}\" class=\"img-responsive\" />\n" +
    "                    </div>\n" +
    "\n" +
    "\n" +
    "                    <div class=\"col-xs-8 col-md-8  detail-col\">\n" +
    "                        <div class=\"row\">\n" +
    "                            <div class=\"col-xs-10\">\n" +
    "\n" +
    "                                <!-- product name -->\n" +
    "                                <div class=\"name\">{{item.product.name}}</div>\n" +
    "\n" +
    "                                <!-- product price -->\n" +
    "                                <div class=\"price item-attr\">\n" +
    "                                    {{'ITEM_PRICE' | translate}}: <span> {{item.price.effectiveAmount | currency: currencySymbol}}</span>\n" +
    "                                </div>\n" +
    "\n" +
    "                                <!-- product quantity -->\n" +
    "                                <div class=\"clearfix\">\n" +
    "                                    <div class=\"input-group pull-left\" ng-class=\"{error: item.error}\">\n" +
    "                                        <label class=\"input-group-addon\" for=\"qtyCart\">{{'QTY' | translate}}:</label>\n" +
    "                                        <form ng-submit=\"updateCartItemQty(item, item.quantity,{opencartAfterEdit: false})\">\n" +
    "                                            <input quantity-input type=\"number\" min=\"0\" step=\"1\" pattern=\"\\d*\" class=\"form-control\" id=\"qtyCart\" ng-model=\"item.quantity\"\n" +
    "                                            ng-blur=\"updateCartItemQty(item, item.quantity,{opencartAfterEdit: false})\" />\n" +
    "                                        </form>\n" +
    "                                    </div>\n" +
    "                                </div>\n" +
    "\n" +
    "                                <!-- total price -->\n" +
    "                                <div class=\"price-total item-attr\">{{'TOTAL_PRICE' | translate}}: <span>{{ item.itemPrice.amount || 0 | currency: currencySymbol}}</span></div>\n" +
    "                                \n" +
    "                                <!-- note display -->\n" +
    "                                <div id=\"noteMixin_area\" class=\"noteMixin\"> \n" +
    "                                    \n" +
    "                                    <!-- display the note -->\n" +
    "                                    <div class=\"note-display\">\n" +
    "                                        {{item.mixins.note.comment}}\n" +
    "                                    </div>\n" +
    "                                    \n" +
    "                                    <!-- note edit button -->\n" +
    "                                    <a id=\"addEditNote\" ng-show=\"note.noteCollapsed\" ng-click=\"note.expandNote(item.mixins.note.comment)\" class=\"modify-note text-uppercase\" href=\"#\">{{item.mixins.note.comment ? (\"EDIT_NOTE\" | translate) : (\"ADD_NOTE\" | translate)}}</a>\n" +
    "                                    \n" +
    "                                    <!-- note delete button -->\n" +
    "                                    <span ng-if=\"item.mixins.note.comment\" ng-show=\"note.noteCollapsed\">\n" +
    "                                        &nbsp; | &nbsp;\n" +
    "                                        <a href=\"#\"  ng-click=\"note.removeNote(item)\" title=\"Delete Note\" class=\"modify-note text-uppercase\">{{'DELETE_NOTE' | translate}}</a>\n" +
    "                                    </span>\n" +
    "                                    \n" +
    "                                </div>\n" +
    "\n" +
    "                            </div>\n" +
    "\n" +
    "                            <!-- delete button -->\n" +
    "                            <div class=\"col-xs-2 text-right\">\n" +
    "                                <button id=\"remove-product\" ng-click=\"removeProductFromCart(item.id)\" class=\"btn btn-link removeCartItem\"><span class=\"hyicon hyicon-remove\"></span></button>\n" +
    "                            </div>\n" +
    "                            \n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "\n" +
    "                    <div class=\"clearfix\"></div>\n" +
    "\n" +
    "                    <!-- Note Mixin -->\n" +
    "                    <div ng-show=\"!note.noteCollapsed\" class=\"cart-item-note\">\n" +
    "                        <div class=\"col-md-12\">\n" +
    "                            <form ng-submit=\"note.submit(item)\">\n" +
    "\n" +
    "                                <label>{{'NOTE' | translate}}</label>\n" +
    "\n" +
    "                                <textarea id=\"cartItemNote\" ng-model=\"note.content\" class=\"form-control\" rows=\"3\"></textarea>\n" +
    "\n" +
    "                                <p class=\"error\" ng-show=\"note.saveFailed\">{{'UNABLE_TO_SAVE_NOTE' | translate}}</p>\n" +
    "                                \n" +
    "                                <button ng-if=\"!note.noteCollapsed\" type=\"button\" ng-click=\"note.collapseNote()\" class=\"btn btn-link btn-lg pull-left text-uppercase\" href=\"#\">{{'CANCEL' | translate}}</button>\n" +
    "                                \n" +
    "                                <button id=\"saveCartItemNote\" class=\"btn btn-primary btn-lg pull-right text-uppercase\" type=\"submit\">{{'SAVE' | translate}}</button>\n" +
    "                            </form>\n" +
    "                        </div>\n" +
    "\n" +
    "                        <div class=\"clearfix\"></div>\n" +
    "\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </section>\n" +
    "    </div>\n" +
    "    <!-- /Cart Item -->\n" +
    "</div>\n" +
    "\n"
  );


  $templateCache.put('js/app/checkout/templates/checkout-cart.html',
    "<div class=\"CheckoutCartContainer\">\n" +
    "\n" +
    "    <h2>{{'ORDER_DETAILS' | translate}}\n" +
    "        <!--<span id=\"checkout-cart-btn\"  class=\"glyphicon glyphicon-pencil\"  ng-click=\"showEditCart()\"  ng-if=\"cart.items.length\"></span>-->\n" +
    "    </h2>\n" +
    "    \n" +
    "    <!-- cart items -->\n" +
    "    <section class=\"cartItems\" ng-cloak>\n" +
    "        \n" +
    "        <table class=\"table table-striped cart-items-table\">\n" +
    "\n" +
    "            <!-- desktop view -->\n" +
    "            <tbody class=\"hidden-sm hidden-xs\">\n" +
    "                <tr>\n" +
    "                    <th colspan=\"2\">\n" +
    "                        <div ng-cloak>\n" +
    "                            <span ng-if=\"cart.totalUnitsCount > 1\">{{'TOTAL' | translate}} ({{cart.totalUnitsCount}} {{'ITEMS' | translate}}) </span>\n" +
    "                            <span ng-if=\"cart.totalUnitsCount <= 1\">{{'TOTAL' | translate}} ({{cart.totalUnitsCount}} {{'ITEM' | translate}}) </span>\n" +
    "                            <span>{{cart.totalPrice.amount | currency: currencySymbol}}</span>\n" +
    "                        </div>\n" +
    "                    </th>\n" +
    "                    <th class=\"text-right item-price-col\">{{'ITEM_PRICE' | translate}}:</th>\n" +
    "                    <th class=\"text-center qty-col\">{{'QTY' | translate}}:</th>\n" +
    "                    <th class=\"text-right total-col\">{{'TOTAL_PRICE' | translate}}: </th>\n" +
    "                    <th></th>\n" +
    "                </tr>\n" +
    "\n" +
    "                <tr ng-repeat=\"item in cart.items track by $index\">\n" +
    "                    <td class=\"img-col\">\n" +
    "                        <a ui-sref=\"base.product.detail( {productId: item.product.id} )\">\n" +
    "                            <img ng-src=\"{{ item && item.product.images[0].url || ''}}\" class=\"product-img\" />\n" +
    "                        </a>\n" +
    "                    </td>\n" +
    "                    <td>{{item.product.name}}</td>\n" +
    "                    <td class=\"text-right\">{{item.price.effectiveAmount | currency: currencySymbol}}</td>\n" +
    "                    <td class=\"text-center\">{{ item.quantity }}</td>\n" +
    "                    <td class=\"text-right\"><strong>{{ (item.itemPrice.amount) | currency: currencySymbol}}</strong></td>\n" +
    "                    <td></td>\n" +
    "                </tr>\n" +
    "            </tbody>\n" +
    "\n" +
    "            <!-- mobile view -->\n" +
    "            <tbody class=\"visible-sm visible-xs checkout-item-mobile\">\n" +
    "                <tr ng-repeat=\"item in cart.items track by $index\">\n" +
    "                    <td class=\"img-col\">\n" +
    "                        <a ui-sref=\"base.product.detail( {productId: item.product.id} )\">\n" +
    "                            <img ng-src=\"{{ item && item.product.images[0].url || ''}}\" class=\"product-img img-responsive\" />\n" +
    "                        </a>\n" +
    "                    </td>\n" +
    "                    <td class=\"text-left mobile-cart-item-details\">\n" +
    "                        {{item.product.name}} <br>\n" +
    "                        {{'ITEM_PRICE' | translate}}: {{item.price.effectiveAmount | currency: currencySymbol}} <br>\n" +
    "                        {{'QTY' | translate}}:{{ item.quantity }} <br>\n" +
    "                        <strong>{{'TOTAL_PRICE' | translate}}: {{ (item.itemPrice.amount) | currency: currencySymbol}}</strong>\n" +
    "                    </td>\n" +
    "                </tr>\n" +
    "            </tbody>\n" +
    "\n" +
    "        </table>\n" +
    "\n" +
    "    </section>\n" +
    "\n" +
    "    <section class=\"summary\" ng-cloak>\n" +
    "        <!-- CHECKOUT-CART -->\n" +
    "        <div class=\"col-md-4\">\n" +
    "            <table class=\"table\">\n" +
    "                <tbody>\n" +
    "                    <tr>\n" +
    "                        <td class=\"text-left\">{{'SUBTOTAL' | translate}}</td>\n" +
    "                        <td class=\"text-right\">{{cart.subTotalPrice.amount | currency: currencySymbol}}</td>\n" +
    "                    </tr>\n" +
    "                    <tr ng-if=\"cart.totalDiscount.amount > 0\">\n" +
    "                        <td class=\"text-left\">{{'DISCOUNT' | translate}}</td>\n" +
    "                        <td class=\"text-right\">\n" +
    "                            <span class=\"error\">-{{cart.totalDiscount.amount | currency: currencySymbol}}</span>\n" +
    "                        </td>\n" +
    "                    </tr>\n" +
    "                    <tr>\n" +
    "                        <td class=\"text-left\">{{'SHIPPING' | translate}}</td>\n" +
    "                        <td class=\"text-right\">{{ cart.shipping.fee.amount | currency: currencySymbol }}</td>\n" +
    "                    </tr>\n" +
    "                    <tr ng-repeat=\"taxLine in cart.taxAggregate.lines\" ng-show=\"!!taxConfiguration && !taxConfiguration.included && !!cart.totalTax && taxType === 'FLATRATE'\">\n" +
    "                        <td ng-if=\"taxLine.name\" class=\"text-left\">{{taxLine.name}}</td>\n" +
    "                        <td ng-if=\"!taxLine.name\" class=\"text-left\">{{'TAX' | translate}}</td>\n" +
    "                        <td class=\"text-right\">\n" +
    "                            {{taxLine.amount | currency: currencySymbol}}\n" +
    "                        </td>\n" +
    "                    </tr>\n" +
    "                    <tr ng-show=\"calculateTax.taxCalculationApplied && taxType !== 'FLATRATE'\">\n" +
    "                        <td class=\"text-left\">{{'TAX' | translate}}</td>\n" +
    "                        <td class=\"text-right\">\n" +
    "                            {{cart.totalTax.amount | currency: currencySymbol}}\n" +
    "                        </td>\n" +
    "                    </tr>\n" +
    "                </tbody>\n" +
    "                <tfoot class=\"order-total-details\">\n" +
    "                    <tr>\n" +
    "                        <td class=\"text-left\">{{'ORDER_TOTAL' | translate}}</td>\r" +
    "\n" +
    "                        <!-- <td class=\"text-right\">{{((cart.subTotalPrice.amount-coupon.amounts.discountAmount>0)?cart.subTotalPrice.amount-coupon.amounts.discountAmount : 0) + shippingCost | currency: currencySymbol}}</td> -->\r" +
    "\n" +
    "                        <!-- <td class=\"text-right\">{{cart.totalPrice.amount | currency: currencySymbol}}</td> -->\n" +
    "                        <!-- <td class=\"text-right\" id=\"checkout-loyalty-newAmount\">\n" +
    "                        {{loyaltyAmounts.newAmount-coupon.amounts.discountAmount | currency: currencySymbol}}\n" +
    "                        </td> -->\n" +
    "                        <td class=\"text-right\">{{cart.totalPrice.amount | currency: currencySymbol}}</td>\n" +
    "                    <tr>\n" +
    "                </tfoot>\n" +
    "            </table>\r" +
    "\n" +
    "            <div ng-include src=\"'js/app/loyalty/templates/checkout_cart.html'\"></div>\n" +
    "        </div>\n" +
    "        \n" +
    "    </section>\n" +
    "    <div ui-view=\"editCart\"></div>\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/checkout/templates/checkout-edit-cart.html',
    "<!--\n" +
    "  ~ [y] hybris Platform\n" +
    "  ~\n" +
    "  ~ Copyright (c) 2000-2014 hybris AG\n" +
    "  ~ All rights reserved.\n" +
    "  ~\n" +
    "  ~ This software is the confidential and proprietary information of hybris\n" +
    "  ~ (\"Confidential Information\"). You shall not disclose such Confidential\n" +
    "  ~ Information and shall use it only in accordance with the terms of the\n" +
    "  ~ license agreement you entered into with hybris.\n" +
    "  -->\n" +
    "\n" +
    "<div class=\"edit-cart-backdrop\"></div>\n" +
    "\n" +
    "<div role=\"navigation\" id=\"cart\" class=\"edit-cart\" ng-cloak>\n" +
    "\n" +
    "		<div class=\"btn-group continue\" ng-hide=\"!!cart.items\">\n" +
    "			<button class=\"btn  btn-default continue \" data-ui-sref=\"base.category\">\n" +
    "                <span class=\"hyicon hyicon-chevron-thin-left\"></span>\n" +
    "                <span class=\"hidden-sm hidden-xs\">{{'CONTINUE_SHOPPING' | translate}}</span>\n" +
    "                <span class=\"hidden-md hidden-lg\">{{'SHOP' | translate}}</span>\n" +
    "            </button>\n" +
    "		</div>\n" +
    "		<div class=\"btn-group checkout\" ng-hide=\"!cart.items.length\">\n" +
    "			<button class=\"btn  btn-primary \" ng-click=\"hideEditCart()\" ng-if=\"cart.items.length\"><span class=\"hyicon hyicon-chevron-thin-left\"></span>\n" +
    "                {{'BACK_TO_CHECKOUT' | translate}}\n" +
    "			</button>\n" +
    "		</div>\n" +
    "\n" +
    "	<div  ng-hide=\"!!cart.items\">\n" +
    "		<p class=\"edit-cart-empty\">{{'NO_ITEMS_IN_CART' | translate}}</p>\n" +
    "	</div>\n" +
    "\n" +
    "	<section class=\"summary\" ng-hide=\"!cart.items.length\">\n" +
    "		<table class=\"table\">\n" +
    "			<thead>\n" +
    "			<tr>\n" +
    "				<th>{{'EST_ORDER_TOTAL' | translate}}</th>\n" +
    "				<th class=\"text-right\">{{cart.totalPrice.amount| currency: currencySymbol}}</th>\n" +
    "			<tr>\n" +
    "			</thead>\n" +
    "			<tbody>\n" +
    "				<tr>\n" +
    "		            <td >{{'SUBTOTAL' | translate}} ( {{cart.totalUnitsCount || 0}} {{'ITEM' | translate}}{{cart.totalUnitsCount == 1 ? '' :'s'}} )\n" +
    "		            </td>\n" +
    "		            <td class=\"text-right\">\n" +
    "		                {{cart.subTotalPrice.amount | currency: currencySymbol}}\n" +
    "		            </td>\n" +
    "                </tr>\n" +
    "                <tr ng-if=\"cart.totalDiscount.amount && cart.totalDiscount.amount != 0\">\n" +
    "                    <td>{{'DISCOUNT' | translate}}</td>\n" +
    "		            <td class=\"text-right\" style=\"color:red\">\n" +
    "		                -{{cart.totalDiscount.amount | currency: currencySymbol}}\n" +
    "		            </td>\n" +
    "                </tr>\n" +
    "            	<tr>\n" +
    "                    <td>{{'SHIPPING' | translate}}</td>\n" +
    "                    <td class=\"text-right\">\n" +
    "                        {{cart.shippingCost.amount | currency: currencySymbol}}\n" +
    "                    </td>\n" +
    "                </tr>\n" +
    "                <tr ng-repeat=\"taxLine in cart.taxAggregate.lines\" ng-show=\"!!taxConfiguration && !taxConfiguration.included && !!cart.totalTax && taxType === 'FLATRATE'\">\n" +
    "                    <td ng-if=\"taxLine.name\">{{taxLine.name}}</td>\n" +
    "                    <td ng-if=\"!taxLine.name\">{{'TAX' | translate}}</td>\n" +
    "                    <td class=\"text-right\">\n" +
    "                        {{taxLine.amount | currency: currencySymbol}}\n" +
    "                    </td>\n" +
    "                </tr>\n" +
    "                <tr ng-show=\"calculateTax.taxCalculationApplied && taxType !== 'FLATRATE'\">\n" +
    "                    <td>{{'TAX' | translate}}</td>\n" +
    "                    <td class=\"text-right\">\n" +
    "                        {{cart.totalTax.amount | currency: currencySymbol}}\n" +
    "                    </td>\n" +
    "                </tr>\n" +
    "			</tbody>\n" +
    "\n" +
    "		</table>\n" +
    "	</section>\n" +
    "	<section>\n" +
    "				<!-- Cart Item -->\n" +
    "	<div ng-repeat=\"item in cart.items\">\n" +
    "		<div ng-if=\"item.error\" class=\"error col-xs-12 col-md-12\" >\n" +
    "			<span class=\"error\">{{'CART_ITEM_UPDATE_ERROR' | translate}}</span>\n" +
    "		</div>\n" +
    "		<div class=\"cart-item row\">\n" +
    "			<div class=\"col-xs-4 col-md-4 text-center img-col\">\n" +
    "				<img ng-src=\"{{ item && item.product.images[0].url || ''}}\" class=\"img-responsive\"/>\n" +
    "                <button ng-click=\"removeProductFromCart(item.id)\" class=\"btn delete btn-link hidden-lg hidden-md\"><span class=\"hyicon hyicon-remove\"></span></button>\n" +
    "            </div>\n" +
    "			<div class=\"col-xs-8 col-md-8  detail-col\">\n" +
    "				<button id=\"remove-product\" ng-click=\"removeProductFromCart(item.id)\" class=\"btn delete btn-link pull-right hidden-xs  hidden-sm\"><span class=\"hyicon hyicon-remove\"></span></button>\n" +
    "				<div class=\"name\">{{item.product.name}}</div>\n" +
    "				<div class=\"price item-attr\">{{'ITEM_PRICE' | translate}}: <span> {{item.price.effectiveAmount | currency: currencySymbol}}</span> </div>\n" +
    "				<div class=\"clearfix\">\n" +
    "					<div class=\"input-group pull-left\" ng-class=\"{error: item.error}\">\n" +
    "						<span class=\"input-group-addon\">{{'QTY' | translate}}:</span>\n" +
    "                        <input type=\"number\" quantity-input ng-blur=\"(!item.quantity || item.quantity === 0) &amp;&amp; removeProductFromCart(item.id)\" ng-change=\"item.quantity &gt; 0 &amp;&amp; updateCartItemQty(item, item.quantity, {closeCartAfterTimeout: false, opencartAfterEdit: false })\" ng-model=\"item.quantity\" class=\"form-control\" pattern=\"\\d*\" step=\"1\" min=\"0\">\n" +
    "					</div>\n" +
    "				</div>\n" +
    "				<div class=\"price-total item-attr\">{{'TOTAL_PRICE' | translate}}: <span>{{ item.itemPrice.amount || 0 | currency: currencySymbol}}</span></div>\n" +
    "			</div>\n" +
    "		</div>\n" +
    "	</div>\n" +
    "	<!-- /Cart Item -->\n" +
    "	</section>\n" +
    "</div>"
  );


  $templateCache.put('js/app/checkout/templates/checkout-form.html',
    "<h1>\n" +
    "<small class=\"visible-lg visible-md\">{{'SIMPLE_3_STEP_CHECKOUT' | translate}}</small>\n" +
    "<small class=\"visible-xs visible-sm\">{{'SIMPLE_4_STEP_CHECKOUT' | translate}}</small>\n" +
    "{{'SECURE_CHECKOUT' | translate}} \n" +
    "</h1>\n" +
    "<ng-form name=\"checkoutForm\" mobile-checkout-wizard novalidate autocomplete=\"on\">\n" +
    "<ng-form name=\"shipToForm\" novalidate autocomplete=\"on\" ng-cloak>\n" +
    "<div class=\"step step-1\" ng-class=\"{'done': wiz.step1Done}\">\n" +
    "    <h2> {{'STEP_1_MY_DETAILS' | translate}} <span ng-show=\"wiz.step1Done\" class=\"glyphicon glyphicon-pencil\"\n" +
    "    ng-click=\"editBillTo()\"></span></h2>\n" +
    "\n" +
    "    <div class=\"row step-detail\">\n" +
    "        <div class=\"col-lg-6 custom-select-container checkout-selector\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                 ng-class=\"{'has-error': billToForm.titleAccount.$invalid && ( billToForm.titleAccount.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"titleAccount\">{{'TITLE' | translate}}</label>\n" +
    "                <ui-select ng-model=\"order.account.title\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"title in titles | filter: $select.search\">\n" +
    "                        {{title}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "           </div>\n" +
    "        </div>\n" +
    "        <div class=\"col-lg-6 col\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.firstNameAccount.$invalid && (shipToForm.firstNameAccount.$dirty  || showPristineErrors)}\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"firstNameAccount\">{{'FIRST_NAME' | translate}}</label>\n" +
    "                <input ng-change=\"updateAddressName()\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" \n" +
    "                       type=\"text\" class=\"form-control ui-autocomplete\" id=\"firstNameAccount\" name=\"firstNameAccount\"\n" +
    "                ng-model=\"order.account.firstName\" required autocomplete=\"on\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"col-lg-6 col\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                 ng-class=\"{'has-error': shipToForm.middleNameAccount.$invalid && (shipToForm.middleNameAccount.$dirty  || showPristineErrors)}\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"middleNameAccount\">{{'MIDDLE_NAME' | translate}}</label>\n" +
    "                <input ng-change=\"updateAddressName()\" type=\"text\" class=\"form-control ui-autocomplete\" id=\"middleNameAccount\" name=\"middleNameAccount\"\n" +
    "                       ng-model=\"order.account.middleName\" autocomplete=\"on\" placeholder=\"(Optional)\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"col-lg-6\">\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{'has-error': shipToForm.lastNameAccount.$invalid && (shipToForm.lastNameAccount.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"lastNameAccount\">{{'LAST_NAME' | translate}}</label>\n" +
    "                <input ng-change=\"updateAddressName()\" type=\"text\" inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                        class=\"form-control\" id=\"lastNameAccount\" name=\"lastNameAccount\" ng-model=\"order.account.lastName\"\n" +
    "                required autocomplete=\"on\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"col-lg-12\">\n" +
    "            <div class=\"error\" ng-show=\"!shipToForm.email.focused && shipToForm.email.$invalid && shipToForm.email.$dirty\" style=\"color:red\">\n" +
    "                <small class=\"help-inline has-error\">\n" +
    "                <span class=\"error\">{{'PLEASE_ENTER_VALID_EMAIL' | translate}}</span>\n" +
    "                </small>\n" +
    "            </div>\n" +
    "            <div class=\"form-group input-group\"\n" +
    "                ng-class=\"{ 'has-error': !shipToForm.email.focused && shipToForm.email.$invalid &&  ( shipToForm.email.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"email\">{{'EMAIL' | translate}}</label>\n" +
    "                <input type=\"email\" builder-input=\"email\"\n" +
    "                    class=\"form-control\" id=\"email\"\n" +
    "                       name=\"email\" ng-model=\"order.account.email\"\n" +
    "                       required autocomplete=\"on\"\n" +
    "                       ng-focus=\"shipToForm.email.focused=true\"\n" +
    "                       ng-blur=\"shipToForm.email.focused=false\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- section heading -->\n" +
    "        <div class=\"col-md-12\">\n" +
    "            <span class=\"form-block-headline\">{{'SHIPPING_ADDRESS' | translate}}</span>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- select from address book -->\n" +
    "        <div class=\"col-lg-12\" ng-if=\"user.isAuthenticated && (addresses.length > 1)\">\n" +
    "            <div class=\"form-group\">\n" +
    "                <button class=\"btn btn-default btn-lg btn-block\" id=\"select-address-btn-1\" ng-click=\"openAddressDialog(order.shipTo)\">{{'SELECT_FROM_ADDRESS_BOOK' | translate}}</button>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- clear the row -->\n" +
    "        <div class=\"clearfix\"></div>\n" +
    "        \n" +
    "        <localized-addresses type=\"shipping\"></localized-addresses>\n" +
    "        <div class=\"col-lg-12\">\n" +
    "            <button class=\"btn btn-primary btn-lg btn-block visible-sm visible-xs\"\n" +
    "            ng-click=\"shipToDone(shipToForm.$valid, shipToForm.$name, shipToForm.country.$viewValue.id)\">{{'CONTINUE' | translate}} <span\n" +
    "            class=\"hyicon hyicon-chevron-thin-right\"></span></button>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>\n" +
    "</ng-form>\n" +
    "<ng-form name=\"billToForm\" novalidate autocomplete=\"on\" ng-cloak>\n" +
    "<div class=\"step step-2\" ng-class=\"{'disabled' : !wiz.step1Done, 'done': wiz.step2Done}\">\n" +
    "    <a id=\"step2\">\n" +
    "        <h2> {{'STEP_2_BILLING_INFORMATION' | translate}} <span ng-show=\"wiz.step2Done\" class=\"glyphicon glyphicon-pencil\" ng-click=\"editShipTo()\"></span></h2>\n" +
    "    </a>\n" +
    "    <div class=\"row step-detail\">\n" +
    "        <div class=\"col-lg-12\">\n" +
    "            <span class=\"form-block-headline\">{{'BILLING_ADDRESS' | translate}}</span>\n" +
    "        </div>\n" +
    "        <div class=\"col-lg-12\" ng-if=\"user.isAuthenticated && (addresses.length > 1)\">\n" +
    "            <div class=\"form-group\">\n" +
    "                <button class=\"btn btn-default btn-lg btn-block\" id=\"select-address-btn-2\" ng-click=\"openAddressDialog(order.billTo, 'billing')\">{{'SELECT_FROM_ADDRESS_BOOK' | translate}}</button>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"col-lg-12\">\n" +
    "            <div class=\"checkbox\">\n" +
    "                <label>\n" +
    "                    <input type=\"checkbox\" id=\"shipTo\" ng-model=\"shipToSameAsBillTo\" ng-change=\"toggleBillToSameAsShipTo()\">\n" +
    "                    <span class=\"option\">{{'SAME_AS_SHIPPING_ADDRESS' | translate}}</span>\n" +
    "                    <span class=\"adress\" ng-show=\"shipToSameAsBillTo\">{{ order.shipTo.address1 }}</span>\n" +
    "                </label>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        \n" +
    "        <localized-addresses type=\"billing\"></localized-addresses>\n" +
    "\n" +
    "        <div class=\"col-lg-12 custom-select-container checkout-selector\" ng-show=\"shippingConfigured\">\n" +
    "            <div class=\"col-lg-12 col-md-12\">\n" +
    "                <span class=\"form-block-headline\">{{'DELIVERY_METHOD' | translate}}</span>\n" +
    "            </div>\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"shipMethod\">{{'METHOD' | translate}}</label>\n" +
    "                <ui-select ng-model=\"$parent.shippingCost\" on-select=\"closeCartOnCheckout()\" ng-disabled=\"!shippingCosts.length\">\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected.name}} - {{'COST' | translate}}: {{$select.selected.fee.amount | currency : currencySymbol}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"cost in (shippingCosts | filter: $select.search) track by cost.id\">\n" +
    "                        {{cost.name}} - {{'COST' | translate}}: {{cost.fee.amount | currency : currencySymbol}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    <div class=\"col-lg-12\">\n" +
    "        <button class=\"btn btn-primary btn-lg btn-block visible-sm visible-xs\" ng-click=\"billToDone(billToForm.$valid, billToForm.$name)\">{{'CONTINUE' | translate}} <span\n" +
    "        class=\"hyicon hyicon-chevron-thin-right\"></span></button>\n" +
    "    </div>\n" +
    "</div>\n" +
    "</div>\n" +
    "</ng-form>\n" +
    "\n" +
    "<div id=\"preview-order\" class=\" hidden-xs hidden-sm\">\n" +
    "    <div class=\"error text-center\" ng-if=\"messagePreviewOrder\" >\n" +
    "        <small class=\"help-inline has-error\">\n" +
    "        <span class=\"error text-center\">{{messagePreviewOrder | translate}}</span>\n" +
    "        </small>\n" +
    "    </div>\n" +
    "    <button class=\"btn btn-primary btn-lg btn-block\"\n" +
    "            id=\"preview-order-btn\" ng-click=\"previewOrderDesktop(shipToForm.$valid, billToForm.$valid)\">{{'PREVIEW_ORDER' | translate}}\n" +
    "    </button>\n" +
    "    <div class=\"col-md-12 col-sm-12 checkout-cart\" ng-show=\"displayCart\" ui-view=\"checkoutcart\"></div>\n" +
    "</div>\n" +
    "\n" +
    "\n" +
    "<ng-form ng-class=\"{'hidden-lg hidden-md': !displayCart}\" name=\"paymentForm\" novalidate autocomplete=\"on\" ng-cloak>\n" +
    "<div class=\"step step-3\" ng-class=\"{'disabled' : !wiz.step2Done, 'done': wiz.step3Done}\">\n" +
    "<a id=\"step3\">\n" +
    "    <h2>{{'STEP_3_PAYMENT' | translate}} <span ng-show=\"wiz.step3Done\" class=\"glyphicon glyphicon-pencil\"\n" +
    "    ng-click=\"editPayment()\"></span></h2>\n" +
    "</a>\n" +
    "<div class=\"row step-detail\">\n" +
    "\n" +
    "    <!-- Apply Coupon -->\n" +
    "    <div class=\"couponWrap\">\n" +
    "        \n" +
    "        <div ng-include=\"'js/app/coupons/templates/coupon-apply.html'\" ng-controller=\"CouponCtrl\"></div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- <div class=\"col-lg-12\">\n" +
    "        <span class=\"form-block-headline\">{{'PAYMENT' | translate}}</span>\n" +
    "    </div> -->\n" +
    "    \n" +
    "<div ng-include src=\"'js/app/loyalty/templates/checkout_redeem_discount.html'\"></div>\n" +
    "\n" +
    "    <div class=\"cc-details\" ng-if=\"!loyalty.isPaid.complete\">\n" +
    "        <div class=\"col-lg-12\">\n" +
    "            <div class=\"form-group input-group\">\n" +
    "                <img src=\"img/creditcard.png\" alt=\"creditcard\"/>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"col-lg-12\">\n" +
    "            <div class=\"error\" ng-show=\"!paymentForm.ccNumber.focused && (paymentForm.ccNumber.msg\n" +
    "                || (paymentForm.ccNumber.$invalid && paymentForm.ccNumber.$dirty))\" >\n" +
    "                <small class=\"help-inline has-error\">\n" +
    "                <span class=\"error\">{{paymentForm.ccNumber.msg ? paymentForm.ccNumber.msg : 'PLEASE_ENTER_VALID_CC' | translate}}</span>\n" +
    "                </small>\n" +
    "            </div>\n" +
    "            <div class=\"form-group input-group\" ng-class=\"{'has-error': !paymentForm.ccNumber.focused &&\n" +
    "                (paymentForm.ccNumber.$invalid && ( paymentForm.ccNumber.$dirty || showPristineErrors)) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"ccNumber\">{{'CREDIT_CARD_NUMBER' | translate}}</label><!-- validate-card-number-->\n" +
    "                <input type=\"text\" class=\"form-control\" name=\"ccNumber\" id=\"ccNumber\"\n" +
    "                       ng-model=\"order.creditCard.number\" inline-error-input validate-card-number ng-required=\"order.paymentMethod === 'creditCard'\"\n" +
    "                inline-error-input-required-message=\"{{'REQUIRED' | translate}}\"\n" +
    "                ng-focus=\"paymentForm.ccNumber.focused=true\"\n" +
    "                ng-blur=\"paymentForm.ccNumber.focused=false\"\n" +
    "                ng-change=\"paymentForm.ccNumber.msg && resetErrorMsg(paymentForm.ccNumber)\"\n" +
    "                >\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"col-lg-12\" ng-if=\"paymentForm.expDateMsg\">\n" +
    "            <div class=\"error\" ng-show=\"paymentForm.expDateMsg\" >\n" +
    "                <small class=\"help-inline has-error\">\n" +
    "                <span class=\"error\">{{paymentForm.expDateMsg}}</span>\n" +
    "                </small>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"col-lg-6 custom-select-container checkout-selector\">\n" +
    "            <div class=\"form-group input-group\" ng-class=\"{'has-error': paymentForm.expMonth.$invalid && ( paymentForm.expMonth.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"expMonth\">{{'MONTH' | translate}}</label>\n" +
    "                <ui-select ng-model=\"order.creditCard.expMonth\" on-select=\"paymentForm.expDateMsg && resetExpDateErrors()\" id=\"expMonth\" name=\"expMonth\" required>\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"month in wiz.months | filter: $select.search\">\n" +
    "                        {{month}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"col-lg-6 custom-select-container checkout-selector\">\n" +
    "            <div class=\"form-group input-group\" ng-class=\"{'has-error': paymentForm.expYear.$invalid && ( paymentForm.expYear.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"expYear\">{{'YEAR' | translate}}</label>\n" +
    "                <ui-select ng-model=\"order.creditCard.expYear\" on-select=\"paymentForm.expDateMsg && resetExpDateErrors()\" id=\"expYear\" name=\"expYear\" required>\n" +
    "                    <ui-select-match>\n" +
    "                        {{$select.selected}}\n" +
    "                    </ui-select-match>\n" +
    "                    <ui-select-choices repeat=\"year in wiz.years | filter: $select.search\">\n" +
    "                        {{year}}\n" +
    "                    </ui-select-choices>\n" +
    "                </ui-select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"col-xs-9\">\n" +
    "            <div class=\"error\" ng-show=\"!paymentForm.cvc.focused && (paymentForm.cvc.msg\n" +
    "                || (paymentForm.cvc.$invalid && paymentForm.cvc.$dirty))\">\n" +
    "                <small class=\"help-inline has-error\">\n" +
    "                <span class=\"error\">{{paymentForm.cvc.msg ? paymentForm.cvc.msg : 'PLEASE_ENTER_VALID_CODE' | translate}}</span>\n" +
    "                </small>\n" +
    "            </div>\n" +
    "            <div class=\"form-group input-group\" ng-class=\"{'has-error': paymentForm.cvc.$invalid\n" +
    "                && !paymentForm.cvc.focused && (paymentForm.cvc.$dirty || showPristineErrors) }\">\n" +
    "                <label class=\"input-group-addon control-label\" for=\"cvc\">{{'CVC_NUMBER' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" name=\"cvc\" id=\"cvc\" ng-required=\"order.paymentMethod === 'creditCard'\"\n" +
    "                       inline-error-input inline-error-input-required-message=\"{{'REQUIRED' | translate}}\" ng-model=\"order.creditCard.cvc\" validate-cvc\n" +
    "                ng-focus=\"paymentForm.cvc.focused=true\" ng-blur=\"paymentForm.cvc.focused=false\"\n" +
    "                ng-change=\"paymentForm.cvc.msg && resetErrorMsg(paymentForm.cvc)\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"col-xs-3\">\n" +
    "            <img src=\"img/cvv.png\" alt=\"\"/>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "    <div class=\"col-xs-12\">\n" +
    "        <button class=\"btn btn-primary btn-lg btn-block visible-sm visible-xs\" ng-click=\"paymentDone(paymentForm.$valid, paymentForm.$name)\" type=\"submit\">{{'CONTINUE' | translate}} <span\n" +
    "        class=\"hyicon hyicon-chevron-thin-right\"></span></button>\n" +
    "    </div>\n" +
    "</div>\n" +
    "</div>\n" +
    "</ng-form>\n" +
    "<div class=\"step step-4 confirm\" ng-class=\"{'disabled' : !wiz.step3Done, 'hidden-lg hidden-md': !displayCart}\" ng-cloak>\n" +
    "<a id=\"step4\">\n" +
    "    <h2 class=\"visible-sm visible-xs\">{{'STEP_4_REVIEW_ORDER' | translate}}</h2>\n" +
    "</a>\n" +
    "<div class=\"error\" ng-if=\"message\" >\n" +
    "    <small class=\"help-inline has-error\">\n" +
    "    <span class=\"error\">{{message | translate}}</span>\n" +
    "    </small>\n" +
    "</div>\n" +
    "\n" +
    "<div class=\"row step-detail\" ng-class=\"{'has-error': message }\">\n" +
    "    <div class=\"hidden-lg hidden-md\" ui-view=\"checkoutcartmobile\"></div>\n" +
    "    <div class=\"col-xs-6 hidden-sm hidden-xs text-left\">\n" +
    "        <span class=\"description\">{{'TOTAL' | translate}}</span>\n" +
    "    </div>\n" +
    "    <div class=\"col-xs-6 text-right hidden-sm hidden-xs\">\n" +
    "        <span class=\"value\">{{cart.totalPrice.amount | currency: currencySymbol}}</span>\n" +
    "    </div>\n" +
    "    <div class=\"col-xs-12\">\n" +
    "        <button class=\"btn btn-primary btn-lg btn-block\" type=\"submit\" id=\"place-order-btn\"\n" +
    "        ng-click=\"placeOrder(checkoutForm.$valid, checkoutForm.$name)\" ng-disabled=\"submitIsDisabled\">{{'PLACE_ORDER' | translate}}\n" +
    "        </button>\n" +
    "    </div>\n" +
    "</div>\n" +
    "</div>\n" +
    "</ng-form>"
  );


  $templateCache.put('js/app/checkout/templates/checkout-frame.html',
    "<div class=\"checkout\">\n" +
    "	<div class=\"row section\">\n" +
    "		<div class=\"col-md-12 col-lg-12 steps checkoutForm\" ui-view=\"checkoutform\"></div>\n" +
    "\n" +
    "        \n" +
    "		<!--<div class=\"col-md-5 col-sm-5 checkout-cart  hidden-md hidden-sm hidden-xs\" ui-view=\"checkoutcart\"></div>-->\n" +
    "\n" +
    "        <!--<div ng-show=\"checkoutCartEditVisible\" class=\"col-md-4 col-sm-4 checkout-cart-edit\" ui-view=\"checkoutcartedit\"></div>-->\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/checkout/templates/order-processing-splash-screen.html',
    "<div class=\"modal-body\" style=\"padding-bottom:100px;\">\n" +
    "    \n" +
    "    <p class=\"text-center\" style=\"text-transform:uppercase;\">{{'ORDER_PENDING' | translate}}</p>\n" +
    "\n" +
    "    <div class=\"spinner\"></div>\n" +
    "\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/confirmation/templates/confirmation.html',
    "<div class=\"confirm\">\n" +
    "    \n" +
    "    <!-- order success -->\n" +
    "    <div class=\"row section success-box\" ng-if=\"accountSuccess\">\n" +
    "        {{'ACCOUNT_SUCCESS' | translate}}\n" +
    "    </div>\n" +
    "    \n" +
    "    <div class=\"row text-center header-block\">\n" +
    "        <div class=\"col-xs-12 col-sm-6 col-sm-offset-3\">\n" +
    "            <h1>\n" +
    "                <span translate=\"THANK_YOU_FOR_YOUR_ORDER\" translate-compile></span>\n" +
    "            </h1>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- order details -->\n" +
    "    <div class=\"text-center order-details\" ng-if=\"entity === 'order'\">\n" +
    "        <div class=\"row\">\n" +
    "            <div class=\"col-xs-12 col-sm-6 col-sm-offset-3\">\n" +
    "\n" +
    "                <h2 ng-if=\"isAuthenticated\" class=\"orderNumber\">{{'ORDER' | translate}} # <a ui-sref=\"base.orderDetail({orderId: orderInfo.orderId})\">{{ orderInfo.orderId }}</a></h2>\n" +
    "                \n" +
    "                <h2 ng-if=\"!isAuthenticated\" class=\"orderNumber\">{{'ORDER' | translate}}# {{ orderInfo.orderId }}</h2>\n" +
    "\n" +
    "                <div translate=\"A_COPY_OF_YOUR_ORDER_DETAILS_HAS_BEEN_SENT_TO\" translate-compile translate-values=\"{emailAddress: '{{confirmationDetails.emailAddress}}'}\" class=\"orderEmailedTo\"></div>\n" +
    "\n" +
    "                <div>\n" +
    "                    <p>{{'THE_SHIPMENT_IS_SCHEDULED_TO_ARRIVE_AT_THE_FOLLOWING_LOCATION' | translate}}:</p>\n" +
    "                    <address>\n" +
    "                        <span ng-cloak>{{confirmationDetails.shippingAddressName}}<br></span>\n" +
    "                        <span ng-if=\"confirmationDetails.shippingAddressCompanyName\" ng-cloak>{{confirmationDetails.shippingAddressCompanyName}}<br></span>\n" +
    "                        <span ng-cloak>{{confirmationDetails.shippingAddressStreetLine1}}</span>\n" +
    "                        <span ng-cloak ng-if=\"confirmationDetails.shippingAddressStreetLine2\">{{confirmationDetails.shippingAddressStreetLine2}}<br></span>\n" +
    "                        <span ng-cloak>{{confirmationDetails.shippingAddressCityStateZip}}</span>\n" +
    "                        <span ng-cloak>{{confirmationDetails.shippingAddressCountry}}<br></span>\n" +
    "                    </address>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- order messaging -->\n" +
    "    <div class=\"text-center order-details\" ng-if=\"entity === 'checkout'\">\n" +
    "        <div class=\"row\">\n" +
    "            <div class=\"col-xs-12 col-sm-6 col-sm-offset-3\">\n" +
    "                <span>{{'YOUR_CHECKOUT_HAS_BEEN_ACCEPTED_ORDER_NOT_CREATED' | translate}}</span>\n" +
    "                <br/>\n" +
    "                <span class=\"orderNumber\">{{ checkoutInfo.checkoutId }}</span>\n" +
    "                <br/>\n" +
    "                <span>{{'YOUR_ORDER_WILL_BE_CREATED' | translate}}</span>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "    \n" +
    "    <!-- create account panel -->\n" +
    "    <div create-account class=\"create-account text-center\" ng-if=\"!isAuthenticated\">\n" +
    "\n" +
    "        <h2 class=\"creatAccountHeader\">Create An Account</h2>\n" +
    "        \n" +
    "        <p class=\"createAccountTagLine\"><span ng-bind-html=\"'ONE_MORE_STEP' | translate\"/></p>\n" +
    "        \n" +
    "        <div class=\"row\">\n" +
    "            <div class=\"col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2\">\n" +
    "                <div id=\"signup\">\n" +
    "                    <form name=\"signupForm\" ng-submit=\"signup(user.signup.password, confirmationDetails.emailAddress, signupForm)\">\n" +
    "        \n" +
    "                        <!-- email address -->\n" +
    "                        <div class=\"form-group input-group\">\n" +
    "                        \n" +
    "                            <span class=\"input-group-addon\">\n" +
    "                                <label class=\"control-label\" for=\"emailInput\">{{'EMAIL' | translate}}</label>\n" +
    "                            </span>\n" +
    "                        \n" +
    "                            <input builder-input=\"email\" type=\"email\" class=\"form-control\" id=\"emailInput\" name=\"email\"\n" +
    "                                   ng-model=\"confirmationDetails.emailAddress\" required ng-focus=\"clearErrors()\">\n" +
    "                        \n" +
    "                        </div>\n" +
    "                        \n" +
    "                        <!-- password -->\n" +
    "                        <div class=\"form-group input-group\">\n" +
    "                            \n" +
    "                            <span class=\"input-group-addon\">\n" +
    "                                <label class=\"control-label\" for=\"newPasswordInput\">{{'PASSWORD' | translate}}</label>\n" +
    "                            </span>\n" +
    "                            \n" +
    "                            <input builder-input=\"password\" type=\"password\" class=\"form-control\" id=\"newPasswordInput\" placeholder=\"{{'PASSWORD_MINCHAR'| translate}}\" name=\"password\"\n" +
    "                               ng-model=\"user.signup.password\" required ng-focus=\"clearErrors()\">\n" +
    "                        \n" +
    "                        </div>\n" +
    "                        <div ng-include src=\"'js/app/loyalty/templates/signup_for_loyalty_program.html'\"></div>\n" +
    "                        <!-- error message -->\n" +
    "                        <ul ng-if=\"errors && errors.signup.length\" class=\"text-danger list-unstyled\">\n" +
    "                            <li ng-repeat=\"error in errors.signup\">{{error.message | translate}}</li>\n" +
    "                        </ul>\n" +
    "        \n" +
    "                        <!-- create account button -->\n" +
    "                        <button type=\"submit\" id=\"create-acct-btn\" class=\"btn btn-primary btn-lg btn-block\">{{'CREATE_ACCOUNT' | translate}}</button>\n" +
    "                            \n" +
    "                    </form>\n" +
    "\n" +
    "                    <div class=\"row\">\n" +
    "                    \n" +
    "                        <!-- social login -->\n" +
    "                        <div ng-if=\"fbAppId || googleClientId\" class=\"socialMediaSigninContainer centered-content\">\n" +
    "                    \n" +
    "                            <!-- fb login -->\n" +
    "                            <div class=\"col-md-6 col-sm-6\">\n" +
    "                                <div ng-if=\"fbAppId\" class=\"fbLogin\" ng-click=\"fbLogin()\">\n" +
    "                                    <div class=\"fbLoginButton\">\n" +
    "                                        <div class=\"fbsignInLabel\">{{'SIGN_IN_WITH_FACEBOOK' | translate}}</div>\n" +
    "                                    </div>\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                        \n" +
    "                            <br class=\"visible-xs\">\n" +
    "        \n" +
    "                            <!-- g+ login -->\n" +
    "                            <div class=\"col-md-6 col-sm-6\">\n" +
    "                                <div ng-if=\"googleClientId\"  class=\"googlePlusLogin \">\n" +
    "                                    <div class=\"googleSignIn\">\n" +
    "                                        <div class=\"googleSignInLabel\">{{'LOG_IN_WITH_GOOGLE_PLUS' | translate}}</div>\n" +
    "                                        <google-plus-signin clientid=\"{{googleClientId}}\" approvalprompt=\"force\"></google-plus-signin>\n" +
    "                                    </div>\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                    \n" +
    "                        </div> \n" +
    "                        \n" +
    "                    </div>\n" +
    "        \n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <div class=\"order-items\" ng-if=\"entity === 'order'\">\n" +
    "\n" +
    "        <!-- only 1 product in the order -->\n" +
    "        <div class=\"row\">\n" +
    "\n" +
    "            <div class=\"item-list col-md-12\">\n" +
    "                <table class=\"table table-responsive\">\n" +
    "                    <tr class=\"hidden-sm hidden-xs\">\n" +
    "                        <th></th>\n" +
    "                        <th></th>\n" +
    "                        <th></th>\n" +
    "                        <th></th>\n" +
    "                        <th class=\"text-right\">{{'ITEM_PRICE' | translate}}</th>\n" +
    "                        <th class=\"text-center\">{{'QTY' | translate}}</th>\n" +
    "                        <th class=\"text-right\">{{'TOTAL_PRICE' | translate}}</th>\n" +
    "                        <th></th>\n" +
    "                    </tr>\n" +
    "\n" +
    "                    <!-- desktop tablet view -->\n" +
    "                    <tr ng-repeat=\"entry in confirmationDetails.entries\" class=\"hidden-sm hidden-xs\">\n" +
    "                        <td class=\"margin-cell\"></td>\n" +
    "                        <td><a ui-sref=\"base.product.detail( {productId: entry.product.id} )\">\n" +
    "                            <img ng-src=\"{{ entry.product.images && entry.product.images[0].url || ''}}\" class=\"\" width=\"90\" />\n" +
    "                        </a></td>\n" +
    "                        <td>{{entry.product.name}}</td>\n" +
    "                        <td>{{entry.product.sku}}</td>\n" +
    "                        <td class=\"text-right\">{{entry.unitPrice | currency: currencySymbol}}</td>\n" +
    "                        <td class=\"text-center\">{{entry.amount}}</td>\n" +
    "                        <td class=\"text-right\"><strong>{{entry.totalPrice |currency: currencySymbol}}</strong></td>\n" +
    "                        <td class=\"margin-cell\"></td>\n" +
    "                    </tr>\n" +
    "\n" +
    "                    <tr class=\"summary-row hidden-sm hidden-xs\">\n" +
    "                        <td colspan=\"5\"></td>\n" +
    "                        <td colspan=\"2\">\n" +
    "                            <table class=\"table\">\n" +
    "                                <tbody>\n" +
    "                                <tr>\n" +
    "                                    <td class=\"text-left\">{{'SUBTOTAL' | translate}}</td>\n" +
    "                                                        \n" +
    "                                    <td class=\"text-right\">{{ confirmationDetails.subTotalPrice | currency: currencySymbol}}</td>\n" +
    "                                </tr>\n" +
    "                                <tr>\n" +
    "                                    <td class=\"text-left\">{{'SHIPPING' | translate}}</td>\n" +
    "                                    <td class=\"text-right\">{{ confirmationDetails.shipping.total.amount | currency: currencySymbol }}</td>\n" +
    "                                </tr>\n" +
    "                                <tr ng-if=\"confirmationDetails.discountAmount != 0\">\n" +
    "                                    <td class=\"text-left\">{{'DISCOUNT' | translate}}</td>\n" +
    "                                    <td class=\"text-right\">\n" +
    "                                        <span class=\"error\">-{{confirmationDetails.discountAmount | currency: currencySymbol}}</span>\n" +
    "                                    </td>\n" +
    "                                </tr>\n" +
    "                                <tr ng-repeat=\"taxLine in confirmationDetails.tax.lines\" ng-show=\"confirmationDetails.tax.lines.length && !confirmationDetails.tax.total.inclusive\">\n" +
    "                                    <td ng-if=\"taxLine.name\">{{taxLine.name}}</td>\n" +
    "                                    <td ng-if=\"!taxLine.name\" class=\"text-left\">{{'TAX' | translate}}</td>\n" +
    "                                    <td class=\"text-right\">\n" +
    "                                        {{taxLine.amount | currency: currencySymbol}}\n" +
    "                                    </td>\n" +
    "                                </tr>\n" +
    "                                </tbody>\n" +
    "                                <tfoot>\n" +
    "                                <tr class=\"order-total\">\n" +
    "                                    <td class=\"text-left\">{{'ORDER_TOTAL' | translate}}</td>\n" +
    "                                    <td class=\"text-right\">{{ confirmationDetails.totalPrice | currency: currencySymbol}}</td>\n" +
    "                                <tr>\n" +
    "                                                        \n" +
    "                                </tfoot>\n" +
    "                            </table>\n" +
    "                        </td>\n" +
    "                        <td class=\"margin-cell\"></td>\n" +
    "                    </tr>\n" +
    "\n" +
    "                    <!-- mobile view -->\n" +
    "                    <tr ng-repeat=\"entry in confirmationDetails.entries\" class=\"visible-sm visible-xs\">\n" +
    "                        <td class=\"text-right\">\n" +
    "                            <a ui-sref=\"base.product.detail( {productId: entry.product.id} )\">\n" +
    "                            <img ng-src=\"{{ entry.product.images && entry.product.images[0].url || ''}}\" class=\"\" width=\"90\" />\n" +
    "                            </a>\n" +
    "                        </td>\n" +
    "                        <td colspan=\"7\" class=\"text-left product-details-mobile\">\n" +
    "                            {{entry.product.name}} <br>\n" +
    "                            {{'SKU' | translate}}: {{entry.product.sku}} <br>\n" +
    "                            {{'ITEM_PRICE' | translate}}: {{entry.unitPrice | currency: currencySymbol}} <br>\n" +
    "                            {{'QTY' | translate}}: {{entry.amount}} <br>\n" +
    "                            <strong>{{'TOTAL_PRICE' | translate}}: {{entry.totalPrice |currency: currencySymbol}}</strong>\n" +
    "                        </td>\n" +
    "                    </tr>\n" +
    "                    <tr class=\"summary-row visible-sm visible-xs\">\n" +
    "                        <td colspan=\"8\">\n" +
    "                            <table class=\"table\">\n" +
    "                                <tbody>\n" +
    "                                <tr>\n" +
    "                                    <td class=\"text-left\">{{'SUBTOTAL' | translate}}</td>\n" +
    "                                                        \n" +
    "                                    <td class=\"text-right\">{{ confirmationDetails.totalPrice - confirmationDetails.shipping.total.amount + confirmationDetails.discountAmount - confirmationDetails.tax.total.amount | currency: currencySymbol}}</td>\n" +
    "                                </tr>\n" +
    "                                <tr>\n" +
    "                                    <td class=\"text-left\">{{'SHIPPING' | translate}}</td>\n" +
    "                                    <td class=\"text-right\">{{ confirmationDetails.shipping.total.amount | currency: currencySymbol }}</td>\n" +
    "                                </tr>\n" +
    "                                <tr ng-if=\"confirmationDetails.discountAmount != 0\">\n" +
    "                                    <td class=\"text-left\">{{'DISCOUNT' | translate}}</td>\n" +
    "                                    <td class=\"text-right\">\n" +
    "                                        <span class=\"error\">-{{confirmationDetails.discountAmount | currency: currencySymbol}}</span>\n" +
    "                                    </td>\n" +
    "                                </tr>\n" +
    "                                <tr ng-repeat=\"taxLine in confirmationDetails.tax.lines\" ng-show=\"confirmationDetails.tax.lines.length && !confirmationDetails.tax.total.inclusive\">\n" +
    "                                    <td ng-if=\"taxLine.name\">{{taxLine.name}}</td>\n" +
    "                                    <td ng-if=\"!taxLine.name\" class=\"text-left\">{{'TAX' | translate}}</td>\n" +
    "                                    <td class=\"text-right\">\n" +
    "                                        {{taxLine.amount | currency: currencySymbol}}\n" +
    "                                    </td>\n" +
    "                                </tr>\n" +
    "                                </tbody>\n" +
    "                                <tfoot>\n" +
    "                                <tr class=\"order-total\">\n" +
    "                                    <td class=\"text-left\">{{'ORDER_TOTAL' | translate}}</td>\n" +
    "                                    <td class=\"text-right\">{{ confirmationDetails.totalPrice | currency: currencySymbol}}</td>\n" +
    "                                <tr>\n" +
    "                                                        \n" +
    "                                </tfoot>\n" +
    "                            </table>\n" +
    "\n" +
    "                        </td>\n" +
    "                    </tr>\n" +
    "\n" +
    "                </table>\r" +
    "\n" +
    "                <div ng-include src=\"'js/app/loyalty/templates/confirmation.html'\"></div>\n" +
    "                <div ng-include src=\"'js/app/loyalty/templates/checkout_signup_loyalty.html'\">\n" +
    "            </div>\n" +
    "\n" +
    "        </div>\n" +
    "        <!-- mobile view -->\n" +
    "\n" +
    "    </div>\n" +
    "    \n" +
    "    <!-- order details -->\n" +
    "    <div class=\"order-success\"  ng-cloak>\n" +
    "        <div class=\"row\">\n" +
    "            <div class=\"col-xs-12 col-sm-6 col-sm-offset-3\">\n" +
    "                <h3>{{'ENJOY_YOUR_ITEMS' | translate}}</h3>\n" +
    "\n" +
    "                <div data-ui-sref=\"base.category\">\n" +
    "                    <button class=\"btn btn-primary btn-lg\">\n" +
    "                        {{'RETURN_TO_SHOPPING' | translate}}\n" +
    "                    </button>\n" +
    "                </div>\n" +
    "                <div translate=\"QUESTIONS\" translate-compile translate-values=\"{contactInfo: '{{questionsContactInfo}}'}\"></div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/coupons/templates/coupon-apply.html',
    "<div class=\"couponApplyContainer\">\n" +
    "\n" +
    "	<!-- coupon wrapper -->\n" +
    "	<div class=\"couponContainer\">\n" +
    "\n" +
    "		<!-- apply coupon bar -->\n" +
    "		<div class=\"coupon-bar\">\n" +
    "\n" +
    "			<!-- minimum amount not met error message -->\n" +
    "			<div ng-if=\"coupon.restrictions.minOrderValue.amount > cart.totalPrice.amount\" class=\"error\">\n" +
    "				{{'COUPON_MINIMUM_NOT_MET' | translate}}\n" +
    "			</div>\n" +
    "	\n" +
    "			<!-- coupon error message -->\n" +
    "			<div id=\"coupon-error-message\" ng-if=\"couponErrorMessage\" class=\"error\">\n" +
    "				{{couponErrorMessage}}\n" +
    "			</div>\n" +
    "\n" +
    "			<div class=\"input-group\" ng-class=\"{ 'has-error': couponErrorMessage }\">\n" +
    "				\n" +
    "				<!-- coupon input -->\n" +
    "				<input id=\"coupon-code\" type=\"text\" class=\"form-control couponInput\" ng-model='couponCode' placeholder=\"ADD COUPON CODE\"  >\n" +
    "\n" +
    "				<!-- coupon apply btn -->\n" +
    "				<span class=\"input-group-btn\">\n" +
    "					<button id=\"apply-coupon\" class=\"btn btn-default\" ng-click=\"applyCoupon(couponCode); couponCode = null\">\n" +
    "						{{'COUPON_APPLY' | translate}}\n" +
    "					</button>\n" +
    "				</span>\n" +
    "		\n" +
    "			</div>\n" +
    "			\n" +
    "		</div>\n" +
    "\n" +
    "\n" +
    "	</div>\n" +
    "\n" +
    "	<!-- show applied  coupons -->\n" +
    "	<div ng-if=\"cart.discounts.length\">\n" +
    "		<table class=\"table table-striped coupon-list-table\">\n" +
    "			<tbody>\n" +
    "			<tr ng-repeat=\"discount in cart.discounts\" class=\"techne-table-xs-right techne-table-xs-left\">\n" +
    "				<td class=\"dicsount-code\">\n" +
    "					{{discount.code}}\n" +
    "				</td>\n" +
    "				<td>\n" +
    "					<!-- coupon applied -->\n" +
    "					<span ng-if=\"!discount.discountValidationDetails\">{{'COUPON_APPLIED' | translate}}</span>\n" +
    "					\n" +
    "					<!-- coupon not applied -->\n" +
    "					<span ng-if=\"discount.discountValidationDetails\" class=\"error\">{{'COUPON_NOT_APPLIED' | translate}} <br><small>{{discount.discountValidationDetails.details[0]}} </small></span>\n" +
    "\n" +
    "				</td>\n" +
    "				<td class=\"remove-coupon\">\n" +
    "					<button id=\"remove-coupon\" ng-click=\"removeCoupon(discount.id)\" class=\"btn delete btn-link\" title=\"Remove Coupon\"><span class=\"hyicon hyicon-remove\"></span></button>\n" +
    "				</td>\n" +
    "			</tr>\n" +
    "\n" +
    "			<tbody>\n" +
    "		</table>\n" +
    "	</div>\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/errors/templates/error-display.html',
    "<section class=\"errorPageContainer white\" match-background ng-cloak>\n" +
    "  <h2 class=\"errorTitle\">{{errorTitle}}</h2>\n" +
    "  <p>\n" +
    "      {{errorMessage}}\n" +
    "      <br/>\n" +
    "      {{errorRedirect}}\n" +
    "  </p>\n" +
    "\n" +
    "  <div class=\"actionButton clearfix\">\n" +
    "    <button class=\"btn btn-secondary btn-g\" ng-click=\"redirect()\">\n" +
    "      {{errorButtonText}}\n" +
    "    </button>\n" +
    "  </div>\n" +
    "\n" +
    "</section>\n"
  );


  $templateCache.put('js/app/home/templates/home.html',
    "<div class=\"homepageContainer\" match-background>\n" +
    "    <div class=\"homepageCarouselContainer\">\n" +
    "        <!-- Top Images Carousel - Large -->\n" +
    "        <carousel interval=\"carouselInterval\" class=\"visible-lg\">\n" +
    "            <slide ng-repeat=\"slide in slidesLarge\" active=\"slide.active\">\n" +
    "                <site-content-image image=\"slide.image\" image-id=\"{{slide.id}}\"></site-content-image>\n" +
    "            </slide>\n" +
    "        </carousel>\n" +
    "\n" +
    "        <!-- Top Images Carousel - Small -->\n" +
    "        <carousel interval=\"carouselInterval\" class=\"hidden-lg\">\n" +
    "            <slide ng-repeat=\"slide in slidesSmall\" active=\"slide.active\">\n" +
    "                <site-content-image image=\"slide.image\" image-id=\"{{slide.id}}\"></site-content-image>\n" +
    "            </slide>\n" +
    "        </carousel>\n" +
    "        <div class=\"carouselImages\">\n" +
    "            <div class=\"content-container clearfix\">\n" +
    "\n" +
    "                <!-- Banner 1 -->\n" +
    "                <div class=\"hidden-xs col-sm-6 col-md-6 col-lg-6\">\n" +
    "                    <site-content-image image=\"banner1.large\" image-id=\"banner1\"></site-content-image>\n" +
    "                </div>\n" +
    "                <div class=\"hidden-xs col-sm-6 col-md-6 col-lg-6\">\n" +
    "                    <site-content-image image=\"banner2.large\" image-id=\"banner2\"></site-content-image>\n" +
    "                </div>\n" +
    "\n" +
    "                <!-- Banner 2 -->\n" +
    "                <div class=\"col-xs-12 hidden-sm hidden-md hidden-lg\">\n" +
    "                    <site-content-image image=\"banner1.small\" image-id=\"banner1\"></site-content-image>\n" +
    "                </div>\n" +
    "                <div class=\"col-xs-12 hidden-sm hidden-md hidden-lg\">\n" +
    "                    <site-content-image image=\"banner2.small\" image-id=\"banner2\"></site-content-image>\n" +
    "                </div>\n" +
    "\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/home/templates/site-content-image.html',
    "\n" +
    "<div ng-if=\"image.hyperlinkUrl !== ''\">\n" +
    "    <a ng-if=\"image.internal\" href=\"{{image.hyperlinkUrl}}\">\n" +
    "        <img ng-src=\"{{image.imageUrl}}\" id=\"{{id}}\" class=\"banner\" />\n" +
    "    </a>\n" +
    "    <a ng-if=\"!image.internal\" href=\"{{image.hyperlinkUrl}}\" target=\"_blank\">\n" +
    "        <img ng-src=\"{{image.imageUrl}}\" id=\"{{id}}\" class=\"banner\" />\n" +
    "    </a>\n" +
    "</div>\n" +
    "<img ng-if=\"image.hyperlinkUrl === ''\" ng-src=\"{{image.imageUrl}}\" id=\"{{id}}\" class=\"banner\" />\n"
  );


  $templateCache.put('js/app/loyalty/templates/cart_details.html',
    "\n" +
    "	\n" +
    "<div ng-controller=\"LoyaltyCartCtrl\" ng-if=\"isConfigMaintained\">\n" +
    "	<div class=\"\" ng-show=\"thisUser.isMember && loyaltyConfig.showReward\">\n" +
    "		<div class=\"form-group\">\n" +
    "			<div ng-show=\"dummyFireProcessing\">\n" +
    "				<h4 class=\"text-center\" id=\"cart-processing-text\">{{ 'PROCESSING_TEXT' | translate}}</h4>\n" +
    "			</div>\n" +
    "			<div ng-hide=\"dummyFireProcessing\">\n" +
    "				<section class=\"summary\">\n" +
    "					<table class=\"table\">\n" +
    "						<thead>\n" +
    "							<tr>\n" +
    "								<th class=\"\" ng-if=\"!loyaltyConfig.showCashBal\">\n" +
    "									<h4 class=\"text-left text-green\" >\n" +
    "										<i id=\"cart-points-text\">{{ 'REWARD_PNTS_EARNED_TEXT' | translate}}</i>\n" +
    "									</h4>\n" +
    "								</th>\n" +
    "\n" +
    "								<th class=\"text-right\" ng-if=\"!loyaltyConfig.showCashBal\">\n" +
    "									<h4 class=\"text-right text-green\" >\n" +
    "										<i id=\"cart-loyalty-points\">{{earning.points}}</i>\n" +
    "									</h4>\n" +
    "								</th>\n" +
    "\n" +
    "								<th class=\"\" ng-if=\"loyaltyConfig.showCashBal\" >\n" +
    "									<h4 class=\"text-left text-green\" >\n" +
    "										<i id=\"cart-cash-text\">{{ 'REWARD_CASH_EARNED_TEXT' | translate}}</i>\n" +
    "									</h4>\n" +
    "								</th>\n" +
    "								\n" +
    "								<th class=\"text-right\" ng-if=\"loyaltyConfig.showCashBal\" >\n" +
    "									<h4 class=\"text-right text-green\">\n" +
    "										<i  id=\"cart-loyalty-cash\"> {{earning.cash | currency: currencySymbol}} </i>\n" +
    "									</h4>\n" +
    "								</th>\n" +
    "							</tr>\n" +
    "						</thead>\n" +
    "					</table>\n" +
    "				</section>\n" +
    "			</div>\n" +
    "		</div>\n" +
    "	</div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/loyalty/templates/checkout_cart.html',
    "\n" +
    "    \n" +
    "<div ng-controller=\"LoyaltyCheckoutCartCtrl\" ng-if=\"isConfigMaintained\">\n" +
    "    <div class=\"\" ng-show=\"thisUser.isMember && loyaltyConfig.showReward\">\n" +
    "        <div class=\"form-group\">\n" +
    "            <div ng-show=\"dummyFireProcessing\">\n" +
    "                <h4 class=\"text-center\" id=\"checkout-processing-text\">{{ 'PROCESSING_TEXT' | translate}}</h4>\n" +
    "            </div>\n" +
    "            <div ng-hide=\"dummyFireProcessing\">\n" +
    "                <section class=\"summary padding0\">\n" +
    "                    <table class=\"table\">\n" +
    "                        <thead>\n" +
    "                            <tr>\n" +
    "                                <th class=\"\" ng-if=\"!loyaltyConfig.showCashBal\">\n" +
    "                                    <h4 class=\"text-left text-green\">\n" +
    "                                        <i id=\"checkout-points-text\">{{ 'REWARD_PNTS_EARNED_TEXT' | translate}}</i>\n" +
    "                                    </h4>\n" +
    "                                </th>\n" +
    "\n" +
    "                                <th class=\"text-right\" ng-if=\"!loyaltyConfig.showCashBal\">\n" +
    "                                    <h4 class=\"text-right text-green\">\n" +
    "                                        <i id=\"checkout-loyalty-points\">{{earning.points}}</i>\n" +
    "                                    </h4>\n" +
    "                                </th>\n" +
    "\n" +
    "                                <th class=\"\" ng-if=\"loyaltyConfig.showCashBal\">\n" +
    "                                    <h4 class=\"text-left text-green\">\n" +
    "                                        <i id=\"checkout-cash-text\">{{ 'REWARD_CASH_EARNED_TEXT' | translate}}</i>\n" +
    "                                    </h4>\n" +
    "                                </th>\n" +
    "\n" +
    "                                <th class=\"text-right\" ng-if=\"loyaltyConfig.showCashBal\">\n" +
    "                                    <h4 class=\"text-right text-green\">\n" +
    "                                        <i id=\"checkout-loyalty-cash\"> {{earning.cash | currency: currencySymbol}} </i>\n" +
    "                                    </h4>\n" +
    "                                </th>\n" +
    "\n" +
    "                            </tr>\n" +
    "                        </thead>\n" +
    "                    </table>\n" +
    "                </section>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/loyalty/templates/checkout_redeem_discount.html',
    "    \n" +
    "\n" +
    "    <div ng-controller=\"LoyaltyCheckoutCtrl\"  ng-if=\"isConfigMaintained\">\n" +
    "        <div class=\"col-lg-12\" ng-if=\"thisUser.isMember && loyaltyConfig.showReward && (userMaxPoints>0)\">\n" +
    "            <span class=\"form-block-headline\" id=\"checkout-spend-text\">{{'SPEND_YOUR_REWARDS_PNTS' | translate}}</span>\n" +
    "        </div>\n" +
    "        <div class=\"wrapperRewards\"  ng-if=\"thisUser.isMember && loyaltyConfig.showReward && (userMaxPoints>0)\">\n" +
    "            <div class=\"points-pay\">\n" +
    "                <div class=\"col-lg-12\">\n" +
    "                    <div class=\"panel\">\n" +
    "                        <div class=\"panel-body\">\n" +
    "                            <div class=\"col-lg-3\" ng-if=\"!loyaltyConfig.showCashBal\">\n" +
    "                                <div class=\"form-group\" ng-class=\"{'has-error': (paymentForm.pointsGoing.$invalid) }\">\n" +
    "                                    <input type=\"number\" id=\"checkout-points-input\" class=\"form-control\" placeholder=\"Points\" min=\"0\" ng-pattern=\"/^\\d{0,9}(\\.\\d{1,9})?$/\" max=\"{{userMaxPoints}}\" ng-change=\"changePointsGoing()\" ng-model=\"redeem.pointsGoing\" ng-disabled=\"isSliderDisabled\" name=\"pointsGoing\" />\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                            <div class=\"col-lg-9\" ng-if=\"!loyaltyConfig.showCashBal\">\n" +
    "                                <p class=\"points-going-label \">\n" +
    "                                <span id=\"checkout-currency-id\" ng-bind=\"currencyId\"></span>\n" +
    "                                <span id=\"points-going\" ng-bind=\"redeem.pointsToCurr\"></span>\n" +
    "                                </p>\n" +
    "                            </div>\n" +
    "                            <div class=\"form-group\" ng-class=\"{'has-error': (paymentForm.cashGoing.$invalid) }\">\n" +
    "                                <div class=\"col-lg-3\" ng-if=\"loyaltyConfig.showCashBal\">\n" +
    "                                    <input type=\"number\" id=\"checkout-cash-input\" class=\"form-control\" placeholder=\"Cash\" min=\"0\" ng-pattern=\"/^\\d{0,9}(\\.\\d{1,9})?$/\" max=\"{{userMaxCash}}\" ng-change=\"changeCashGoing()\" ng-disabled=\"isSliderDisabled\" ng-model=\"redeem.cashGoing\" name=\"cashGoing\"/>\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                            <div class=\"col-lg-12\">\n" +
    "                                <div class=\"points-slider-wrapper col-lg-10\">\n" +
    "                                    <div class=\"clearfix\">\n" +
    "                                        <div class=\"pull-left\">\n" +
    "                                            <p class=\"minimum-Points\"> <span id=\"minimum-points\">{{0}}</span></p>\n" +
    "                                        </div>\n" +
    "                                        <div class=\"pull-right\">\n" +
    "                                            <p class=\"maximum-Points\">\n" +
    "                                            <span id=\"maximum-points\" ng-if =\"!loyaltyConfig.showCashBal\" ng-bind=\"userMaxPoints\"></span>\n" +
    "                                            <span id=\"maximum-points\" ng-if =\"loyaltyConfig.showCashBal\" ng-bind=\"((userMaxPoints * redeem.ratio).toFixed(2))\">\n" +
    "                                            </span>\n" +
    "                                            </p>\n" +
    "                                        </div>\n" +
    "                                    </div>\n" +
    "                                    <div class=\"clearfix\">\n" +
    "                                        <div\n" +
    "                                            id=\"points-slider\"\n" +
    "                                            min=\"0\"\n" +
    "                                            ui-slider\n" +
    "                                            ng-disabled=\"isSliderDisabled\"\n" +
    "                                            ng-if=\"!loyaltyConfig.showCashBal\"\n" +
    "                                            ng-change=\"changePointsGoing()\"\n" +
    "                                            ng-model=\"redeem.pointsGoing\"\n" +
    "                                            max=\"{{userMaxPoints}}\">\n" +
    "                                        </div>\n" +
    "                                        <div\n" +
    "                                            id=\"points-slider\"\n" +
    "                                            min=\"0\"\n" +
    "                                            ui-slider\n" +
    "                                            ng-disabled=\"isSliderDisabled\"\n" +
    "                                            ng-if=\"loyaltyConfig.showCashBal\"\n" +
    "                                            ng-change=\"changeCashGoing()\"\n" +
    "                                            ng-model=\"redeem.cashGoing\"\n" +
    "                                            max=\"{{userMaxCash}}\">\n" +
    "                                        </div>\n" +
    "                                    </div>\n" +
    "                                </div>\n" +
    "                                <div class=\"col-lg-2\">\n" +
    "                                    <button id=\"apply-points-button\" ng-if=\"showApplyPoints\" ng-click=\"applyLoyaltyPoints()\" class=\" btn btn-success points-slider-wrapper\" ng-disabled=\"isSliderDisabled\"> {{'APPLY' | translate}}  </button>\n" +
    "                                    <button id=\"remove-points-button\" ng-if=\"!showApplyPoints\" ng-click=\"removeLoyaltyPoints()\" class=\" btn btn-danger points-slider-wrapper\"> {{'REMOVE' | translate}}  </button>\n" +
    "\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>"
  );


  $templateCache.put('js/app/loyalty/templates/checkout_signup_loyalty.html',
    " <div ng-controller=\"SignupCheckoutCtrl\"  ng-if=\"isConfigMaintained\">\n" +
    "    <div class=\"wrapperRewards\" ng-hide=\"thisUser.isMember || !thisUser.isUser\">\n" +
    "        <!-- <div class=\"checkbox loyalty\" ng-show=\"loyaltyConfig.showReward\">\n" +
    "			<input type=\"checkbox\" ng-model=\"wantLoyaltyProgram\" id=\"want-loyalty-program\" />\n" +
    "			<label id=\"checkout-signup-label\" for=\"want-loyalty-program\" translate=\"{{ 'SIGN_UP_DESCRIPTION' }}\" translate-values=\"{ name: loyaltyProgram.name}\"></label>\n" +
    "		</div>  -->\n" +
    "		<div class=\"form-group\">\n" +
    "			<button class=\"btn btn-primary\" id=\"get-membership-button\" ng-click=\"getLoyaltyProgramMembership()\" ng-disabled=\"disableSave\" translate=\"{{ 'SIGN_UP_TITLE_PROGRAM_NAME' }}\" translate-values=\"{ programName: userProgramName}\"></button>\n" +
    "		</div>	\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/loyalty/templates/confirmation.html',
    "\n" +
    "        <div class=\"amountSection\" ng-controller=\"LoyaltyConfirmationCtrl\"  ng-if=\"isConfigMaintained\">\n" +
    "\n" +
    "            <div ng-if=\"thisUser.isMember && loyaltyConfig.showReward\">\n" +
    "\n" +
    "                <table class=\"table\" style=\"background: rgba(0, 0, 0, 0)\">\n" +
    "                        \n" +
    "                        <tr>\n" +
    "                            <td>\n" +
    "                                <span id=\"confirmation-points-text\"> {{ 'CONFIRMATION_LOYALTY_TEXT' | translate}} </span> \n" +
    "                            </td>\n" +
    "                        </tr>\n" +
    "\n" +
    "                </table>\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "                <!-- <table class=\"table\" style=\"background: rgba(0, 0, 0, 0)\">\n" +
    "                        \n" +
    "                        <tr>\n" +
    "                            <td>\n" +
    "                                <span id=\"confirmation-cash-redeemed-text\"> {{ 'REWARD_CASH_SPENT_TEXT' | translate}} </span> \n" +
    "                            </td>\n" +
    "                            <td class=\"text-right\">\n" +
    "                                <span class=\"error\" id=\"confirmation-cash-redeemed\" >- {{amounts.redeemed | currency: currencySymbol}} </span>\n" +
    "                            </td>\n" +
    "                        </tr>\n" +
    "\n" +
    "                        <tr>\n" +
    "                            <td>\n" +
    "                                <span id=\"confirmation-cash-earned-text\"> {{ 'LOYALTY_CASH_EARNED_TEXT' | translate}} </span> \n" +
    "                            </td>\n" +
    "                            <td class=\"text-right\">\n" +
    "                                <span class=\"text-green\" id=\"confirmation-cash-earned\" >{{amounts.earned | currency: currencySymbol}} </span>\n" +
    "                            </td>\n" +
    "                        </tr>\n" +
    "                    \n" +
    "                </table> -->\n" +
    "            </div>\n" +
    "\n" +
    "        </div>"
  );


  $templateCache.put('js/app/loyalty/templates/google-wallet.html',
    "		<div class=\"form-group\" id=\"saveToWallet\"></div>			hello  {{customerId}}"
  );


  $templateCache.put('js/app/loyalty/templates/order-detail.html',
    "\n" +
    "        <div class=\"amountSection\" ng-controller=\"OrderDetailCtrl\"  ng-if=\"isConfigMaintained\">\n" +
    "\n" +
    "            <div ng-if=\"thisUser.isMember && loyaltyConfig.showReward\">\n" +
    "\n" +
    "\n" +
    "                <table class=\"table\" style=\"background: rgba(0, 0, 0, 0)\">\n" +
    "                        \n" +
    "                        <tr>\n" +
    "                            <td>\n" +
    "                                <span id=\"confirmation-cash-redeemed-text\"> {{ 'REWARD_POINTS_SPENT_TEXT' | translate}} </span> \n" +
    "                            </td>\n" +
    "                            <td class=\"text-right\">\n" +
    "                                <span class=\"error\" id=\"confirmation-cash-redeemed\" >-{{points.redeemed}} </span>\n" +
    "                            </td>\n" +
    "                        </tr>\n" +
    "\n" +
    "                        <tr>\n" +
    "                            <td>\n" +
    "                                <span id=\"confirmation-cash-earned-text\"> {{ 'REWARD_POINTS_EARNED_TEXT' | translate}} </span> \n" +
    "                            </td>\n" +
    "                            <td class=\"text-right\">\n" +
    "                                <span class=\"text-green\" id=\"confirmation-cash-earned\" >{{points.earned}} </span>\n" +
    "                            </td>\n" +
    "                        </tr>\n" +
    "                    \n" +
    "                </table>\n" +
    "            </div>\n" +
    "\n" +
    "        </div>"
  );


  $templateCache.put('js/app/loyalty/templates/preferred_language_modal.html',
    "<div  ng-if=\"isConfigMaintained\">\r" +
    "\n" +
    "	<div class=\"modal-header\">\r" +
    "\n" +
    "		<button type=\"button\" class=\"close\" ng-click=\"closeModal()\" data-dismiss=\"modal\">\r" +
    "\n" +
    "			<span aria-hidden=\"true\" id=\"language-close\">×</span><span id=\"language-close-label\" class=\"sr-only\">{{'CLOSE' | translate }}</span>\r" +
    "\n" +
    "		</button>\r" +
    "\n" +
    "   		<h4 class=\"modal-title\" id=\"language-title\">{{'UPDATE_PREFERRED_LANGUAGE' | translate }}</h4>\r" +
    "\n" +
    "  	</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "  	<div class=\"modal-body review-modal\">\r" +
    "\n" +
    "  		<form name=\"languageForm\" ng-submit=\"updatePreferredLanguage()\">\r" +
    "\n" +
    "  			\r" +
    "\n" +
    "  			<div class=\"row\">\r" +
    "\n" +
    "	            <div class=\"col-lg-12\">\r" +
    "\n" +
    "	                \r" +
    "\n" +
    "	            	<div class=\"form-group input-group\">\r" +
    "\n" +
    "				        <label class=\"input-group-addon control-label\" id=\"language-label\" for=\"language\">{{'PREFERRED_LANGUAGE' | translate}}</label>\r" +
    "\n" +
    "\r" +
    "\n" +
    "				        <select ng-if=\"thisUser.loyaltyUser.preferredLanguage\" type=\"text\" class=\"form-control\" id=\"language\" name=\"language\" ng-model=\"myUser.preferredLanguage\">\r" +
    "\n" +
    "				            <option  ng-repeat=\"language in site.languages\" ng-selected=\"{{thisUser.loyaltyUser.preferredLanguage == language}}\" value=\"{{language}}\"> \r" +
    "\n" +
    "				                {{language | translate}}\r" +
    "\n" +
    "				            </option>\r" +
    "\n" +
    "				        </select>\r" +
    "\n" +
    "\r" +
    "\n" +
    "				        <select ng-if=\"!thisUser.loyaltyUser.preferredLanguage\" type=\"text\" class=\"form-control\" id=\"language\" name=\"language\" ng-model=\"myUser.preferredLanguage\">\r" +
    "\n" +
    "				            <option  ng-repeat=\"language in site.languages\" ng-selected=\"{{languageCode == language}}\" value=\"{{language}}\"> \r" +
    "\n" +
    "				                {{language | translate}}\r" +
    "\n" +
    "				            </option>\r" +
    "\n" +
    "				        </select>\r" +
    "\n" +
    "\r" +
    "\n" +
    "				    </div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "	            </div>\r" +
    "\n" +
    "	        </div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "  			<div class=\"modal-footer\">\r" +
    "\n" +
    "	            <button type=\"button\" ng-click=\"closeModal()\" id=\"cancel-btn\" class=\"btn btn-secondary btn-lg\">{{'CANCEL' | translate}}</button>\r" +
    "\n" +
    "	            <button type=\"submit\" id=\"save-btn\" class=\"btn btn-primary btn-lg\" >{{'SAVE' | translate}}</button>\r" +
    "\n" +
    "	        </div>\r" +
    "\n" +
    "  			\r" +
    "\n" +
    "  			\r" +
    "\n" +
    "	    </form>\r" +
    "\n" +
    "	</div>\r" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/loyalty/templates/product_rating.html',
    "<div class=\"product-rating-review\" ng-controller=\"RatingReviewCtrl\"  ng-if=\"isConfigMaintained\">\n" +
    "    <div class=\"rating-review-row\">\n" +
    "        <!-- <span>\n" +
    "			<rating class=\"product-rating\" id=\"rating-average\" ng-model=\"avgRating\" max=\"5\" readonly=\"true\"></rating>\n" +
    "		</span> -->\n" +
    "        <span class=\"product-rating\" id=\"rating-average\">\n" +
    "            <i ng-repeat=\"rateStar in [1, 2, 3, 4, 5] track by $index\" class=\"glyphicon\" data-width=\"{{avgRatingView}}\" ng-class=\"{ 'glyphicon-star': $index < avgRating,  'glyphicon-star-empty': $index >= avgRating, 'avg': ( $index + 1 ) === avgRating }\"></i>\n" +
    "        </span>\n" +
    "        <span>\n" +
    "			<span><a ng-click=\"getProductReviews()\" id=\"reviews-link\" translate=\"{{ 'USER_REVIEW' }}\" translate-values=\"{ totalRatingReviews: totalRatingReviews}\"></a>\n" +
    "        </span>\n" +
    "        <span ng-if=\"thisUser.isUser\" ng-hide=\"customerExist===true\" id=\"rating-seperator\"> | </span>\n" +
    "        <span ng-if=\"thisUser.isUser\" ng-hide=\"customerExist===true\"><a ng-click=\"openWriteReviewModal()\" id=\"write-review\">{{'WRITE_REVIEW' | translate}}</a></span>\n" +
    "        </span>\n" +
    "    </div>\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/loyalty/templates/product_reviews.html',
    "<div class=\"product-reviews\"  ng-if=\"isConfigMaintained\">\n" +
    "    <section class=\"product-review\">\n" +
    "        <div class=\"form-group row\">\n" +
    "            <div class=\"col-md-12\">\n" +
    "                <h3 id=\"review-for\">{{'USER_REVIEW_FOR' | translate}} <a href=\"\" id=\"review-product-link\" ng-click = \"gotoProductDetailPage()\">{{product.product.name}}</a></h3>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"form-group row\">\n" +
    "            <div class=\"col-md-3 \">\n" +
    "                <div class=\"product-image\">\n" +
    "                    <img class=\"lazyOwl\" id=\"review-product-image\" ng-src=\"{{product.product.media[0].url}}\" alt=\"productThumb\" ng-click=\"gotoProductDetailPage()\" />\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"col-md-3 product-rating-review\">\n" +
    "                <div class=\"form-group rating-review-row\">\n" +
    "                    <div class=\"marginBottom5\"><Label id=\"product-average-rating\">{{'AVERAGE_USER_RATING' | translate}} </Label></div>\n" +
    "                    <div class=\"marginBottom5\">\n" +
    "                        <strong><span class=\"ratingAvg\" id=\"average-rating-model\" ng-bind=\"avgRatingModel\"></span></strong>\n" +
    "                         <span class=\"product-rating\" id=\"rating-average\">\n" +
    "                            <i ng-repeat=\"rateStar in [1, 2, 3, 4, 5] track by $index\" class=\"glyphicon\" data-width=\"{{avgRatingView}}\" ng-class=\"{ 'glyphicon-star': $index < avgRating,  'glyphicon-star-empty': $index >= avgRating, 'avg': ( $index + 1 ) === avgRating }\"></i>\n" +
    "                        </span>\n" +
    "                    </div>\n" +
    "                    <div class=\"form-group\">\n" +
    "                        <span id=\"product-rating-label-1\" ng-show=\"totalRatingReviews > 1\" translate=\"{{ 'RATINGS' }}\" translate-values=\"{ totalRatingReviews: totalRatingReviews}\"></span>\n" +
    "                        <span id=\"product-rating-label-2\" ng-show=\"totalRatingReviews === 0 || totalRatingReviews === 1\" translate=\"{{ 'SINGLE_RATING' }}\" translate-values=\"{ totalRatingReviews: totalRatingReviews}\"></span>\n" +
    "                    </div>\n" +
    "                    <div ng-if=\"thisUser.isUser\" ng-hide=\"customerExist===true\">\n" +
    "                        <button class=\"btn btn-primary\" id=\"review-add-button\" ng-click=\"openWriteReviewModal()\">{{'ADD_REVIEW' | translate}}</button>\n" +
    "                    </div>\n" +
    "                    <div ng-if=\"thisUser.isUser\" ng-show=\"customerExist===true\">\n" +
    "                        \n" +
    "                        <div class=\"\"><Label id=\"my-rating-label\">{{'MY_RATING' | translate}}</Label></div>\n" +
    "                        <strong><span id=\"my-rating-value\" class=\"ratingAvg\" id=\"my-ratings\" ng-bind=\"myRating\"></span></strong>\n" +
    "                        <span>\n" +
    "                            <rating id=\"my-review-stars\" class=\"product-rating myRatingStar\" ng-model=\"myRating\" max=\"5\" readonly=\"true\"></rating>\n" +
    "                        </span>\n" +
    "                    </div>\n" +
    "                   \n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"col-md-6\">\n" +
    "                <form class=\"\">\n" +
    "                    <div class=\"form-group\">\n" +
    "                        <strong><span id=\"total-rating-review\" translate=\"{{ 'USER_RATED' }}\" translate-values=\"{ totalRatingReviews: totalRatingReviews}\"></span></strong>\n" +
    "                    </div>\n" +
    "                    <div class=\"row\" ng-repeat=\"rating in ratingArray.slice().reverse() track by $index\">\n" +
    "                        <div class=\"col-sm-2\"><span id=\"{{ 'rating-stars' + $index }}\" translate=\"{{ 'STARS' }}\" translate-values=\"{ starValue: 5 - $index}\"></span></div>\n" +
    "                        <div class=\"col-sm-6\">\n" +
    "                            <progressbar max=\"100\" value=\"ratingToPercentage(rating, totalRatingReviews)\" id=\"{{ 'rating-stars-progress-' + $index }}\" type=\"warning\" class=\"active progressMargin\">\n" +
    "                            </progressbar>\n" +
    "                        </div>\n" +
    "                        <div class=\"col-sm-1\"><span ng-bind=\"rating\" id=\"{{ 'rating-stars-counts-' + $index }}\"></span></div>\n" +
    "                    </div>\n" +
    "                </form>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </section>\n" +
    "    <section class=\"customer-reviews\">\n" +
    "        <div class=\" row\">\n" +
    "            <div class=\" form-group col-sm-12 userReviewHeading\">\n" +
    "                <h3 id=\"user-review-heading\" translate=\"{{ 'USER_REVIEW_LIST' }}\" translate-values=\"{ totalReviewsToShow: totalReviewsToShow}\"></h3>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"row product-grid\" infinite-scroll=\"getProductReviewRating()\">\n" +
    "            <div class=\"form-group \" ng-repeat=\"review in reviewRatingData \">\n" +
    "                <div class=\"form-group row customer-review-row\" ng-show=\"review.reviewComment!== ''\">\n" +
    "                    <div class=\"col-sm-3\">\n" +
    "                        <div ng-show=\"review.reviewerName!==' '\" class=\"marginBottom5\"><span class=\"\" id=\"{{ 'review-reviewerName' + $index }}\">{{review.reviewerName}}</span></div>\n" +
    "                        <div ng-show=\"review.reviewerName===' '\" class=\"marginBottom5\"><span class=\"\" id=\"{{ 'review-dummyReviewerName' + $index }}\">{{'A_USER' | translate}}</span></div>\n" +
    "                        <div class=\"marginBottom5\">\n" +
    "                            <rating class=\"product-rating\" id=\"{{ 'review-reviewerRating' + $index }}\" ng-model=\"review.rating\" max=\"5\" readonly=\"true\"></rating>\n" +
    "                        </div>\n" +
    "                        <div class=\"form-group\">\n" +
    "                            <span id=\"{{ 'review-dateOfReview' + $index }}\">{{review.metadata.createdAt | date: 'medium'}}</span>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    <div class=\"col-sm-8\">\n" +
    "                        <div class=\"marginBottom5\"><strong id=\"{{ 'review-reviewTitle' + $index }}\">{{review.reviewTitle}}</strong></div>\n" +
    "                        <div class=\"form-group\">\n" +
    "                            <p id=\"{{ 'review-reviewComment' + $index }}\">{{review.reviewComment}}</p>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "                \n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </section>\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/loyalty/templates/referral_modal.html',
    "<div  ng-if=\"isConfigMaintained\">\n" +
    "	<div class=\"modal-header\">\n" +
    "		<button type=\"button\" class=\"close\" ng-click=\"closeModal()\" data-dismiss=\"modal\">\n" +
    "			<span aria-hidden=\"true\" id=\"referral-close\">×</span><span id=\"referral-close-label\" class=\"sr-only\">{{'CLOSE' | translate }}</span>\n" +
    "		</button>\n" +
    "   		<h4 class=\"modal-title\" id=\"referral-title\">{{'REF_TIT' | translate }}</h4>\n" +
    "  	</div>\n" +
    "\n" +
    "  	<div class=\"modal-body review-modal\">\n" +
    "  		<form name=\"referralForm\">\n" +
    "  			\n" +
    "  			\n" +
    "  			<div class=\"row\">            \n" +
    "	          	<div class=\"col-sm-12 \">\n" +
    "	          		<div class=\"\">\n" +
    "		          		<span class=\"control-label referralText\" id=\"referral-description\">{{'REF_MOD_DESC' | translate }}</span>  \n" +
    "		           	</div> \n" +
    "	          		<div class=\"form-group\" ng-class=\"{ 'has-error': referralForm.emailList.$invalid && referralForm.emailList.$dirty || !disableInvitation}\">\n" +
    "					\n" +
    "					<!-- <tags-input id=\"referral-email-input\" name=\"emailList\" ng-model=\"referral.emailList\" placeholder=\"{{'EMAIL_ADDRESS' | translate }}\" allowed-tags-pattern=\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\" max-tags=5 min-tags=0 add-on-space='true' add-on-comma = 'true'></tags-input> -->\n" +
    "						<input\n" +
    "							type=\"text\"\n" +
    "							ui-select2=\"select2Options\"\n" +
    "							id=\"referral-email-input\"\n" +
    "							ng-model=\"referral.emailList\"\n" +
    "							placeholder=\"{{'EMAIL_ADDRESS' | translate }}\"\n" +
    "							ng-change=\"checkEmailValidity(referral.emailList)\"\n" +
    "							style=\"width: 100%;\"\n" +
    "							name = \"emailList\"\n" +
    "						/>\n" +
    "						<span class=\"referralText\" id=\"referral-description\">{{'REF_FRND_INFO' | translate }}</span>\n" +
    "					</div>\n" +
    "	           	</div> \n" +
    "	        </div>\n" +
    "  			<div class=\"form-group row\">            \n" +
    "	          	<div class=\"col-sm-12\">\n" +
    "					<button type=\"submit\" id=\"referral-send-button\" class=\"btn btn-primary btn-block\" ng-click=\"sendInvitation(referral, referralForm)\" ng-disabled=\"!referralForm.emailList.$valid || !disableInvitation\" class=\"form-control\">{{'SEND_INV' | translate }}</button>\n" +
    "	           	</div> \n" +
    "	        </div>\n" +
    "	    </form>\n" +
    "	</div>\n" +
    "\n" +
    "</div>"
  );


  $templateCache.put('js/app/loyalty/templates/reward_history.html',
    "\n" +
    "\n" +
    "	<div ng-controller=\"RewardHistoryCtrl\"  ng-if=\"isConfigMaintained\">\n" +
    "\n" +
    "		<div ng-show=\"thisUser.isMember && loyaltyConfig.showReward\">\n" +
    "\n" +
    "			<div >\n" +
    "\n" +
    "				  <div class=\"row form-group reward-details\">\n" +
    "						<div class=\"col-sm-4\">\n" +
    "							<h3 class=\"section-headline head\"><i id=\"reward-history-label\">{{ 'REWARD_HISTORY' | translate}}</i></h3>\n" +
    "						</div>\n" +
    "\n" +
    "					<div class=\"row form-group\">\n" +
    "						<div class=\"col-sm-12\">\n" +
    "							<div class=\"table-responsive hidden-sm hidden-xs\">\n" +
    "								<table class=\"table\">\n" +
    "									<thead>\n" +
    "										<tr>\n" +
    "				                            <th class=\"reward-table-padding\" >\n" +
    "				                            	<span id=\"rewards-date\">{{'DATE' | translate}}</span>\n" +
    "				                            </th>\n" +
    "				                            <th width=\"30%\" id=\"rewards-activity\">{{'ACTIVITY' | translate}}</th>\n" +
    "				                            <th width=\"25%\">\n" +
    "				                            	<div class=\"text-right points-right-padding\">\n" +
    "				                            		<span id=\"rewards-points\" ng-bind=\"'POINTS' | translate\"></span>\n" +
    "				                            	</div>\n" +
    "				                            </th>\n" +
    "				                            <th width=\"15%\"></th>\n" +
    "										</tr>\n" +
    "									</thead>\n" +
    "									<tbody>\n" +
    "										<tr  ng-repeat=\"activity in memberActivities| limitTo: showHistoryFilter\">\n" +
    "											<td class=\"reward-table-padding\" id=\"{{ 'rewards-date-' + $index }}\"> {{activity.metadata.createdAt | date: 'medium'}} </td>\n" +
    "											\n" +
    "											<td ng-if=\"activity.activityType !== 'ORDER'\" id=\"{{ 'rewards-activity-' + $index }}\">{{activity.activityType | translate}}</td>\n" +
    "											<td ng-if=\"activity.activityType === 'ORDER'\" id=\"{{ 'rewards-activity-' + $index }}\"> <a ui-sref=\"base.orderDetail({orderId: activity.refId})\"> {{activity.activityType | translate}} </a> </td>\n" +
    "\n" +
    "											<td>\n" +
    "												<strong class=\"point\" style=\"padding-right: 25px;\" ng-class= \"{'redeemRed':activity.activityType=='REDEEM' ||activity.activityType=='DEDUCT' ||activity.activityType=='EXPIRATION', 'orderGreen':activity.activityType=='ORDER' || activity.activityType=='REGISTRATION' || activity.activityType=='AWARD' || activity.activityType=='RATING' || activity.activityType=='REVIEW' ||activity.activityType=='ACCRUAL' || activity.activityType=='REFERRAL'}\">\n" +
    "													<div class=\"text-right\" id=\"{{ 'rewards-points-' + $index }}\">\n" +
    "													<span ng-if=\"activity.activityType=='REDEEM' || activity.activityType=='DEDUCT' || activity.activityType=='EXPIRATION'\">-</span>\n" +
    "													{{activity.transactionPoints || 0 | number:0}}\n" +
    "													</div>\n" +
    "													\n" +
    "												</strong>\n" +
    "											</td>\n" +
    "											<td></td>\n" +
    "											<!-- <td>{{point.qualifyingPoints}}</td> -->\n" +
    "										</tr>\n" +
    "									</tbody>\n" +
    "								</table>\n" +
    "							</div>\n" +
    "				            <div class=\"text-center\">			\n" +
    "				                <button class=\"btn btn-link\" ng-show=\" ( !showHistoryToggle && memberActivities.length > 10 ) \" ng-click=\"showHistoryToggle =! showHistoryToggle; getMemberActivities(thisUser.loyaltyUser.memberId)\">\n" +
    "				                	<span>{{'SHOW_ALL' | translate}}</span>\n" +
    "				                	<span class=\"glyphicon glyphicon-chevron-down\"></span>\n" +
    "				                </button>			\n" +
    "				                <button class=\"btn btn-link\" ng-show=\"showHistoryToggle\" ng-click=\"showHistoryToggle =! showHistoryToggle; getMemberActivities(thisUser.loyaltyUser.memberId)\">\n" +
    "				                	<span>{{'SHOW_LESS' | translate}}</span>\n" +
    "				                	<span class=\"glyphicon glyphicon-chevron-up\"></span>\n" +
    "				                </button>\n" +
    "				            </span>\n" +
    "							</div>\n" +
    "						</div>\n" +
    "\n" +
    "					</div>\n" +
    "\n" +
    "\n" +
    "					   <div class=\"hidden-md hidden-lg row\">\n" +
    "					       <div ng-repeat=\"activity in memberActivities| limitTo: showHistoryFilter\" class=\"col-sm-4 col-xs-12 orderHistoryCard\">\n" +
    "					           <div class=\"cardStatusIdentifier pull-left\" ></div>\n" +
    "					           <div class=\"panel\">\n" +
    "					               <div class=\"panel-body \" >\n" +
    "					                   <div class=\"row\">\n" +
    "					                       <div class=\"col-sm-8 col-xs-8 leftCol\">\n" +
    "					                           <p id=\"{{ 'rewards-date-' + $index }}\">\n" +
    "					                           <strong id=\"{{ 'rewards-date-title-' + $index }}\">{{'DATE' | translate}}</strong></br>\n" +
    "					                            {{activity.metadata.createdAt | date: 'medium'}} \n" +
    "					                           </p>\n" +
    "					                           <p id=\"{{ 'rewards-activity-' + $index }}\">\n" +
    "					                               <strong id=\"{{ 'rewards-activity-title-' + $index }}\">{{'ACTIVITY' | translate}}</strong></br>\n" +
    "					                                 {{activity.activityType | translate}}\n" +
    "					                           </p>\n" +
    "					                       </div>\n" +
    "					                       <div class=\"col-sm-4 col-xs-4\" ng-class= \"{'redeemRed':activity.activityType=='REDEEM' ||activity.activityType=='DEDUCT' ||activity.activityType=='EXPIRATION', 'orderGreen':activity.activityType=='ORDER' || activity.activityType=='REGISTRATION' || activity.activityType=='AWARD' || activity.activityType=='RATING' || activity.activityType=='REVIEW' ||activity.activityType=='ACCRUAL' || activity.activityType=='REFERRAL'}\">\n" +
    "					                          <p >\n" +
    "					                        	<span id=\"{{ 'rewards-minus-' + $index }}\" ng-if=\"activity.activityType=='REDEEM' || activity.activityType=='DEDUCT' || activity.activityType=='EXPIRATION'\">-</span>\n" +
    "					                        	<strong id=\"{{ 'rewards-points-' + $index }}\">\n" +
    "													{{activity.transactionPoints || 0 | number:0}}\n" +
    "					                        	</strong>\n" +
    "					                          </p>\n" +
    "					                       </div>\n" +
    "					                   </div>\n" +
    "					               </div>\n" +
    "					           </div>\n" +
    "					       </div>\n" +
    "					   </div>\n" +
    "\n" +
    "\n" +
    "\n" +
    "		</div>\n" +
    "\n" +
    "	</div>"
  );


  $templateCache.put('js/app/loyalty/templates/reward_points_product_details.html',
    "<div ng-controller=\"RewardsPointCtrl\"  ng-if=\"isConfigMaintained\">\n" +
    "	<div ng-if=\"thisUser.isMember && loyaltyConfig.showReward\">\n" +
    "	  	<section class=\"gray points-calc\">\n" +
    "			<div class=\"row-group\">\n" +
    "				<h4 class=\"text-green text-center\">\n" +
    "					<i id=\"gift-glyphicon\" class=\"glyphicon glyphicon-gift\"></i>\n" +
    "				</h4>\n" +
    "			</div>\n" +
    "\n" +
    "			<div class=\"row-group\">\n" +
    "\n" +
    "				<div ng-show=\"pointsProcessing\">\n" +
    "					<h4 id=\"product-processing-text\">{{ 'PROCESSING_TEXT' | translate}}</h4>\n" +
    "				</div>\n" +
    "				<div ng-hide=\"pointsProcessing\">\n" +
    "					<h4 id=\"product-points\" ng-if=\"!loyaltyConfig.showCashBal\" class=\"text-green\"><b><i translate=\"{{ 'EARN_POINTS_DESCRIPTION' }}\" translate-values=\"{ points: earning.points}\"></i></b></h4>\n" +
    "					<h4 id=\"product-cash\" ng-if=\"loyaltyConfig.showCashBal\" class=\"text-center text-green\"><b><i> {{'REWARD_CASH_EARNED_TEXT' | translate }} {{earning.cash | currency: currencySymbol}}</i></b></h4>\n" +
    "				</div>\n" +
    "			</div>\n" +
    "		</section>\n" +
    "	</div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/loyalty/templates/signup_for_loyalty_program.html',
    "<div class=\"col-xs-12 col-sm-12 text-left \"  ng-if=\"isConfigMaintained\">\n" +
    "    <div class=\"\" ng-controller=\"LoyaltyProgramCtrl\">\n" +
    "        <div class=\"form-group\" ng-controller=\"registrationController\">\n" +
    "            <div ng-show=\"loyaltyConfig.showReward\">\n" +
    "                <div class=\"checkbox loyalty\">\n" +
    "                    <input type=\"checkbox\" ng-model=\"wantLoyaltyProgram\" id=\"want-loyalty-program\" />\n" +
    "                    <label for=\"want-loyalty-program\" id=\"signup-description-label\" translate=\"{{ 'SIGN_UP_DESCRIPTION' }}\" translate-values=\"{ name: loyaltyProgram.loyaltyProgramName}\"></label>\n" +
    "                </div>\n" +
    "                <div class=\"earnPointText userBottomMargin\" ng-if=\"wantLoyaltyProgram && loyaltyConfig.enableTellAFriend\"><span>{{'REFER_A_FRIEND_INFO_TEXT' | translate}}</span></div>\n" +
    "                <div class=\"form-group input-group\" ng-if=\"wantLoyaltyProgram && loyaltyConfig.enableTellAFriend\">\n" +
    "                    <label class=\"input-group-addon control-label\" id=\"referral-code-label\" for=\"referralCode\">{{'REFERRALCODE' | translate}}</label>\n" +
    "                    <input type=\"text\" class=\"form-control\" id=\"referralCode\" name=\"referralCode\" ng-model=\"user.referraledCode\" ng-focus=\"clearErrors()\" />\n" +
    "                </div>\n" +
    "                <!-- <div class=\"form-group input-group\" ng-if=\"wantLoyaltyProgram\">\n" +
    "                    <label class=\"input-group-addon control-label\" id=\"preferred-language-label\" for=\"language\">{{'PREFERRED_LANGUAGE' | translate}}</label>\n" +
    "                    <select type=\"text\" class=\"form-control\" id=\"language\" name=\"language\" ng-model=\"user.preferredLanguage\">\n" +
    "                        <option  ng-repeat=\"language in site.languages\" value=\"{{language}}\" ng-selected=\"{{languageCode == language}}\" > \n" +
    "                            {{language | translate}}\n" +
    "                        </option>\n" +
    "                    </select>\n" +
    "                </div> -->\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/loyalty/templates/signup_for_loyalty_program_modal.html',
    "<div  ng-if=\"isConfigMaintained\">\n" +
    "    <div class=\"modal-header\">\n" +
    "        <h4 class=\"modal-title\" id=\"signup-program-title\" translate=\"{{ 'SIGN_UP_TITLE_PROGRAM_NAME' }}\" translate-values=\"{ programName: userProgramName}\"></h4>\n" +
    "    </div>\n" +
    "    <div class=\"modal-body\">\n" +
    "        <div class=\"form-group \" ng-if=\"wrongReferral\">\n" +
    "            <span translate=\"{{ 'WRONG_REFER_A_FRIEND_INFO_TEXT1' }}\" translate-values=\"{ programName: userProgramName}\"></span>\n" +
    "        </div>\n" +
    "        <div class=\"userBottomMargin earnPointText\" ng-if=\"wrongReferral\">{{'WRONG_REFER_A_FRIEND_INFO_TEXT2' | translate}}</div>\n" +
    "        <div class=\"earnPointText userBottomMargin\" ng-if=\"!wrongReferral\"><span>{{'REFER_A_FRIEND_INFO_TEXT' | translate}}</span></div>\n" +
    "        <div class=\"form-group input-group\" ng-if=\"configData.enableTellAFriend || loyaltyConfig.enableTellAFriend\">\n" +
    "            <span class=\"input-group-addon\"><label class=\"control-label\" id=\"signup-referralcode-text\">{{'REFERRALCODE' | translate}}</label></span>\n" +
    "            <input type=\"text\" id=\"signup-referralcode\" class=\"form-control\" name=\"\" ng-model=\"myUser.referraledCode\" ng-focus=\"clearErrors()\" />\n" +
    "        </div>\n" +
    "    <!-- \n" +
    "        <div class=\"form-group input-group\">\n" +
    "            <label class=\"input-group-addon control-label\" id=\"preferred-language-label\" for=\"language\">{{'PREFERRED_LANGUAGE' | translate}}</label>\n" +
    "            <select type=\"text\" class=\"form-control\" id=\"language\" name=\"language\" ng-model=\"myUser.preferredLanguage\">\n" +
    "                <option  ng-repeat=\"language in site.languages\" ng-selected=\"{{languageCode == language}}\" value=\"{{language}}\"> \n" +
    "                    {{language | translate}}\n" +
    "                </option>\n" +
    "            </select>\n" +
    "        </div> -->\n" +
    "\n" +
    "    </div>\n" +
    "    <div class=\"modal-footer\">\n" +
    "        <button type=\"button\" id=\"signup-close-button\" class=\"btn btn-default\" ng-click=\"closeModal()\">{{'CLOSE' | translate }}</button>\n" +
    "        <button type=\"submit\" class=\"btn btn-primary\" id=\"signup-button\" ng-disabled=\"disableSave\" ng-click=\"registerCustomerForProgram()\">{{'SIGN_UP' | translate}}</button>\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/loyalty/templates/success_modal.html',
    "<div  ng-if=\"isConfigMaintained\">\n" +
    "	<div class=\"modal-header\">\n" +
    "		<button type=\"button\" id=\"success-modal-close-button\" class=\"close\" ng-click=\"closeModal()\" data-dismiss=\"modal\">\n" +
    "			<span aria-hidden=\"true\" id=\"success-modal-close\">×</span><span class=\"sr-only\" id=\"success-modal-close-text\">{{'CLOSE' | translate }}</span>\n" +
    "		</button>\n" +
    "   		<h4 class=\"modal-title\" id=\"success-modal-label\">{{'SUCCESS' | translate}}</h4>\n" +
    "  	</div>\n" +
    "\n" +
    "  	<div class=\"modal-body review-modal\">\n" +
    "  		<form>\n" +
    "  			<div class=\"form-group row\">            \n" +
    "	          	<div class=\"col-sm-12\">\n" +
    "	          		<div class=\"\">\n" +
    "	          			<label class=\"control-label\" id=\"success-modal-desc\">{{'SUCCESS_DESC' | translate}}</label>\n" +
    "	          		</div>\n" +
    "	          		\n" +
    "	           	</div> \n" +
    "	        </div>\n" +
    "  			<div class=\"form-group row\" >            \n" +
    "	          	<div class=\"col-sm-12\">\n" +
    "	          		\n" +
    "	          		<small class=\"control-label\" id=\"success-modal-referred-emails\" ng-bind=\"referredEmails\"></small> \n" +
    "	          		\n" +
    "	           	</div> \n" +
    "	        </div>\n" +
    "  			<div class=\" row\">            \n" +
    "	          	<div class=\"col-sm-12\">\n" +
    "					* <span class=\"control-label\" id=\"success-modal-success-warning\"> {{'SUCCESS_WARNING' | translate}}</span>\n" +
    "	           	</div> \n" +
    "	        </div>\n" +
    "  			\n" +
    "	    </form>\n" +
    "	</div>\n" +
    "\n" +
    "	<div class=\"modal-footer\">\n" +
    "		<div class=\"clearfix\">\n" +
    "			<button type=\"button\" id=\"success-close-modal\" class=\"btn btn-primary pull-right\" ng-click=\"closeModal()\">{{'CLOSE' | translate }}</button>\n" +
    "		</div>\n" +
    "	</div> \n" +
    "</div>"
  );


  $templateCache.put('js/app/loyalty/templates/user_reward_program.html',
    "\n" +
    "<div ng-controller=\"LoyaltyUserCtrl\">\n" +
    "\n" +
    "	<div ng-if=\"thisUser.isUser\" ng-if=\"isConfigMaintained\">\n" +
    "\n" +
    "		\n" +
    "		<div class=\"segment\" ng-if=\"thisUser.isMember && configData.showReward\">			\n" +
    "			\n" +
    "			<div class=\"userBottomMargin\">		\n" +
    "						<span class=\"title\" id=\"rewards-enrolled-text\" translate=\"{{ 'ENROLLED' }}\" translate-values=\"{ programName: thisUser.program}\"></span> \n" +
    "			</div>\n" +
    "			<div class=\"row form-group userInfoRow desktopUserInfo\" >		\n" +
    "				<div class=\"col-sm-3 col-md-3\" ng-if=\"thisUser.loyaltyUser.referralCode \n" +
    "				&& configData.enableTellAFriend\">\n" +
    "						<span class=\"title\" id=\"referral-code-label\">{{'REFERRALCODE' | translate}} : </span> \n" +
    "						<span class=\"info\"><strong class=\"text-info\" id=\"my-referral-code\" ng-bind=\"thisUser.loyaltyUser.referralCode\">-</strong></span>\n" +
    "						<!-- <span class=\"\"><button class=\"btn btn-link\" ng-click=\"openReferralModal()\" ><span class=\"glyphicon glyphicon-envelope tell_a_friend_icon\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"{{'TELL_A_FRIEND' | translate}}\"></span></button></span> -->\n" +
    "						<button class=\"btn btn-primary btn-sm userMargin\" id=\"invite-friend-button\" ng-click=\"openReferralModal()\">{{'INVITE_FRIEND' | translate}}</button>\n" +
    "				</div>\n" +
    "\n" +
    "				<div class=\"hidden-xs col-sm-offset-1 col-sm-1 editLinkContainer\" ng-if=\"thisUser.isMember\">\n" +
    "					<a ng-click=\"openPreferredLanguageModal()\"><span id=\"edit-user-info\" class=\"glyphicon glyphicon-pencil\"></span></a>\n" +
    "				</div>\n" +
    "\n" +
    "				<div class=\"hidden-xs col-sm-3 col-md-3\" ng-if=\"thisUser.isMember\">\n" +
    "	                <span class=\"dataLabel\">{{'PREFERRED_LANGUAGE' | translate}}</span>\n" +
    "	                {{thisUser.loyaltyUser.preferredLanguage | translate}}\n" +
    "	                <span data-toggle=\"tooltip\" title=\"{{'PREFERRED_LANGUAGE_TOOLTIP' | translate}}\" class=\"glyphicon glyphicon-question-sign\"></span>\n" +
    "	            </div>\n" +
    "\n" +
    "\n" +
    "				<div class=\" col-sm-8 hidden-sm hidden-md hidden-lg\" ng-if=\"thisUser.isMember\">\n" +
    "					<div class=\"row\">\n" +
    "						\n" +
    "			            <div class=\"col-xs-8\">\n" +
    "			                <div class=\"mobileDataSection\">\n" +
    "			                    <span class=\"dataLabel locale\">{{'PREFERRED_LANGUAGE' | translate}}</span>\n" +
    "			                    {{thisUser.loyaltyUser.preferredLanguage | translate}}\n" +
    "			                    <span data-toggle=\"tooltip\" title=\"{{'PREFERRED_LANGUAGE_TOOLTIP' | translate}}\" class=\"glyphicon glyphicon-question-sign\"></span>\n" +
    "			                </div>\n" +
    "\n" +
    "			            </div>\n" +
    "			            <div class=\"col-xs-4\">\n" +
    "			                <button class=\"btn btn-secondary btn-md pull-right\" ng-click=\"openPreferredLanguageModal()\">{{'EDIT' | translate}}</button>\n" +
    "			            </div>\n" +
    "		            </div>\n" +
    "\n" +
    "				</div>\n" +
    "\n" +
    "			</div>\n" +
    "\n" +
    "\n" +
    "			<div ng-if=\"displayRewardInfo\">\n" +
    "\n" +
    "				<div id=\"redeem-text-info\" class='textInfo floatRight' translate=\"{{ 'REEDEEM_TEXT_INFO' }}\" translate-values=\"{ redeemPoints: totalRedeemablePoints}\"></div>\n" +
    "				<br>	\n" +
    "				<div class=\"progress-container\">\n" +
    "\n" +
    "					<progressbar id=\"points-progress-bar\" value=\"dynamicValue\" type=\"primary\">\n" +
    "						\n" +
    "\n" +
    "					</progressbar> \n" +
    "\n" +
    "					<span id=\"user-tier\" class=\"floatleft padleft10px info\" translate=\"{{ 'USER_TIER' }}\" translate-values=\"{ userTier: userPresentTier}\"></span>\n" +
    "					<span id=\"next-tier\" ng-if=\"dispNextTierFlag\" class=\"floatRight padright10px info\" translate=\"{{ 'REEDEEM_TEXT_INFO_1' }}\" translate-values=\"{ remainingPoints: remainingPoints, upgradadableTier: updagradableTier}\"></span>	\n" +
    "				</div>\n" +
    "\n" +
    "			</div>\n" +
    "\n" +
    "			<div class=\"row marginTop100\">\n" +
    "\n" +
    "					<div class=\" col-sm-1\" ng-if=\"showAddToAppleWallet\">\n" +
    "						<a ng-href=\"{{appleWalletUrl}}\" class=\"icon pull-left\">\n" +
    "			                <span> <img src=\"img/Add_to_Apple_Wallet_rgb_US-UK.svg\"> </span>\n" +
    "			            </a>\n" +
    "			        </div>\n" +
    "\n" +
    "					<div class=\" col-sm-2\">\n" +
    "						<div id=\"saveToWallet\"></div>\n" +
    "					</div>	\n" +
    "\n" +
    "					\n" +
    "			</div>\n" +
    "\n" +
    "		</div>\n" +
    "\n" +
    "				\n" +
    "\n" +
    "		\n" +
    "\n" +
    "\n" +
    "		<div class=\"form-group\" ng-if=\"!thisUser.isMember && configData.showReward\">\n" +
    "			<button class=\"btn btn-primary\" id=\"get-membership-button\" ng-click=\"getLoyaltyProgramMembership()\"  translate=\"{{ 'SIGN_UP_TITLE_PROGRAM_NAME' }}\" translate-values=\"{ programName: userProgramName}\"></button>\n" +
    "		</div>	\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "	</div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/loyalty/templates/write_product_review.html',
    "<div  ng-if=\"isConfigMaintained\">\n" +
    "\n" +
    "    <div class=\"modal-header\">\n" +
    "        <button id=\"write-review-close-button\" type=\"button\" class=\"close\" ng-click=\"closeModal()\" data-dismiss=\"modal\">\n" +
    "            <span aria-hidden=\"true\" id=\"write-review-close\">×</span><span class=\"sr-only\" id=\"write-review-close-text\">{{'CLOSE' | translate}}</span>\n" +
    "        </button>\n" +
    "        <h4 class=\"modal-title\" id=\"write-review-product-name\" translate=\"{{ 'RATE_REVIEW' }}\" translate-values=\"{ product: product.product.name}\"></h4>\n" +
    "    </div>\n" +
    "    <div class=\"modal-body review-modal\">\n" +
    "        <form>\n" +
    "            <div class=\"form-group row\">\n" +
    "                <div class=\"col-sm-12\">\n" +
    "                    <div class=\"row\">\n" +
    "                        <div class=\"col-sm-12\">\n" +
    "\n" +
    "                            <label class=\"control-label pull-left\" id=\"write-review-ratingText\">{{'RATING' | translate}}</label>\n" +
    "                            <strong ng-if=\"thisUser.isMember && loyaltyConfig.showReward && showRatingPoint\"><span ng-show=\"thisUser.loyaltyUser.memberId\" class=\"userMargin pull-right \" id=\"write-review-ratingPointText\" ng-class=\"{ 'earnPointText' : review.rating===0,'earnedPointText' : review.rating > 0 }\" translate=\"{{ 'ADVOCACY_POINTS' }}\" translate-values=\"{ point: ratingPoint}\"></span></strong>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    <div class=\"form-group row\">\n" +
    "                        <div class=\"col-sm-12\">\n" +
    "                            <rating class=\"product-rating\" ng-model=\"review.rating\" max=\"5\" id=\"write-review-ratings\"></rating>\n" +
    "                            <strong ng-show=\"review.rating > 0\"><span class=\"userMargin\" id=\"write-review-ratingTextInfo-1\">{{ratingText[review.rating]|translate}}</span></strong>\n" +
    "                            <strong ng-show=\"errorRating\" class=\"text-danger\" ng-hide=\"review.rating > 0 || !errorRating\"><span class=\"userMargin\" id=\"write-review-ratingTextInfo-2\">{{ratingText[review.rating]|translate}}</span></strong>\n" +
    "\n" +
    "                        </div>\n" +
    "                        \n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"form-group row\">\n" +
    "                <div class=\"col-sm-12\">\n" +
    "                    <label class=\"control-label pull-left\" id=\"write-review-labelText\">{{'WRITE_A_REVIEW' | translate}}</label>\n" +
    "                    <strong ng-if=\"thisUser.isMember && loyaltyConfig.showReward && showReviewPoint\"><span ng-show=\"thisUser.loyaltyUser.memberId\" class=\"userMargin pull-right\" id=\"write-review-reviewPointText\" translate=\"{{ 'ADVOCACY_POINTS' }}\" translate-values=\"{ point: reviewPoint}\" ng-class=\"{ 'earnPointText' : review.reviewComment==='','earnedPointText' : review.reviewComment!==''}\" ></span></strong>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"form-group row\">\n" +
    "                <div class=\"col-sm-12\">\n" +
    "                    <input type=\"text\" id=\"write-review-reviewTitle\" ng-model=\"review.reviewTitle\" placeholder=\"{{'REVIEW_TITLE' | translate }}\" class=\"form-control\" />\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"form-group row\">\n" +
    "                <div class=\"col-sm-12\">\n" +
    "                    <textarea ng-model=\"review.reviewComment\" id=\"write-review-reviewComment\" placeholder=\"{{'REVIEW_DESC' | translate }}\" class=\"form-control\"></textarea>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </form>\n" +
    "    </div>\n" +
    "    <div class=\"modal-footer\">\n" +
    "        <div class=\"clearfix\">\n" +
    "            <button type=\"button\" class=\"btn btn-default pull-left\" id=\"write-review-noThanksButton\" ng-click=\"closeModal()\">{{'NO_THANKS' | translate}}</button>\n" +
    "            <button type=\"submit\" class=\"btn btn-primary pull-right\" id=\"write-review-submitButton\" ng-click=\"postReviewRating(review)\" ng-disabled=\"disabledSave\">{{'SUBMIT' | translate}}</button>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/products/templates/product-attribute-group.html',
    "<product-attribute ng-repeat=\"(key, prop) in properties\"\n" +
    "                   ng-if=\"group.attributes[key]\"\n" +
    "                   definition=\"prop.oneOf[0]\"\n" +
    "                   value=\"group.attributes[key]\"></product-attribute>"
  );


  $templateCache.put('js/app/products/templates/product-attribute-groups.html',
    "<product-attribute-group ng-repeat=\"attributeGroup in attributeGroups\"\n" +
    "                         group=\"attributeGroup\"></product-attribute-group>"
  );


  $templateCache.put('js/app/products/templates/product-attribute.html',
    "<div class=\"row\">\n" +
    "    <div class=\"col-xs-6\">\n" +
    "        <strong>{{definition.title}}</strong>\n" +
    "    </div>\n" +
    "\n" +
    "    <div class=\"col-xs-6\">\n" +
    "        <span ng-switch=\"definition.type\">\n" +
    "            <span ng-switch-when=\"string\">\n" +
    "                <span ng-switch=\"definition.format\">\n" +
    "                    <span ng-switch-when=\"date\">{{value | date:dateFormatting.date}}</span>\n" +
    "\n" +
    "                    <span ng-switch-when=\"time\">{{value | date:dateFormatting.time}}</span>\n" +
    "\n" +
    "                    <span ng-switch-when=\"date-time\">{{value | date:dateFormatting.dateTime}}</span>\n" +
    "\n" +
    "                    <span ng-switch-default>{{value}}</span>\n" +
    "                </span>\n" +
    "            </span>\n" +
    "\n" +
    "            <span ng-switch-when=\"boolean\">\n" +
    "                <span ng-if=\"value\" class=\"glyphicon glyphicon-ok\"></span>\n" +
    "                <span ng-if=\"!value\" class=\"glyphicon glyphicon-remove\"></span>\n" +
    "            </span>\n" +
    "\n" +
    "            <span ng-switch-default>{{value}}</span>\n" +
    "        </span>\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/products/templates/product-detail.html',
    "\n" +
    "<!-- bread crumbs -->\n" +
    "<ybreadcrumb yitem=\"breadcrumbData\" size=\"'small'\"></ybreadcrumb>\n" +
    "\n" +
    "<div class=\"productDetailsContainer\" ng-cloak>\n" +
    "    <section class=\"white\">\n" +
    "        <div class=\"row\">\n" +
    "\n" +
    "            <!-- product gallery -->\n" +
    "            <div class=\"col-md-6\">\n" +
    "                <div class=\"product-gallery\">\n" +
    "                    <div class=\"row\">\n" +
    "                        <product-img-carousel images=\"product.product.media\"></product-img-carousel>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "            <!-- product details -->\n" +
    "            <div class=\"col-md-6\">\n" +
    "                <div class=\"product-details text-center\">\n" +
    "                    \n" +
    "                    <!-- product name -->\n" +
    "                    <h1 class=\"pageTitle\">{{product.product.name}}</h1>\n" +
    "\n" +
    "                    <!-- product sale price -->\n" +
    "                    <div ng-if=\"product.prices[0].salePrice\" class=\"price\">\n" +
    "                        <span class=\"price originalPrice\"><strike>{{ product.prices[0].originalAmount | currency: currencySymbol }}</strike></span>\n" +
    "                        <span class=\"price salesPrice\">{{product.prices[0].effectiveAmount | currency: currencySymbol}}</span>\n" +
    "                        <span class=\"priceUnit salesPrice\" ng-if=\"product.prices[0].measurementUnit\">{{product.prices[0].measurementUnit.quantity}} {{product.prices[0].measurementUnit.unitCode}}</span>\n" +
    "                    </div>\n" +
    "\n" +
    "                    <!-- product price -->\n" +
    "                    <div ng-if=\"!product.prices[0].salePrice\" class=\"price\">\n" +
    "                        <span class=\"price\">{{product.prices[0].effectiveAmount | currency: currencySymbol}}</span>\n" +
    "                        <span class=\"priceUnit\" ng-if=\"product.prices[0].measurementUnit\">{{product.prices[0].measurementUnit.quantity}} {{product.prices[0].measurementUnit.unitCode}}</span>\n" +
    "                    </div>\n" +
    "                    \n" +
    "                    <!-- product detials -->\n" +
    "                    <div class=\"product-detail-text\" ng-if=\"hasAnyOfAttributesSet(product.product)\">\n" +
    "                        <product-attribute-groups product=\"product.product\"></product-attribute-groups>\n" +
    "                    </div>\n" +
    "    \n" +
    "                    <!-- product tax -->\n" +
    "                    <div class=\"taxMessage\" ng-if=\"!!taxConfiguration && taxConfiguration.label\">\n" +
    "                        {{taxConfiguration.label}}\n" +
    "                    </div>\n" +
    "                      <div class=\"review-rating\" ng-include src=\"'js/app/loyalty/templates/product_rating.html'\"></div>\n" +
    "                    <form action=\"\" class=\"cartPanel\">\n" +
    "\n" +
    "                        <!-- product quantity -->\n" +
    "                        <div class=\"row\" >\n" +
    "                            <div class=\"col-md-4 col-md-offset-4\">\n" +
    "                                <div class=\"form-group input-group qty\">\n" +
    "                                    <label class=\"input-group-addon control-label\" for=\"qty\" >{{'QTY' | translate}}: </label>\n" +
    "                                    <input quantity-input type=\"number\" id=\"qty\" ng-max=\"10000000\" min=\"1\" step=\"1\" pattern=\"\\d*\" class=\"form-control quantity\"\n" +
    "                                        ng-model=\"productDetailQty\" ng-change=\"changeQty(event)\">\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                        </div>  \n" +
    "    \n" +
    "                        <div class=\"row\">\n" +
    "\n" +
    "                            <!-- error notification -->\n" +
    "                            <div ng-if=\"error\" class=\"col-md-12 col-lg-12\">\n" +
    "                                <div class=\"error\" >\n" +
    "                                    <small class=\"help-inline has-error\">\n" +
    "                                        {{'ERROR_ADDING_TO_CART' | translate}}\n" +
    "                                    </small>\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "\n" +
    "                            <!-- add to cart -->\n" +
    "                            <div  class=\"col-md-12 col-lg-12 buyButton\">\n" +
    "                                <button id=\"buy-button\" ng-show=\"{{product.product.mixins.inventory.inStock}}\" class=\"btn btn-primary \" ng-click=\"addToCartFromDetailPage()\" ng-disabled=\"!buyButtonEnabled\">{{'ADD_TO_CART' | translate}}</button>\n" +
    "                                <button id=\"out-of-stock-btn\" ng-show=\"{{!product.product.mixins.inventory.inStock}}\" class=\"btn btn-default\" disabled>{{'OUT_OF_STOCK' | translate}}</button>\n" +
    "                            </div>\n" +
    "                            \n" +
    "                            <!-- shipping rates -->\n" +
    "                            <div class=\"col-xs-12 shipping-rate\" ng-if=\"!noShippingRates\">\n" +
    "                                <a href=\"\"><span ng-click=\"showShippingRates()\">Shipping Rates</span></a>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                    </form>\n" +
    "\n" +
    "                 <div class=\"reward-points\" ng-include src=\"'js/app/loyalty/templates/reward_points_product_details.html'\"></div>\n" +
    "                    \n" +
    "                </div> \n" +
    "            </div>\n" +
    "\n" +
    "        </div>\n" +
    "    </section>\n" +
    "\n" +
    "    <section class=\"gray\">\n" +
    "        <div class=\"row\">\n" +
    "\n" +
    "            <!-- product description -->\n" +
    "            <div class=\"headline text-center\">{{'PRODUCT_DESCRIPTION' | translate}}</div>\n" +
    "            <div class=\"col-md-8 col-md-offset-2\">\n" +
    "                <div class=\"description\">\n" +
    "                    {{product.product.description}}\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            \n" +
    "        </div>\n" +
    "    </section>\n" +
    "</div>\n" +
    "\n" +
    "<script src=\"js/vendor-static/jquery.min.js\"></script>\n" +
    "<script src=\"js/vendor-static/bootstrap.min.js\"></script>\n" +
    "<script src=\"js/vendor-static/owl.carousel.js\"></script>\n" +
    "<script src=\"js/vendor-static/img-touch-canvas.js\"></script>\n" +
    "<script src=\"js/vendor-static/jquery.fullscreen-min.js\"></script>\n" +
    "<script src=\"js/vendor-static/main.js\"></script>\n" +
    "\n" +
    "\n"
  );


  $templateCache.put('js/app/products/templates/product-img-carousel.html',
    "<div class=\"row image-carousel\">\n" +
    "    <div class=\"col-md-10 main-image-container\">\n" +
    "        <div class=\"product-images\">   \n" +
    "            <img id=\"{{$index}}\" class=\"product-image\" ng-repeat=\"image in images\" ng-src=\"{{image.url}}\" alt=\"\" fullscreen>        \n" +
    "        </div>\n" +
    "        <div class=\"zoom\">\n" +
    "            <span class=\"glyphicon hyicon hyicon-plus hidden-xs hidden-sm\" ng-click=\"enlargeImage()\"></span>\n" +
    "        </div>\n" +
    "        <div class=\"hidden-lg hidden-md mobileThumbs\">\n" +
    "            <div ng-repeat=\"thumb in images\" ng-class=\"{'active': currentIndex === $index}\" ng-click=\"moveCarousel($index)\">\n" +
    "                <span></span>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "    <div class=\"col-md-2 hidden-xs hidden-sm\">\n" +
    "        <div class=\"thumbnails\">\n" +
    "            <a ng-repeat=\"thumb in images\">\n" +
    "                <img class=\"\" ng-class=\"{'active': currentIndex === $index}\" ng-src=\"{{thumb.url}}\" alt=\"\" ng-click=\"moveCarousel($index)\">\n" +
    "            </a>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/products/templates/product-list.html',
    "<!-- directive: force-scroll -->\n" +
    "<div ng-cloak>\n" +
    "\n" +
    "    <!-- hero spot -->\n" +
    "    <div class=\"hero-unit\" ng-if=\"mainCategoryImage\">\n" +
    "        <blockquote ng-style=\"{ 'background-image': 'url(\\'{{mainCategoryImage.url}}\\' )','background-position':'0 0'}\">\n" +
    "            <p>{{store.name}}</p>\n" +
    "        </blockquote>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- refinement section -->\n" +
    "    <div class=\"refine-section\">\n" +
    "        <div class=\"row\">\n" +
    "            <div class=\"content-container\">\n" +
    "\n" +
    "                <div class=\"clearfix visible-sm\"></div>\n" +
    "\n" +
    "                <!-- sort control -->\n" +
    "                <div class=\"col-xs-7 col-sm-6 col-md-4 col-lg-3\">\n" +
    "                    <div class=\"sortContainer product-list-sort\">\n" +
    "                        <div class=\"name pull-left\">{{'SORT_BY' | translate}}:</div>\n" +
    "                        <div class=\"form-group pull-left\">\n" +
    "                            <label for=\"\" class=\"sr-only\">{{'SORT_BY' | translate}}:</label>\n" +
    "\n" +
    "                            <div class=\"custom-select-container\">\n" +
    "                                <ui-select ng-model=\"sort.selected\" on-select=\"setSortedPage($item.id)\">\n" +
    "                                    <ui-select-match>\n" +
    "                                        {{$select.selected.name}}\n" +
    "                                    </ui-select-match>\n" +
    "                                    <ui-select-choices repeat=\"item.id as item in (sortParams | filter: $select.search)\">\n" +
    "                                        <span ng-bind=\"item.name\"></span>\n" +
    "                                    </ui-select-choices>\n" +
    "                                </ui-select>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "\n" +
    "                <!-- pagination control -->\n" +
    "                <div class=\"col-xs-5 col-sm-6 col-md-6 col-lg-3 pull-right\">\n" +
    "                    <div class=\"viewingContainer\">\n" +
    "                        <span class=\"name\">{{'VIEWING' | translate}}</span>\n" +
    "                        <span class=\"page-indicator\"\n" +
    "                             translate=\"PRODUCTS_FROM_TO\"\n" +
    "                             translate-compile\n" +
    "                             translate-values=\"{productsFrom: '{{pagination.productsFrom}}', productsTo: '{{pagination.productsTo}}', total: '{{total}}'}\"></span>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <!-- bread crumbs -->\n" +
    "    <ybreadcrumb yitem=\"category\" size=\"large\"></ybreadcrumb>\n" +
    "\n" +
    "    <section class=\"white\">\n" +
    "\n" +
    "        <!-- page title -->\n" +
    "        <div class=\"row\">\n" +
    "            <div class=\"col-xs-12 text-center\">\n" +
    "                <h1 class=\"pageTitle productListTitle\"><span ng-if=\"category.name\">{{ category.name }}</span><span ng-if=\"!category.name\">{{ 'ALL_PRODUCTS' | translate }}</span></h1>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- sticky refinements bar -->\n" +
    "        <div id=\"refineAffix\" class=\"refine-section responsive-fixed\">\n" +
    "            <div class=\"row\">\n" +
    "                <div class=\"content-container\">\n" +
    "                    <div class=\"clearfix visible-sm\"></div>\n" +
    "\n" +
    "                    <!-- sort control -->\n" +
    "                    <div class=\"col-xs-7 col-sm-6 col-md-4 col-lg-2\">\n" +
    "                        <div class=\"sortContainer product-list-sort\">\n" +
    "                            <div class=\"name pull-left\">{{'SORT_BY' | translate}}:</div>\n" +
    "                            <div class=\"form-group pull-left\">\n" +
    "                                <label for=\"\" class=\"sr-only\">{{'SORT_BY' | translate}}:</label>\n" +
    "\n" +
    "                                <div>\n" +
    "                                    <span class=\"custom-select-container\">\n" +
    "                                        <ui-select ng-model=\"sort.selected\" on-select=\"setSortedPage($item.id)\">\n" +
    "                                            <ui-select-match>\n" +
    "                                                {{$select.selected.name}}\n" +
    "                                            </ui-select-match>\n" +
    "                                            <ui-select-choices repeat=\"item.id as item in (sortParams | filter: $select.search)\">\n" +
    "                                                <span ng-bind=\"item.name\"></span>\n" +
    "                                            </ui-select-choices>\n" +
    "                                        </ui-select>\n" +
    "                                    </span>\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "\n" +
    "                    <!-- pagination control -->\n" +
    "                    <div class=\"col-xs-5 col-sm-6 col-md-6 col-lg-3 pull-right\">\n" +
    "                        <div class=\"viewingContainer\">\n" +
    "                            <div class=\"name\">{{'VIEWING' | translate}}</div>\n" +
    "                            <div class=\"page-indicator\" translate=\"PRODUCTS_FROM_TO\" translate-compile\n" +
    "                                 translate-values=\"{productsFrom: '{{pagination.productsFrom}}', productsTo: '{{pagination.productsTo}}', total: '{{total}}'}\"></div>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- Note:  infinite-scroll directive must not be combined with ng-repeat:  http://binarymuse.github.io/ngInfiniteScroll/faq.html  -->\n" +
    "\n" +
    "        <div class=\"row product-grid\" infinite-scroll=\"addMore()\" infinite-scroll-distance=\"0\"\n" +
    "         infinite-scroll-immediate-check=\"false\"\n" +
    "         infinite-scroll-data=\"pagination\" ng-cloak\n" +
    "         infinite-scroll-visible-items>\n" +
    "        <div class=\"item col-xs-12 col-sm-6 col-md-4 col-lg-3\" ng-repeat=\"product in products\"\n" +
    "             on-finish-render-ng-repeat on-finish-render-ng-repeat-event=\"initialViewportCheck\">\n" +
    "\n" +
    "            <a id=\"p_{{product.product.id}}\" ng-click=\"openProductDetails(product.product.id)\" ui-sref=\"base.product.detail({ 'lastCatId': lastCatId, 'productId': product.product.id })\">\n" +
    "\n" +
    "                <div class=\"thumb\">\n" +
    "                    <img ng-src=\"{{ product && product.product.mainImageURL || PLACEHOLDER_IMAGE}}\" alt=\"\">\n" +
    "                </div>\n" +
    "                <div class=\"productInfoContainer text-center\">\n" +
    "                    <div class=\"name\">{{ product.product.name }}</div>\n" +
    "                    <div ng-if=\"prices[product.product.id].salePrice\" class=\"price\">\n" +
    "                            <span class=\"price originalPrice\"><strike>{{ prices[product.product.id].originalAmount | currency: currencySymbol }}</strike></span>\n" +
    "                            <span class=\"price salesPrice\">{{prices[product.product.id].effectiveAmount | currency: currencySymbol}}</span>\n" +
    "                            <span class=\"priceUnit salesPrice\" ng-if=\"prices[product.product.id].measurementUnit\">{{prices[product.product.id].measurementUnit.quantity}} {{prices[product.product.id].measurementUnit.unitCode}}</span>\n" +
    "                    </div>\n" +
    "                    <div ng-if=\"!prices[product.product.id].salePrice\" class=\"price\">\n" +
    "                        <span class=\"price\">{{prices[product.product.id].effectiveAmount | currency: currencySymbol}}</span>\n" +
    "                        <span class=\"priceUnit\" ng-if=\"prices[product.product.id].measurementUnit\">{{prices[product.product.id].measurementUnit.quantity}} {{prices[product.product.id].measurementUnit.unitCode}}</span>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </a>\n" +
    "        </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- back to top button -->\n" +
    "        <button type=\"button\" id=\"to-top-btn\" ng-click=\"backToTop()\" class=\"btn btn-link back-to-top-button pull-left menu\">\n" +
    "            <span class=\"hyicon hyicon-chevron-bold-up\" />\n" +
    "        </button>\n" +
    "\n" +
    "    </section>\n" +
    "</div>\n" +
    "\n" +
    "<script src=\"js/vendor-static/img-touch-canvas.js\"></script>\n" +
    "<script src=\"js/vendor-static/jquery.fullscreen-min.js\"></script>\n" +
    "<script src=\"js/vendor-static/main.js\"></script>\n"
  );


  $templateCache.put('js/app/search/templates/search-list.html',
    "<!-- directive: force-scroll -->\n" +
    "<div ng-cloak>\n" +
    "\n" +
    "    <div ng-if=\"total === 0\">\n" +
    "        <div class=\"refine-section\" ng-cloak>\n" +
    "            <div class=\"row\">\n" +
    "                <div ng-if=\"!category.name\" class=\"col-xs-12 col-sm-6  title\">{{total}} {{ 'RESULTS' | translate }}</div>\n" +
    "            </div>\n" +
    "            <div class=\"row\">\n" +
    "                <div class=\"text-center\">\n" +
    "                    <div translate=\"FOUND_FOR\" translate-compile translate-values=\"{total: '{{total}}', searchString: '{{searchString}}'}\"></div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"row continueShoppingBtn\">\n" +
    "                <a ui-sref=\"base.category\" class=\"btn btn-primary btn-large btn-block\">{{'CONTINUE_SHOPPING' | translate}}</a>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <div ng-if=\"total > 0\">\n" +
    "\n" +
    "        <!-- refinement section -->\n" +
    "        <div class=\"refine-section\">\n" +
    "            <div class=\"row\">\n" +
    "                <div class=\"content-container\">\n" +
    "                    <div class=\"clearfix visible-sm\"></div>\n" +
    "\n" +
    "                    <!-- sort control -->\n" +
    "                    <div class=\"col-xs-7 col-sm-6 col-md-4 col-lg-3\">\n" +
    "                        <div class=\"sortContainer search-list-sort\">\n" +
    "                            <div class=\"name pull-left\">{{'SORT_BY' | translate}}:</div>\n" +
    "                            <div class=\"form-group pull-left\">\n" +
    "                                <label for=\"\" class=\"sr-only\">{{'SORT_BY' | translate}}:</label>\n" +
    "\n" +
    "                                <div class=\"custom-select-container\">\n" +
    "                                    <ui-select ng-model=\"sort.selected\" on-select=\"setSortedPage($item.id)\">\n" +
    "                                        <ui-select-match>\n" +
    "                                            {{$select.selected.name}}\n" +
    "                                        </ui-select-match>\n" +
    "                                        <ui-select-choices repeat=\"item.id as item in (sortParams | filter: $select.search)\">\n" +
    "                                            <span ng-bind=\"item.name\"></span>\n" +
    "                                        </ui-select-choices>\n" +
    "                                    </ui-select>\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "\n" +
    "                    <!-- pagination control -->\n" +
    "                    <div class=\"col-xs-5 col-sm-6 col-md-6 col-lg-3 pull-right\">\n" +
    "                        <div class=\"viewingContainer\">\n" +
    "                            <span class=\"name\">{{'VIEWING' | translate}}</span>\n" +
    "                            <span class=\"page-indicator\"\n" +
    "                                  translate=\"PRODUCTS_FROM_TO\"\n" +
    "                                  translate-compile\n" +
    "                                  translate-values=\"{productsFrom: '{{pagination.productsFrom}}', productsTo: '{{pagination.productsTo}}', total: '{{total}}'}\"></span>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- bread crumbs -->\n" +
    "        <ybreadcrumb yitem=\"category\" size=\"'large'\"></ybreadcrumb>\n" +
    "\n" +
    "        <section class=\"white\">\n" +
    "\n" +
    "            <!-- page title -->\n" +
    "            <div class=\"row\">\n" +
    "                <div class=\"col-xs-12 text-center\">\n" +
    "                    <h1 class=\"pageTitle productListTitle\"><span translate=\"FOUND_FOR\" translate-values=\"{total: total, searchString: searchString}\"></span></h1>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "            <!-- sticky refinements bar -->\n" +
    "            <div id=\"refineAffix\" class=\"refine-section responsive-fixed\">\n" +
    "                <div class=\"row\">\n" +
    "                    <div class=\"content-container\">\n" +
    "                        <div class=\"clearfix visible-sm\"></div>\n" +
    "\n" +
    "                        <!-- sort control -->\n" +
    "                        <div class=\"col-xs-7 col-sm-6 col-md-4 col-lg-3\">\n" +
    "                            <div class=\"sortContainer search-list-sort\">\n" +
    "                                <div class=\"name pull-left\">{{'SORT_BY' | translate}}:</div>\n" +
    "                                <div class=\"form-group pull-left\">\n" +
    "                                    <label for=\"\" class=\"sr-only\">{{'SORT_BY' | translate}}:</label>\n" +
    "\n" +
    "                                    <div class=\"custom-select-container\">\n" +
    "                                        <ui-select ng-model=\"sort.selected\" on-select=\"setSortedPage($item.id)\">\n" +
    "                                            <ui-select-match>\n" +
    "                                                {{$select.selected.name}}\n" +
    "                                            </ui-select-match>\n" +
    "                                            <ui-select-choices repeat=\"item.id as item in (sortParams | filter: $select.search)\">\n" +
    "                                                <span ng-bind=\"item.name\"></span>\n" +
    "                                            </ui-select-choices>\n" +
    "                                        </ui-select>\n" +
    "                                    </div>\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "\n" +
    "                        <!-- pagination control -->\n" +
    "                        <div class=\"col-xs-5 col-sm-6 col-md-6 col-lg-3 pull-right\">\n" +
    "                            <div class=\"viewingContainer\">\n" +
    "                                <span class=\"name\">{{'VIEWING' | translate}}</span>\n" +
    "                                <span class=\"page-indicator\"\n" +
    "                                      translate=\"PRODUCTS_FROM_TO\"\n" +
    "                                      translate-compile\n" +
    "                                      translate-values=\"{productsFrom: '{{pagination.productsFrom}}', productsTo: '{{pagination.productsTo}}', total: '{{total}}'}\"></span>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"row product-grid\" infinite-scroll=\"addMore()\" infinite-scroll-distance=\"0\"\n" +
    "                 infinite-scroll-immediate-check=\"false\"\n" +
    "                 infinite-scroll-data=\"pagination\" ng-cloak\n" +
    "                 infinite-scroll-visible-items>\n" +
    "                <div class=\"item col-xs-12 col-sm-6 col-md-4 col-lg-3\" ng-repeat=\"product in products\"\n" +
    "                     on-finish-render-ng-repeat on-finish-render-ng-repeat-event=\"initialViewportCheck\">\n" +
    "                    <a id=\"p_{{product.product.id}}\" ng-click=\"openProductDetails(product.product.id)\" ui-sref=\"base.product.detail( {productId: product.product.id, lastCatId: lastCatId} )\">\n" +
    "\n" +
    "                        <div class=\"thumb\">\n" +
    "                            <img ng-src=\"{{ product && product.product.mainImageURL || PLACEHOLDER_IMAGE}}\" alt=\"\">\n" +
    "\n" +
    "                        </div>\n" +
    "                        <div class=\"productInfoContainer text-center\">\n" +
    "                            <div class=\"name\">{{ product.product.name }}</div>\n" +
    "                            <div ng-if=\"!prices[product.product.id].measurementUnit\" class=\"price\">{{ prices[product.product.id].effectiveAmount | currency: currencySymbol}}</div>\n" +
    "                            <div ng-if=\"prices[product.product.id].measurementUnit\" class=\"price\">\n" +
    "                                <span class=\"price\">{{prices[product.product.id].effectiveAmount | currency: currencySymbol}}</span>\n" +
    "                                <span class=\"priceUnit\">{{prices[product.product.id].measurementUnit.quantity}} {{prices[product.product.id].measurementUnit.unitCode}}</span>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                    </a>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "            <button type=\"button\" id=\"to-top-btn\" ng-click=\"backToTop()\" class=\"btn btn-link back-to-top-button pull-left menu\">\n" +
    "                <span class=\"hyicon hyicon-chevron-bold-up\" />\n" +
    "            </button>\n" +
    "        </section>\n" +
    "\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "</div>\n" +
    "\n" +
    "\n" +
    "<script src=\"js/vendor-static/img-touch-canvas.js\"></script>\n" +
    "<script src=\"js/vendor-static/jquery.fullscreen-min.js\"></script>\n" +
    "<script src=\"js/vendor-static/main.js\"></script>\n"
  );


  $templateCache.put('js/app/shared/directives/site-selector/site-selector.html',
    "<div class=\"regionControls text-center\">\n" +
    "    <div class=\"controlcontainer\">\n" +
    "        <div class=\"dropdown\" ng-hide=\"sites.length == 1 && sites[0].languages.length == 1\">\n" +
    "            <a class=\" dropdown-toggle siteSelectorIcon\"\n" +
    "               ng-click=\"setHoveredSite(selectedSite)\">\n" +
    "                <img class=\"site-selector-icon\"\n" +
    "                     ng-src=\"{{GlobalData.store.icon || 'img/ico_default.png'}}\" />\n" +
    "            </a>\n" +
    "            <div class=\"dropdown-menu regionMenu\">\n" +
    "                <div class=\"row\">\n" +
    "                    <div class=\"col-xs-6\">\n" +
    "                        <ul class=\"list-unstyled regionControlList\">\n" +
    "                            <li ng-repeat=\"site in sites\" ng-class=\"{ 'selected':site.code === selectedSite.code, 'hovered': site.code === hoveredSite.code}\"\n" +
    "                                ng-click=\"selectSiteAndLanguage(site, site.defaultLanguage)\"\n" +
    "                                ng-mouseover=\"setHoveredSite(site)\">{{site.name}}</li>\n" +
    "                        </ul>\n" +
    "                    </div>\n" +
    "                    <div class=\"col-xs-6\">\n" +
    "                        <ul class=\"list-unstyled languageMenu\">\n" +
    "                            <li ng-repeat=\"lang in hoveredSite.languages\" ng-click=\"selectSiteAndLanguage(hoveredSite, lang)\"\n" +
    "                                ng-class=\"{ 'selected':(lang === selectedLanguage() && hoveredSite.code === selectedSite.code),\n" +
    "                                                   'defaultLang': (lang === hoveredSite.defaultLanguage && hoveredSite.code !== selectedSite.code)  }\">\n" +
    "                                {{lang | translate}}\n" +
    "                            </li>\n" +
    "                        </ul>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/shared/templates/footer.html',
    "<div class=\"pageFooter\">\n" +
    "    <div class=\"row\">\n" +
    "        <div class=\"col-xs-12 col-lg-6 socialIcons text-center\">\n" +
    "            <a href=\"https://www.facebook.com/hybrissoftware\"><span class=\"hyicon hyicon-social-facebook\"></span></a>\n" +
    "            <a href=\"https://twitter.com/hybris_software\"><span class=\"hyicon hyicon-social-twitter\"></span></a>\n" +
    "            <a href=\"https://www.pinterest.com/cspieker/hybris/\"><span class=\"hyicon hyicon-social-pinterest\"></span></a>\n" +
    "        </div>\n" +
    "        <div class=\"col-xs-12 col-lg-6 links text-center\">\n" +
    "\n" +
    "            <a href=\"#\">&copy; hybris YaaS</a>\n" +
    "            <span class=\"hidden\">\n" +
    "                /\n" +
    "                <a href=\"#\">{{'TERMS_AND_CONDITIONS' | translate}}</a>\n" +
    "                /\n" +
    "                <a href=\"#\">{{'CONTACT_US' | translate}}</a>\n" +
    "                /\n" +
    "                <a href=\"#\">{{'SITE_MAP' | translate}}</a>\n" +
    "            </span>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "</div>"
  );


  $templateCache.put('js/app/shared/templates/shipping-dialog.html',
    "<div class=\"modal-header shippingZoneModalHeader\" ng-cloak>\n" +
    "  <button type=\"button\" class=\"close\" ng-click=\"closeShippingZonesDialog()\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">{{'CLOSE' | translate}}</span></button>\n" +
    "  <h4 class=\"modal-title\" id=\"myModalLabel\">{{'SHIPPING_INFORMATION' | translate}}</h4>\n" +
    "</div>\n" +
    "<div class=\"shippingZoneModal modal-body\">\n" +
    "  <div class=\"row\">\n" +
    "    <div ng-if=\"zone.methods.length\" class=\"zoneparent col-xs-12\" ng-repeat=\"zone in shippingZones\">\n" +
    "        <div class=\"zonetitle\">\n" +
    "            <p class=\"label\">{{zone.name}}\n" +
    "            <p>{{'DESTINATION_COUNTRY' | translate}} - <span>{{zone.shipTo.join(', ')}}</span></p>\n" +
    "        </div>\n" +
    "        <div class=\"col-xs-12 zoneinfo\">\n" +
    "            <div class=\"row\" ng-repeat=\"method in zone.methods\">\n" +
    "                <div class=\"rangeCol col-xs-7\">\n" +
    "                    <p class=\"label\">{{method.name}}\n" +
    "                    <p ng-if=\"!$last\" ng-repeat=\"fee in method.fees\">{{fee.minOrderValue.amount}} - {{method.fees[$index + 1].minOrderValue.amount}} {{fee.cost.currency}}</p>\n" +
    "                    <p ng-if=\"$last\" ng-repeat=\"fee in method.fees\">{{fee.minOrderValue.amount}} - {{'NO_LIMIT' | translate}}</p>                \n" +
    "                </div>\n" +
    "                <div class=\"col-xs-5 text-right\">\n" +
    "                    <p class=\"title\">{{'SHIPPING_RATE' | translate}}</p>\n" +
    "                    <p ng-repeat=\"fee in method.fees\">{{fee.cost.amount}} {{fee.cost.currency}}</p>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/shared/templates/sidebar-navigation.html',
    "<ysearch></ysearch>\n" +
    "<div ng-cloak id=\"menu\">\n" +
    "    <ul class=\"navi\">\n" +
    "        <li ng-repeat=\"category in categories\" > <!-- class=\"has-sub\" -->\n" +
    "            <a ui-sref=\"base.category( {catName: category.slug} )\" class=\"mainCategory categoryLevel\" ng-click=\"hideMobileNav()\">\n" +
    "                {{ category.name  }}\n" +
    "            </a>\n" +
    "            <label for=\"secondarycategory{{$index}}\" class=\"toggle-sub\" onclick=\"\" ng-if=\"category.subcategories\">\n" +
    "                <span class=\"hyicon hyicon-chevron-thin-right\"></span>\n" +
    "            </label>\n" +
    "            <input type=\"checkbox\" id=\"secondarycategory{{$index}}\" class=\"sub-nav-check\" ng-if=\"category.subcategories\">\n" +
    "            <ul id=\"secondarycategory{{$index}}-sub\" class=\"sub-nav\" ng-if=\"category.subcategories\">\n" +
    "                <li class=\"sub-heading\">\n" +
    "                    <label for=\"secondarycategory{{$index}}\" class=\"toggle\" onclick=\"\" title=\"{{'BACK' | translate}}\"><span class=\"hyicon hyicon-chevron-thin-left\"></span></label>\n" +
    "                    {{category.name}}\n" +
    "                </li>\n" +
    "                <li ng-repeat=\"sub2 in category.subcategories\" >\n" +
    "                    <a data-ui-sref=\"base.category( {catName: sub2.slug} )\" class=\"secondaryCategory categoryLevel\" ng-class=\"{'noSubCategories': sub2.subcategories == undefined}\" ng-click=\"hideMobileNav()\">\n" +
    "                        {{sub2.name }}\n" +
    "                    </a>\n" +
    "                    <label for=\"tertiarycategory{{$index}}\" class=\"toggle-sub\" onclick=\"\" ng-if=\"sub2.subcategories\">\n" +
    "                        <span class=\"hyicon hyicon-chevron-thin-right\"></span>\n" +
    "                    </label>\n" +
    "                    <input type=\"checkbox\" id=\"tertiarycategory{{$index}}\" class=\"sub-nav-check\" ng-if=\"sub2.subcategories\">\n" +
    "                    <ul class=\"sub-nav\" id=\"tertiarycategory{{$index}}-sub\">\n" +
    "                        <li class=\"sub-heading\">\n" +
    "                            <label for=\"tertiarycategory{{$index}}\" class=\"toggle\" onclick=\"\" title=\"{{'BACK' | translate}}\"><span class=\"hyicon hyicon-chevron-thin-left\"></span></label>\n" +
    "                            {{sub2.name}}\n" +
    "                        </li>\n" +
    "                        <!-- more NG loops would happen here -->\n" +
    "                        <li ng-repeat=\"sub3 in sub2.subcategories\">\n" +
    "                            <a class=\"tertiaryLevel categoryLevel\" ui-sref=\"base.category( {catName: sub3.slug} )\" ng-click=\"hideMobileNav()\">{{ sub3.name }}</a>\n" +
    "                        </li>\n" +
    "                    </ul>\n" +
    "                </li>\n" +
    "            </ul>\n" +
    "        </li>\n" +
    "    </ul>\n" +
    "</div>\n" +
    "\n" +
    "<div class=\"authentication-cnt\">\n" +
    "    <div ng-if=\"user.isAuthenticated\" >\n" +
    "        <div class=\"signinContainer\">\n" +
    "            <div class=\"col-xs-3 text-right\">\n" +
    "                <a><img ng-src=\"{{user.image}}\" class=\"user-avatar socialAvatar\" ng-click=\"myAccount()\"></a>\n" +
    "            </div>\n" +
    "            <div class=\"col-xs-9 my-account-link\">\n" +
    "                <a href=\"\" class=\"my-profile\" ng-click=\"myAccount()\" title=\"{{'MY_ACCOUNT' | translate}}\">\n" +
    "                    {{'MY_ACCOUNT' | translate}}\n" +
    "                </a>\n" +
    "            </div>\n" +
    "            <div class=\"col-xs-offset-3 col-xs-9 logout-link text-left\">\n" +
    "                <a ng-click=\"logout()\" class=\"signout\">{{'SIGN_OUT' | translate}}</a>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        \n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "    <div ng-if=\"!user.isAuthenticated\">\n" +
    "        <div class=\"signinContainer signinContainer-sidebar\">\n" +
    "            <div class=\"my-account-link\">\n" +
    "                <a class=\"btn btn-link navbar-btn signin\" ng-click=\"login({windowClass:'mobileLoginModal'})\">\n" +
    "                    {{'SIGN_IN' | translate}}\n" +
    "                </a>\n" +
    "            </div>\n" +
    "\n" +
    "        </div>\n" +
    "\n" +
    "\n" +
    "        <div class=\"dropdown \">\n" +
    "            <a data-toggle=\"dropdown\" href=\"#\" class=\"btn btn-link navbar-btn signin pull-right\" ng-if=\"user.isAuthenticated\" >\n" +
    "                <img src=\"./img/user-icon_small_active.png\" class=\"user-avatar loggedin\">\n" +
    "            </a>\n" +
    "            <ul class=\"dropdown-menu\" class=\"pull-right\">\n" +
    "                <li><a href=\"\" class=\"logout\" ng-click=\"logout()\">{{'SIGN_OUT' | translate}}</a></li>\n" +
    "                <li class=\"divider\"></li>\n" +
    "                <li><a href=\"\" class=\"my-profile\" ng-click=\"myAccount()\">{{'MY_ACCOUNT' | translate}}</a></li>\n" +
    "            </ul>\n" +
    "        </div>\n" +
    "\n" +
    "    </div>\n" +
    "</div>\n" +
    "        \n" +
    "\n"
  );


  $templateCache.put('js/app/shared/templates/top-navigation.html',
    "<!-- mobile navigation only -->\n" +
    "<div class=\"mobileNav hidden-lg hidden-md visible-sm visible-xs\">\n" +
    "    <nav class=\"top-navigation row\" ng-cloak>\n" +
    "        \n" +
    "        \n" +
    "        <!-- hamburger menu -->\n" +
    "        <div class=\"col-xs-3\">\n" +
    "            <button type=\"button\" class=\"btn btn-link navbar-btn menu\" ng-click=\"toggleOffCanvas()\">\n" +
    "                <span class=\"hyicon hyicon-menu\"></span>\n" +
    "            </button>\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- logo -->\n" +
    "        <div class=\"col-xs-5 text-center\">\n" +
    "            <a class=\"logo\" ui-sref=\"base.home\"><img ng-src=\"{{GlobalData.store.logo || 'img/logo.png'}}\" alt=\"\"></a>\n" +
    "        </div>\n" +
    "        \n" +
    "        <!-- header right -->\n" +
    "        <div class=\"col-xs-4 text-right\">\n" +
    "            <div class=\"row\">\n" +
    "\n" +
    "                <!-- site selector -->\n" +
    "                <div class=\"col-xs-6\">\n" +
    "                    <div class=\"pull-right\">\n" +
    "                        <site-selector id=\"siteSelectorSmall\"></site-selector>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "\n" +
    "                <!-- cart button -->\n" +
    "                <div class=\"col-xs-6 text-center\">\n" +
    "                    <button type=\"button\" ng-if=\"isShowCartButton()\" id=\"mobile-cart-btn\" class=\"btn btn-link navbar-btn cart-button\"\n" +
    "                            ng-click=\"toggleCart()\">\n" +
    "                        <span class=\"shopping-bag\">\n" +
    "                            <span class=\"quantity\">{{ cart.totalUnitsCount || 0 }}</span>\n" +
    "                        </span>\n" +
    "                    </button>\n" +
    "                </div>\n" +
    "\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </nav>\n" +
    "</div>\n" +
    "\n" +
    "\n" +
    "<!-- dekstop navigation only -->\n" +
    "<div class=\"desktopNav hidden-xs hidden-sm visible-md visible-lg\">\n" +
    "    <div class=\"row info\">\n" +
    "\n" +
    "        <!-- logo -->\n" +
    "        <div class=\"col-xs-2 logo navbar-padding navbar-padding-left\">\n" +
    "            <a ui-sref=\"base.home\" class=\"logo\">\n" +
    "                <img ng-src=\"{{GlobalData.store.logo || 'img/logo.png'}}\" height=\"46\" alt=\"\" />\n" +
    "            </a>\n" +
    "        </div>\n" +
    "    \n" +
    "        <!-- search bar -->\n" +
    "        <div class=\"col-lg-7 col-md-6 col-sm-6 col-xs-6 search navbar-padding navbar-padding-left\" style=\"padding-right: 0px\">\n" +
    "            <ysearch></ysearch>\n" +
    "        </div>\n" +
    "        \n" +
    "        <!-- header right -->\n" +
    "        <div class=\"col-lg-3 col-md-4 col-sm-3 col-xs-4 cart navbar-padding navbar-padding-right\">\n" +
    "            <div class=\"row\">\n" +
    "\n" +
    "                <!-- signin button -->\n" +
    "                <div class=\"col-xs-6 col-md-6\">\n" +
    "                    <div class=\"text-center\">\n" +
    "                        <a id=\"login-btn\" ng-if=\"!user.isAuthenticated\" class=\"signin\" ng-click=\"login({windowClass:'mobileLoginModal'})\" href=\"#\">\n" +
    "                            {{'SIGN_IN' | translate}}\n" +
    "                        </a>\n" +
    "                    </div>\n" +
    "                    <div ng-if=\"user.isAuthenticated\">\n" +
    "                        <div class=\"signin-container \">\n" +
    "                            <div class=\"text-center dropdown\">\n" +
    "                                <a class=\"my-profile dropdown-toggle\" title=\"{{'MY_ACCOUNT' | translate}}\" id=\"my-account\">\n" +
    "                                    <img id=\"my-account-dropdown\" ng-src=\"{{user.image}}\" class=\"user-avatar socialAvatar\">\n" +
    "                                </a>\n" +
    "                                <ul class=\"dropdown-menu\">\n" +
    "                                    <li role=\"presentation\">\n" +
    "                                        <a role=\"menuitem\" id=\"my-account-link\" tabindex=\"-1\" href=\"#\" ng-click=\"myAccount()\">{{'MY_ACCOUNT' | translate}}</a>\n" +
    "                                    </li>\n" +
    "                                    <li class=\"divider\"></li>\n" +
    "                                    <li  role=\"presentation\" >\n" +
    "                                        <a  role=\"menuitem\" id=\"logout-btn\" tabindex=\"-1\" href=\"#\" ng-click=\"logout()\">{{'SIGN_OUT' | translate}}</a>\n" +
    "                                    </li>\n" +
    "                                </ul>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "\n" +
    "                <!-- site selector -->\n" +
    "                <div class=\"col-xs-3 col-md-3 text-center site-selector-container\">\n" +
    "                    <site-selector id=\"siteSelectorLarge\"></site-selector>\n" +
    "                </div>\n" +
    "\n" +
    "                <!-- cart icon -->\n" +
    "                <div class=\"col-xs-3 col-md-3 text-center checkout-btn-container\">\n" +
    "                    <button ng-if=\"isShowCartButton()\" type=\"button\" class=\"btn btn-link navbar-btn\" id=\"full-cart-btn\" ng-click=\"toggleCart()\" ng-cloak>\n" +
    "                        <span class=\"shopping-bag\">\n" +
    "                            <span class=\"quantity\">{{ cart.totalUnitsCount || 0 }}</span>\n" +
    "                        </span>\n" +
    "                    </button>\n" +
    "                </div>\n" +
    "\n" +
    "            </div>\n" +
    "\n" +
    "            <!-- what is this div for???  -->\n" +
    "            <div class=\"cart-and-account-container\"></div>\n" +
    "\n" +
    "            <!-- clear div -->\n" +
    "            <div class=\"clr\"></div>\n" +
    "\n" +
    "        </div>\n" +
    "    </div>\n" +
    "    <div class=\"row nav js-mainNav\">\n" +
    "        <div class=\"content-container\">\n" +
    "            <div class=\"navbar yamm navbar-default\">\n" +
    "                <ul class=\"nav navbar-nav\">\n" +
    "                    <li ng-repeat=\"top_category in categories\" class=\"dropdown yamm-fw\">\n" +
    "                        <!-- class=\"has-sub\" -->\n" +
    "                        <a ui-sref=\"base.category( {catName: top_category.slug} )\" class=\"js-megamenutoggle mainCategory categoryLevel\">\n" +
    "                            {{ top_category.name  }}\n" +
    "                            <ul class=\"dropdown-menu js-flyoutMenu\" ng-if=\"top_category.subcategories\">\n" +
    "                                <div ng-repeat=\"sub2 in top_category.subcategories\" class=\"col-xs-2\">\n" +
    "\n" +
    "                                    <a data-ui-sref=\"base.category( {catName: sub2.slug} )\" class=\"secondaryCategory categoryLevel\" ng-class=\"{'noSubCategories': sub2.subcategories == undefined}\">\n" +
    "                                        {{sub2.name }}\n" +
    "                                        <div class=\"tertiaryCategory\">\n" +
    "                                            <ul>\n" +
    "                                                <li ng-repeat=\"sub3 in sub2.subcategories\">\n" +
    "                                                    <a class=\"tertiaryLevel categoryLevel\" ui-sref=\"base.category( {catName: sub3.slug} )\">{{ sub3.name }}</a>\n" +
    "                                                </li>\n" +
    "                                            </ul>\n" +
    "                                        </div>\n" +
    "                                    </a>\n" +
    "                                </div>\n" +
    "                            </ul>\n" +
    "                        </a>\n" +
    "                    </li>\n" +
    "                </ul>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "</div>\n"
  );


  $templateCache.put('js/app/shared/templates/ysearch.html',
    "<div class=\"y-search\" ng-show=\"search.searchAvailable\">\n" +
    "    <form name=\"searchForm\" novalidate ng-submit=\"goToResultsPage()\">\n" +
    "        <div class=\"right-inner-addon\">\n" +
    "            <i ng-class=\"{'active': search.showSearchResults}\" class=\"glyphicon glyphicon-search js-glyphicon\"></i>\n" +
    "            <input id=\"search\" autocomplete=\"off\" placeholder=\"{{'SEARCH' | translate}}\" type=\"text\" ng-model=\"search.text\"\n" +
    "                   ng-change=\"doSearch(search.text, search.page)\" ng-focus=\"showSearchResults()\"\n" +
    "                   class=\"y-input form-control input-md\"/>\n" +
    "        </div>\n" +
    "        <div class=\"y-search-container\" ng-show=\"search.showSearchResults && search.results.length > 0\">\n" +
    "            <a class=\"form-control y-search-results\" ng-click=\"hideSearchResults()\"\n" +
    "               ui-sref=\"base.product.detail( {productId: result.objectID} )\" ng-repeat=\"result in search.results\">\n" +
    "                <div class=\"y-search-result-thumbnail\">\n" +
    "                    <img class=\"y-search-result-image\" ng-src=\"{{result.image}}\" />\n" +
    "                </div>\n" +
    "                <div class=\"y-search-result-attributes\">\n" +
    "                    <div class=\"y-search-result-name text-left\"\n" +
    "                          ng-bind-html=\"result._highlightResult.name[0].value\"></div>\n" +
    "                    <div ng-if=\"result.categories && result.categories.length > 0\" class=\"y-search-result-category text-left\">{{'IN' | translate}} {{result.categories.join(', ')}}</div>\n" +
    "                    <div class=\"y-search-result-price text-left\">{{result.prices[currency] | currency: currencySymbol }}</div>\n" +
    "                </div>\n" +
    "            </a>\n" +
    "            <a class=\" y-search-count text-center\" ng-click=\"hideSearchResults()\"\n" +
    "               ui-sref=\"base.search({ searchString:search.text })\">{{'SEE_ALL' | translate}} {{search.numberOfHits}}\n" +
    "                {{'RESULTS' | translate}} <span class=\"glyphicon glyphicon-chevron-right pull-right\"></span></a>\n" +
    "        </div>\n" +
    "        <div class=\"y-search-container y-search-unavailable\" ng-if=\"search.showSearchResults && search.searchError\">\n" +
    "            <div class=\"y-search-unavailable-text\">{{'SEARCH_UNAVAILABLE' | translate}}</div>\n" +
    "        </div>\n" +
    "        <div class=\"y-search-container y-search-unavailable\" ng-if=\"search.showSearchResults && !search.searchError && search.zeroResults\">\n" +
    "            <div class=\"y-search-unavailable-text\">{{'NO_RESULTS_FOUND' | translate}}</div>\n" +
    "        </div>\n" +
    "    </form>\n" +
    "</div>"
  );

}]);
